{
  "0xe6a8969e11f2cf224256a3938898f84a55c2680636f3874fdc83b2a7cbffc3fd": {
    "name": "Vault",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "Vault",
      "sourceName": "contracts/core/Vault.sol",
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "usdgAmount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "feeBasisPoints",
              "type": "uint256"
            }
          ],
          "name": "BuyUSDG",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "size",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "averagePrice",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "entryFundingRate",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "reserveAmount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "int256",
              "name": "realisedPnl",
              "type": "int256"
            }
          ],
          "name": "ClosePosition",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "feeUsd",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "feeTokens",
              "type": "uint256"
            }
          ],
          "name": "CollectMarginFees",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "feeUsd",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "feeTokens",
              "type": "uint256"
            }
          ],
          "name": "CollectSwapFees",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "DecreaseGuaranteedUsd",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "DecreasePoolAmount",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "indexToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "collateralDelta",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "sizeDelta",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "name": "DecreasePosition",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "DecreaseReservedAmount",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "DecreaseUsdgAmount",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "DirectPoolDeposit",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "IncreaseGuaranteedUsd",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "IncreasePoolAmount",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "indexToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "collateralDelta",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "sizeDelta",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "name": "IncreasePosition",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "IncreaseReservedAmount",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "IncreaseUsdgAmount",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "indexToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "size",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "reserveAmount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "int256",
              "name": "realisedPnl",
              "type": "int256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "markPrice",
              "type": "uint256"
            }
          ],
          "name": "LiquidatePosition",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "usdgAmount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "feeBasisPoints",
              "type": "uint256"
            }
          ],
          "name": "SellUSDG",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amountOutAfterFees",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "feeBasisPoints",
              "type": "uint256"
            }
          ],
          "name": "Swap",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "fundingRate",
              "type": "uint256"
            }
          ],
          "name": "UpdateFundingRate",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "hasProfit",
              "type": "bool"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "delta",
              "type": "uint256"
            }
          ],
          "name": "UpdatePnl",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "size",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "averagePrice",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "entryFundingRate",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "reserveAmount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "int256",
              "name": "realisedPnl",
              "type": "int256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "markPrice",
              "type": "uint256"
            }
          ],
          "name": "UpdatePosition",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "BASIS_POINTS_DIVISOR",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "FUNDING_RATE_PRECISION",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MAX_FEE_BASIS_POINTS",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MAX_FUNDING_RATE_FACTOR",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MAX_LIQUIDATION_FEE_USD",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MIN_FUNDING_RATE_INTERVAL",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "MIN_LEVERAGE",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "PRICE_PRECISION",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "USDG_DECIMALS",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_router",
              "type": "address"
            }
          ],
          "name": "addRouter",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_tokenDiv",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_tokenMul",
              "type": "address"
            }
          ],
          "name": "adjustForDecimals",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "allWhitelistedTokens",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "allWhitelistedTokensLength",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "approvedRouters",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "bufferAmounts",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            }
          ],
          "name": "buyUSDG",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            }
          ],
          "name": "clearTokenConfig",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "cumulativeFundingRates",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_collateralToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_indexToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_collateralDelta",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_sizeDelta",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_isLong",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            }
          ],
          "name": "decreasePosition",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            }
          ],
          "name": "directPoolDeposit",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "errorController",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "errors",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "feeReserves",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "fundingInterval",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "fundingRateFactor",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_indexToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_size",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_averagePrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_isLong",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_lastIncreasedTime",
              "type": "uint256"
            }
          ],
          "name": "getDelta",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_collateralToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_indexToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "_isLong",
              "type": "bool"
            }
          ],
          "name": "getEntryFundingRate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_usdgDelta",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_feeBasisPoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_taxBasisPoints",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_increment",
              "type": "bool"
            }
          ],
          "name": "getFeeBasisPoints",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_collateralToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_indexToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "_isLong",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_size",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_entryFundingRate",
              "type": "uint256"
            }
          ],
          "name": "getFundingFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            }
          ],
          "name": "getGlobalShortDelta",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            }
          ],
          "name": "getMaxPrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            }
          ],
          "name": "getMinPrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_indexToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_size",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_averagePrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_isLong",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_nextPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_sizeDelta",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_lastIncreasedTime",
              "type": "uint256"
            }
          ],
          "name": "getNextAveragePrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            }
          ],
          "name": "getNextFundingRate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_indexToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_nextPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_sizeDelta",
              "type": "uint256"
            }
          ],
          "name": "getNextGlobalShortAveragePrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_collateralToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_indexToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "_isLong",
              "type": "bool"
            }
          ],
          "name": "getPosition",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_collateralToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_indexToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "_isLong",
              "type": "bool"
            }
          ],
          "name": "getPositionDelta",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_collateralToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_indexToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "_isLong",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_sizeDelta",
              "type": "uint256"
            }
          ],
          "name": "getPositionFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_collateralToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_indexToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "_isLong",
              "type": "bool"
            }
          ],
          "name": "getPositionKey",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_collateralToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_indexToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "_isLong",
              "type": "bool"
            }
          ],
          "name": "getPositionLeverage",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_usdgAmount",
              "type": "uint256"
            }
          ],
          "name": "getRedemptionAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            }
          ],
          "name": "getRedemptionCollateral",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            }
          ],
          "name": "getRedemptionCollateralUsd",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            }
          ],
          "name": "getTargetUsdgAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            }
          ],
          "name": "getUtilisation",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "globalShortAveragePrices",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "globalShortSizes",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "gov",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "guaranteedUsd",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hasDynamicFees",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "inManagerMode",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "inPrivateLiquidationMode",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "includeAmmPrice",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_collateralToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_indexToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_sizeDelta",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_isLong",
              "type": "bool"
            }
          ],
          "name": "increasePosition",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_usdg",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_priceFeed",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_liquidationFeeUsd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_fundingRateFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stableFundingRateFactor",
              "type": "uint256"
            }
          ],
          "name": "initialize",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "isInitialized",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "isLeverageEnabled",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "isLiquidator",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "isManager",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "isSwapEnabled",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "lastFundingTimes",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_collateralToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_indexToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "_isLong",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "_feeReceiver",
              "type": "address"
            }
          ],
          "name": "liquidatePosition",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "liquidationFeeUsd",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "marginFeeBasisPoints",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "maxGasPrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "maxGlobalShortSizes",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "maxLeverage",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "maxUsdgAmounts",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "minProfitBasisPoints",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "minProfitTime",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "mintBurnFeeBasisPoints",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "poolAmounts",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "name": "positions",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "size",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averagePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "entryFundingRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveAmount",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "realisedPnl",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "lastIncreasedTime",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "priceFeed",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_router",
              "type": "address"
            }
          ],
          "name": "removeRouter",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "reservedAmounts",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "router",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            }
          ],
          "name": "sellUSDG",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "name": "setBufferAmount",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_errorCode",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_error",
              "type": "string"
            }
          ],
          "name": "setError",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_errorController",
              "type": "address"
            }
          ],
          "name": "setErrorController",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_taxBasisPoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stableTaxBasisPoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_mintBurnFeeBasisPoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_swapFeeBasisPoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stableSwapFeeBasisPoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_marginFeeBasisPoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_liquidationFeeUsd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_minProfitTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_hasDynamicFees",
              "type": "bool"
            }
          ],
          "name": "setFees",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_fundingInterval",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_fundingRateFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stableFundingRateFactor",
              "type": "uint256"
            }
          ],
          "name": "setFundingRate",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_gov",
              "type": "address"
            }
          ],
          "name": "setGov",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "_inManagerMode",
              "type": "bool"
            }
          ],
          "name": "setInManagerMode",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "_inPrivateLiquidationMode",
              "type": "bool"
            }
          ],
          "name": "setInPrivateLiquidationMode",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "_isLeverageEnabled",
              "type": "bool"
            }
          ],
          "name": "setIsLeverageEnabled",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "_isSwapEnabled",
              "type": "bool"
            }
          ],
          "name": "setIsSwapEnabled",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_liquidator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "_isActive",
              "type": "bool"
            }
          ],
          "name": "setLiquidator",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_manager",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "_isManager",
              "type": "bool"
            }
          ],
          "name": "setManager",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_maxGasPrice",
              "type": "uint256"
            }
          ],
          "name": "setMaxGasPrice",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "name": "setMaxGlobalShortSize",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_maxLeverage",
              "type": "uint256"
            }
          ],
          "name": "setMaxLeverage",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_priceFeed",
              "type": "address"
            }
          ],
          "name": "setPriceFeed",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_tokenWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_minProfitBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_maxUsdgAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_isStable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "_isShortable",
              "type": "bool"
            }
          ],
          "name": "setTokenConfig",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "name": "setUsdgAmount",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract IVaultUtils",
              "name": "_vaultUtils",
              "type": "address"
            }
          ],
          "name": "setVaultUtils",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "shortableTokens",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "stableFundingRateFactor",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "stableSwapFeeBasisPoints",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "stableTaxBasisPoints",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "stableTokens",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_tokenOut",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            }
          ],
          "name": "swap",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "swapFeeBasisPoints",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "taxBasisPoints",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "tokenBalances",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "tokenDecimals",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenAmount",
              "type": "uint256"
            }
          ],
          "name": "tokenToUsdMin",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "tokenWeights",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalTokenWeights",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_collateralToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_indexToken",
              "type": "address"
            }
          ],
          "name": "updateCumulativeFundingRate",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newVault",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "name": "upgradeVault",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_usdAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_price",
              "type": "uint256"
            }
          ],
          "name": "usdToToken",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_usdAmount",
              "type": "uint256"
            }
          ],
          "name": "usdToTokenMax",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_usdAmount",
              "type": "uint256"
            }
          ],
          "name": "usdToTokenMin",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "usdg",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "usdgAmounts",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "useSwapPricing",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_collateralToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_indexToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "_isLong",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "_raise",
              "type": "bool"
            }
          ],
          "name": "validateLiquidation",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "vaultUtils",
          "outputs": [
            {
              "internalType": "contract IVaultUtils",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "whitelistedTokenCount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "whitelistedTokens",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            }
          ],
          "name": "withdrawFees",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x60806040526001805462ff00001961ff00199091166101001716620100001781556207a1206008556032600a9081556014600b55601e600c819055600d556004600e55600f556011805460ff199081169091556170806012556016805463ffffff0019921690921716905534801561007657600080fd5b506001600055600680546001600160a01b03191633179055615ef4806200009e6000396000f3fe608060405234801561001057600080fd5b50600436106105995760003560e01c80638585f4d2116102e9578063c7e074c31161018f578063c7e074c314611225578063cea0c32814611265578063cfad57a21461129b578063d2fa635e146112c1578063d3127e63146112de578063d54d5a9f146112fb578063d66b000d1461135a578063d8f897c314611386578063d9ac4225146113ac578063da76524c146113b4578063daf9c210146113fe578063db3555fb14611424578063db97495f1461144a578063dc8f5fac14611496578063de2ea9481461149e578063df73a267146114e6578063e124e6d2146114ee578063e468baf014611514578063e67f59a714611531578063efa10a6e14611557578063f07456ce14611583578063f07bbf77146115a9578063f2555278146115c8578063f3ae2415146115f6578063f5b91b7b1461161c578063f887ea4014611624578063fa12dbc01461162c578063fbfded6d1461165e578063fce28c101461168c578063fdaf6ac314611694578063fed1a606146116d857610599565b80638585f4d214610e90578063870d917c14610ebc57806388b1fbdf14610ec45780638a27d46814610eea5780638a39735a1461061a5780638a78daa814610f135780638ee573ac14610f395780638f7b840414610f5f5780639060b1ca14610f855780639331621214610f8d57806395082d2514610fc55780639698d25a14610fcd5780639849e41214610ff35780639899cd0214610ffb5780639d7432ca146110275780639f392eb314611059578063a22f239214611061578063a42ab3d214611069578063a5e90eee14611095578063a93acac2146110c3578063ab08c1c6146110e9578063ab2f3ad4146110f1578063ad1e4f8d14611117578063ae3302c21461113d578063b06423f314611145578063b136ca491461114d578063b1cc53ab14611173578063b364accb146111ab578063c3c7b9e9146111d1578063c4f718bf146111f7578063c65bc7b1146111ff57610599565b80634453a3741161044e5780634453a3741461097057806345a6f3701461099e57806348d91abf146109f757806348f35cbb14610a3b5780634a3f088d14610a435780634a993ee914610ac45780634befe2ca14610aea5780634d47b30414610af2578063514ea4bf14610afa57806351723e8214610b4f578063523fba7f14610b8d578063529a356f14610bb357806352f55eed14610bd95780635c07eaab14610bff5780635f7bc11914610c3f5780636092219914610c6557806362287a3214610c935780636274980314610c9b5780636abbe0c814610cc15780636ae0b15414610cc95780636be6026b14610cef57806371089f4d14610cf7578063711e619014610d1d578063724e78da14610d4b578063728cdbca14610d71578063741bef1a14610db95780637a210a2b14610dc15780637c2eb9f714610dc9578063817bb85714610de857806381a612d614610e1657806382a0849014610e3c57610599565b806304fef1db1461059e57806307c58752146105d65780630842b076146105de5780630a48d5a9146105e657806310eb56c214610612578063126082cf1461061a57806312d43a5114610622578063134ca63b14610646578063174d26941461064e578063181e210e146106565780631aa4ace5146106725780631ce9cb8f1461069857806324b0c04d146106be57806324ca984e146106df57806328e67be51461070557806329ff96151461077a5780632c668ec1146107a05780632d4b0576146107cc57806330455ede1461080a578063318bc6891461082957806334c1557d1461061a578063351a964d14610831578063392e53cd146108395780633a05dcc1146108415780633c5a6e35146108675780633de39c11146108b55780633e72a262146108bd57806340eb3802146108c5578063421528731461091657806342b60b031461094a575b600080fd5b6105c4600480360360208110156105b457600080fd5b50356001600160a01b031661176a565b60408051918252519081900360200190f35b6105c46117cd565b6105c46117de565b6105c4600480360360408110156105fc57600080fd5b506001600160a01b0381351690602001356117e4565b6105c4611837565b6105c461183d565b61062a611843565b604080516001600160a01b039092168252519081900360200190f35b6105c4611852565b6105c4611858565b61065e61185e565b604080519115158252519081900360200190f35b6105c46004803603602081101561068857600080fd5b50356001600160a01b031661186e565b6105c4600480360360208110156106ae57600080fd5b50356001600160a01b0316611880565b6106dd600480360360208110156106d457600080fd5b50351515611892565b005b6106dd600480360360208110156106f557600080fd5b50356001600160a01b03166118b6565b6106dd6004803603604081101561071b57600080fd5b81359190810190604081016020820135600160201b81111561073c57600080fd5b82018360208201111561074e57600080fd5b803590602001918460018302840111600160201b8311171561076f57600080fd5b5090925090506118e7565b6105c46004803603602081101561079057600080fd5b50356001600160a01b0316611965565b6105c4600480360360408110156107b657600080fd5b506001600160a01b038135169060200135611979565b6105c4600480360360808110156107e257600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013515156119be565b6106dd6004803603602081101561082057600080fd5b50351515611a14565b6105c4611a36565b61065e611a3c565b61065e611a4a565b6105c46004803603602081101561085757600080fd5b50356001600160a01b0316611a53565b6106dd600480360360e081101561087d57600080fd5b506001600160a01b038135169060208101359060408101359060608101359060808101359060a081013515159060c001351515611b13565b6105c4611c55565b61065e611c5b565b6106dd60048036036101208110156108dc57600080fd5b5080359060208101359060408101359060608101359060808101359060a08101359060c08101359060e08101359061010001351515611c6a565b6105c46004803603606081101561092c57600080fd5b508035906001600160a01b0360208201358116916040013516611d24565b61065e6004803603602081101561096057600080fd5b50356001600160a01b0316611dc6565b6106dd6004803603604081101561098657600080fd5b506001600160a01b0381351690602001351515611ddb565b6109dc600480360360808110156109b457600080fd5b506001600160a01b038135811691602081013582169160408201351690606001351515611e0e565b60408051921515835260208301919091528051918290030190f35b6106dd600480360360a0811015610a0d57600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013590608001351515611eac565b61062a6122eb565b610a8160048036036080811015610a5957600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013515156122fa565b604080519889526020890197909752878701959095526060870193909352608086019190915260a0850152151560c084015260e083015251908190036101000190f35b6105c460048036036020811015610ada57600080fd5b50356001600160a01b03166123f0565b6105c4612402565b6105c4612408565b610b1760048036036020811015610b1057600080fd5b503561240e565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b6105c460048036036080811015610b6557600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135151561244b565b6105c460048036036020811015610ba357600080fd5b50356001600160a01b03166124f1565b61065e60048036036020811015610bc957600080fd5b50356001600160a01b0316612503565b6105c460048036036020811015610bef57600080fd5b50356001600160a01b0316612518565b6109dc600480360360a0811015610c1557600080fd5b506001600160a01b038135169060208101359060408101359060608101351515906080013561252a565b6106dd60048036036020811015610c5557600080fd5b50356001600160a01b0316612622565b61065e60048036036040811015610c7b57600080fd5b506001600160a01b0381358116916020013516612705565b6105c4612725565b6105c460048036036020811015610cb157600080fd5b50356001600160a01b031661272b565b61062a61273d565b6106dd60048036036020811015610cdf57600080fd5b50356001600160a01b0316612753565b6105c4612781565b6106dd60048036036020811015610d0d57600080fd5b50356001600160a01b0316612788565b6105c460048036036040811015610d3357600080fd5b506001600160a01b03813581169160200135166127bc565b6106dd60048036036020811015610d6157600080fd5b50356001600160a01b0316612a50565b6106dd600480360360c0811015610d8757600080fd5b506001600160a01b03813581169160208101358216916040820135169060608101359060808101359060a00135612a7a565b61062a612af1565b6105c4612b00565b6106dd60048036036020811015610ddf57600080fd5b50351515612b06565b6105c460048036036040811015610dfe57600080fd5b506001600160a01b0381358116916020013516612b2a565b6105c460048036036020811015610e2c57600080fd5b50356001600160a01b0316612dfa565b6105c4600480360360e0811015610e5257600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359160808201359160a081013515159160c09091013516612ea5565b6106dd60048036036040811015610ea657600080fd5b506001600160a01b038135169060200135612f23565b6105c4612f47565b6105c460048036036020811015610eda57600080fd5b50356001600160a01b0316612f4c565b6106dd60048036036060811015610f0057600080fd5b5080359060208101359060400135612f5e565b6105c460048036036020811015610f2957600080fd5b50356001600160a01b0316612fa4565b6105c460048036036020811015610f4f57600080fd5b50356001600160a01b0316612fb6565b6106dd60048036036020811015610f7557600080fd5b50356001600160a01b0316612fc8565b61065e612ff2565b6105c460048036036060811015610fa357600080fd5b506001600160a01b038135811691602081013582169160409091013516613001565b6105c46132e9565b6105c460048036036020811015610fe357600080fd5b50356001600160a01b03166132f9565b6105c461330b565b6105c46004803603604081101561101157600080fd5b506001600160a01b038135169060200135613311565b6105c46004803603606081101561103d57600080fd5b506001600160a01b038135169060208101359060400135613333565b61065e6133dc565b6105c46133e5565b6105c46004803603604081101561107f57600080fd5b506001600160a01b0381351690602001356133eb565b6106dd600480360360408110156110ab57600080fd5b506001600160a01b0381351690602001351515613408565b6105c4600480360360208110156110d957600080fd5b50356001600160a01b031661343b565b61065e613539565b6105c46004803603602081101561110757600080fd5b50356001600160a01b0316613542565b6105c46004803603602081101561112d57600080fd5b50356001600160a01b0316613554565b6105c4613566565b61065e61356c565b6105c46004803603602081101561116357600080fd5b50356001600160a01b031661357a565b6105c46004803603606081101561118957600080fd5b506001600160a01b03813581169160208101359091169060400135151561361b565b6109dc600480360360208110156111c157600080fd5b50356001600160a01b03166136b6565b6105c4600480360360208110156111e757600080fd5b50356001600160a01b031661374e565b6105c4613760565b6105c46004803603602081101561121557600080fd5b50356001600160a01b0316613766565b6105c4600480360360a081101561123b57600080fd5b506001600160a01b0381351690602081013590604081013590606081013590608001351515613778565b6106dd6004803603606081101561127b57600080fd5b506001600160a01b03813581169160208101359091169060400135613822565b6106dd600480360360208110156112b157600080fd5b50356001600160a01b0316613843565b6106dd600480360360208110156112d757600080fd5b503561386d565b6106dd600480360360208110156112f457600080fd5b503561387a565b611341600480360360a081101561131157600080fd5b506001600160a01b0381358116916020810135821691604082013516906060810135151590608001351515613896565b6040805192835260208301919091528051918290030190f35b6106dd6004803603604081101561137057600080fd5b506001600160a01b03813516906020013561394d565b6105c46004803603602081101561139c57600080fd5b50356001600160a01b03166139a6565b6105c46139b8565b6105c4600480360360c08110156113ca57600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013515159060808101359060a001356139be565b61065e6004803603602081101561141457600080fd5b50356001600160a01b0316613a72565b61065e6004803603602081101561143a57600080fd5b50356001600160a01b0316613a87565b6105c4600480360360e081101561146057600080fd5b506001600160a01b0381351690602081013590604081013590606081013515159060808101359060a08101359060c00135613a9b565b6105c4613b2c565b6106dd600480360360a08110156114b457600080fd5b506001600160a01b03813581169160208101358216916040820135811691606081013515159160809091013516613b32565b6105c4613f0a565b6105c46004803603602081101561150457600080fd5b50356001600160a01b0316613f10565b61062a6004803603602081101561152a57600080fd5b5035613f88565b6106dd6004803603602081101561154757600080fd5b50356001600160a01b0316613faf565b6106dd6004803603604081101561156d57600080fd5b506001600160a01b038135169060200135614082565b6105c46004803603602081101561159957600080fd5b50356001600160a01b03166140a6565b6106dd600480360360208110156115bf57600080fd5b503515156140b8565b6105c4600480360360408110156115de57600080fd5b506001600160a01b03813581169160200135166140de565b61065e6004803603602081101561160c57600080fd5b50356001600160a01b0316614134565b61062a614149565b61062a614158565b6105c46004803603606081101561164257600080fd5b506001600160a01b038135169060208101359060400135614167565b6106dd6004803603604081101561167457600080fd5b506001600160a01b03813581169160200135166141a1565b6105c461437a565b6105c4600480360360a08110156116aa57600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013515159060800135614380565b6116f5600480360360208110156116ee57600080fd5b50356143f6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561172f578181015183820152602001611717565b50505050905090810190601f16801561175c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6001600160a01b038116600090815260256020526040812054806117925760009150506117c8565b6001600160a01b0383166000908152602660205260409020546117c49082906117be90620f4240614491565b906144ea565b9150505b919050565b6904ee2d6d415b85acef8160201b81565b601b5490565b6000816117f357506000611831565b60006117fe84612dfa565b6001600160a01b0385166000908152601d602052604090205490915061182c600a82900a6117be8685614491565b925050505b92915050565b600b5481565b61271081565b6006546001600160a01b031681565b60145481565b60095481565b6016546301000000900460ff1681565b60236020526000908152604090205481565b602c6020526000908152604090205481565b61189a614529565b60168054911515620100000262ff000019909216919091179055565b3360009081526018602090815260408083206001600160a01b0394909416835292905220805460ff19166001179055565b6002546001600160a01b03163314611946576040805162461bcd60e51b815260206004820152601e60248201527f5661756c743a20696e76616c6964206572726f72436f6e74726f6c6c65720000604482015290519081900360640190fd5b600083815260306020526040902061195f908383615dac565b50505050565b6000611831826119748461357a565b6117e4565b60008061198584613f10565b905060006119a3826117be8668327cb2734119d3b7a9601e1b614491565b60055490915061182c9082906001600160a01b031687611d24565b604080516001600160601b0319606096871b811660208084019190915295871b811660348301529390951b9092166048850152151560f81b605c8401528051603d818503018152605d9093019052815191012090565b611a1c614529565b600180549115156101000261ff0019909216919091179055565b600f5481565b600154610100900460ff1681565b60015460ff1681565b600080600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aa457600080fd5b505afa158015611ab8573d6000803e3d6000fd5b505050506040513d6020811015611ace57600080fd5b5051905080611ae15760009150506117c8565b6001600160a01b038316600090815260226020526040902054601554611b0b906117be8385614491565b949350505050565b611b1b614529565b6001600160a01b0387166000908152601c602052604090205460ff16611b9857600754611b49906001614544565b600755601b80546001810182556000919091527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc10180546001600160a01b0319166001600160a01b0389161790555b6015546001600160a01b038816600090815260226020526040902054611bbf90829061459c565b6001600160a01b0389166000908152601c602090815260408083208054600160ff1991821617909155601d83528184208c9055602283528184208b9055601e83528184208a905560248352818420899055601f83528184208054821689151517905591805290912080549091168415151790559050611c3e8187614544565b601555611c4a88613f10565b505050505050505050565b60175481565b60015462010000900460ff1681565b611c72614529565b611c826101f48a111560036145de565b611c926101f489111560046145de565b611ca26101f488111560056145de565b611cb26101f487111560066145de565b611cc26101f486111560076145de565b611cd26101f485111560086145de565b611ced6904ee2d6d415b85acef8160201b84111560096145de565b600a98909855600b96909655600c94909455600d92909255600e55600f556009556010556011805460ff1916911515919091179055565b60055460009081906001600160a01b03858116911614611d5c576001600160a01b0384166000908152601d6020526040902054611d5f565b60125b6005549091506000906001600160a01b03858116911614611d98576001600160a01b0384166000908152601d6020526040902054611d9b565b60125b9050611dba82600a0a6117be83600a0a8961449190919063ffffffff16565b925050505b9392505050565b601f6020526000908152604090205460ff1681565b611de3614529565b6001600160a01b03919091166000908152601960205260409020805460ff1916911515919091179055565b6000806000611e1f878787876119be565b9050611e29615e2a565b506000818152602b6020908152604091829020825160e081018452815480825260018301549382019390935260028201549381018490526003820154606082015260048201546080820152600582015460a082015260069091015460c082018190529092611e9d928992909190899061252a565b93509350505094509492505050565b60026000541415611ef2576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b6002600055600154611f0e9062010000900460ff16601c6145de565b611f1661468a565b611f1f856146a6565b611f2a848483614709565b60015460408051634eae147d60e11b81526001600160a01b038881166004830152878116602483015286811660448301526064820186905284151560848301529151630100000090930490911691639d5c28fa9160a480820192600092909190829003018186803b158015611f9e57600080fd5b505afa158015611fb2573d6000803e3d6000fd5b50505050611fc084846141a1565b6000611fce868686856119be565b6000818152602b6020526040812091925083611ff257611fed86612dfa565b611ffb565b611ffb86613f10565b825490915061200c57600282018190555b81541580159061201c5750600085115b156120425761203c868360000154846002015487858a8860060154613a9b565b60028301555b600061205b898989888a8860000154896003015461481e565b90506000612068896148ec565b905060006120768a836117e4565b60018601549091506120889082614544565b6001860181905561209d90841115601d6145de565b60018501546120ac908461459c565b60018601556120bc8a8a8961361b565b600386015584546120cd9089614544565b8086554260068701556120e3901515601e6145de565b6120f585600001548660010154614999565b6121038b8b8b8a6001613896565b505060006121118b8a6133eb565b60048701549091506121239082614544565b60048701556121328b826149bd565b87156121775761214b8b6121468b87614544565b614a5d565b6121558b83614adc565b61215f8b84614b5b565b6121728b61216d8d87613311565b614c73565b6121e3565b6001600160a01b038a166000908152602d60205260409020546121b4576001600160a01b038a166000908152602e602052604090208590556121d9565b6121bf8a868b613333565b6001600160a01b038b166000908152602e60205260409020555b6121e38a8a614d46565b604080518881526001600160a01b03808f166020830152808e16828401528c1660608201526080810184905260a081018b905289151560c082015260e08101879052610100810186905290517f2fe68525253654c21998f35787a8d0f361905ef647c854092430ab65f2f15022918190036101200190a1855460018701546002880154600389015460048a015460058b0154604080518e81526020810197909752868101959095526060860193909352608085019190915260a084015260c083015260e08201879052517f20853733b590dce729d9f4628682ebd9a34d2354e72679e66f43a008fc03b773918190036101000190a15050600160005550505050505050505050565b6002546001600160a01b031681565b60008060008060008060008060006123148d8d8d8d6119be565b905061231e615e2a565b602b60008381526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505090506000808260a001511361239e578160a001516000036123a4565b8160a001515b9050816000015182602001518360400151846060015185608001518560008860a0015112158860c001519a509a509a509a509a509a509a509a5050505094995094995094999196509450565b60276020526000908152604090205481565b6101f481565b600c5481565b602b602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b60008061245a868686866119be565b9050612464615e2a565b506000818152602b6020908152604091829020825160e0810184528154815260018201549281018390526002820154938101939093526003810154606084015260048101546080840152600581015460a08401526006015460c08301526124ce90151560256145de565b602081015181516124e691906117be90612710614491565b979650505050505050565b60216020526000908152604090205481565b60196020526000908152604090205460ff1681565b60256020526000908152604090205481565b60008061253b6000861160266145de565b6000846125505761254b88613f10565b612559565b61255988612dfa565b905060008187116125735761256e828861459c565b61257d565b61257d878361459c565b9050600061258f886117be8b85614491565b9050600087156125a257508783116125a7565b508288115b60006125be6010548961454490919063ffffffff16565b42116125e2576001600160a01b038c166000908152601e60205260409020546125e5565b60005b905081801561260857506125f98b82614491565b61260584612710614491565b11155b1561261257600092505b509a909950975050505050505050565b60026000541415612668576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b600260009081556001600160a01b0382168152601c60205260409020546126939060ff16600e6145de565b600061269e826148ec565b90506126ae60008211600f6145de565b6126b88282614b5b565b604080516001600160a01b03841681526020810183905281517fa5a389190ebf6170a133bda5c769b77f4d6715b8aa172ec0ddf8473d0b4944bd929181900390910190a150506001600055565b601860209081526000928352604080842090915290825290205460ff1681565b60075481565b602e6020526000908152604090205481565b600154630100000090046001600160a01b031681565b3360009081526018602090815260408083206001600160a01b0394909416835292905220805460ff19169055565b620f424081565b612790614529565b600180546001600160a01b039092166301000000026301000000600160b81b0319909216919091179055565b600060026000541415612804576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b6002600055612811614dfe565b6001600160a01b0383166000908152601c60205260409020546128389060ff1660136145de565b6016805461ff00191661010017905560055460009061285f906001600160a01b03166148ec565b905061286f6000821160146145de565b61287984856141a1565b60006128858583611979565b90506128956000821160156145de565b61289f8583614e2d565b6128a98582614c73565b60055460408051632770a7eb60e21b81523060048201526024810185905290516001600160a01b0390921691639dc29fac9160448082019260009290919082900301818387803b1580156128fc57600080fd5b505af1158015612910573d6000803e3d6000fd5b505060055461292a92506001600160a01b03169050614f0f565b6001546040805163eb0835bf60e01b81526001600160a01b038881166004830152602482018690529151600093630100000090049092169163eb0835bf91604480820192602092909190829003018186803b15801561298857600080fd5b505afa15801561299c573d6000803e3d6000fd5b505050506040513d60208110156129b257600080fd5b5051905060006129c3878484614faa565b90506129d36000821160166145de565b6129de878288615072565b604080516001600160a01b03808916825289166020820152808201869052606081018390526080810184905290517fd732b7828fa6cee72c285eac756fc66a7477e3dc22e22e7c432f1c265d40b4839181900360a00190a16016805461ff001916905560016000559695505050505050565b612a58614529565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b612a82614529565b60018054612a969160ff90911615906145de565b6001805460ff191681179055600380546001600160a01b03199081166001600160a01b039889161790915560058054821696881696909617909555600480549095169390951692909217909255600991909155601355601455565b6004546001600160a01b031681565b600a5481565b612b0e614529565b60018054911515620100000262ff000019909216919091179055565b600060026000541415612b72576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b6002600055612b7f614dfe565b6001600160a01b0383166000908152601c6020526040902054612ba69060ff1660106145de565b6016805461ff0019166101001790556000612bc0846148ec565b9050612bd06000821160116145de565b612bda84856141a1565b6000612be585612dfa565b90506000612c0368327cb2734119d3b7a9601e1b6117be8585614491565b600554909150612c1f90829088906001600160a01b0316611d24565b9050612c2f6000821160126145de565b6001546040805163256f6ee360e11b81526001600160a01b0389811660048301526024820185905291516000936301000000900490921691634adeddc691604480820192602092909190829003018186803b158015612c8d57600080fd5b505afa158015612ca1573d6000803e3d6000fd5b505050506040513d6020811015612cb757600080fd5b505190506000612cc8888684614faa565b90506000612ce668327cb2734119d3b7a9601e1b6117be8488614491565b600554909150612d029082908b906001600160a01b0316611d24565b9050612d0e8982615119565b612d188983614b5b565b600554604080516340c10f1960e01b81526001600160a01b038b8116600483015260248201859052915191909216916340c10f1991604480830192600092919082900301818387803b158015612d6d57600080fd5b505af1158015612d81573d6000803e3d6000fd5b5050604080516001600160a01b03808d1682528d1660208201528082018a9052606081018590526080810187905290517fab4c77c74cd32c85f35416cf03e7ce9e2d4387f7b7f2c1f4bf53daaecf8ea72d93509081900360a0019150a16016805461ff0019169055600160005598975050505050505050565b60048054601654604080516317e1d38560e11b81526001600160a01b038681169582019590955260006024820181905260ff80851615156044840152610100909404909316151560648201529051919390921691632fc3a70a916084808301926020929190829003018186803b158015612e7357600080fd5b505afa158015612e87573d6000803e3d6000fd5b505050506040513d6020811015612e9d57600080fd5b505192915050565b600060026000541415612eed576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b6002600055612efa61468a565b612f03886146a6565b612f12888888888888886151d7565b600160005598975050505050505050565b612f2b614529565b6001600160a01b03909116600090815260276020526040902055565b601281565b601e6020526000908152604090205481565b612f66614529565b612f76610e10841015600a6145de565b612f86612710831115600b6145de565b612f96612710821115600c6145de565b601292909255601355601455565b602d6020526000908152604090205481565b601d6020526000908152604090205481565b612fd0614529565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60165462010000900460ff1681565b600060026000541415613049576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b600260005560015461306490610100900460ff1660176145de565b6001600160a01b0384166000908152601c602052604090205461308b9060ff1660186145de565b6001600160a01b0383166000908152601c60205260409020546130b29060ff1660196145de565b6130d2836001600160a01b0316856001600160a01b03161415601a6145de565b6016805461ff0019166101001790556130eb84806141a1565b6130f583846141a1565b6000613100856148ec565b905061311060008211601b6145de565b600061311b86612dfa565b9050600061312886613f10565b9050600061313a826117be8686614491565b9050613147818989611d24565b9050600061316568327cb2734119d3b7a9601e1b6117be8787614491565b6005549091506131819082908b906001600160a01b0316611d24565b60015460408051636d099c0b60e11b81526001600160a01b038d811660048301528c8116602483015260448201859052915193945060009363010000009093049091169163da13381691606480820192602092909190829003018186803b1580156131eb57600080fd5b505afa1580156131ff573d6000803e3d6000fd5b505050506040513d602081101561321557600080fd5b5051905060006132268a8584614faa565b90506132328b84615119565b61323c8a84614e2d565b6132468b88614b5b565b6132508a85614c73565b6132598a61569a565b6132648a828b615072565b604080516001600160a01b03808c168252808e1660208301528c1681830152606081018990526080810186905260a0810183905260c0810184905290517f0874b2d545cb271cdbda4e093020c452328b24af12382ed62c4d00f5c26709db9181900360e00190a16016805461ff001916905560016000559a9950505050505050505050565b68327cb2734119d3b7a9601e1b81565b602f6020526000908152604090205481565b60125481565b60008161332057506000611831565b611dbf838361332e86613f10565b614167565b6001600160a01b0383166000908152602d6020908152604080832054602e9092528220548285821161336e57613369868361459c565b613378565b613378828761459c565b9050600061338a836117be8685614491565b9050868311600061339b8689614544565b90506000826133b3576133ae8285614544565b6133bd565b6133bd828561459c565b90506133cd816117be8c85614491565b9b9a5050505050505050505050565b60115460ff1681565b600d5481565b6000816133fa57506000611831565b611dbf838361332e86612dfa565b613410614529565b6001600160a01b03919091166000908152601a60205260409020805460ff1916911515919091179055565b6012546001600160a01b0382166000908152602a60205260408120549091429161346491614544565b1115613472575060006117c8565b6012546001600160a01b0383166000908152602a6020526040812054909161349f916117be90429061459c565b6001600160a01b038416600090815260256020526040902054909150806134cb576000925050506117c8565b6001600160a01b0384166000908152601f602052604081205460ff166134f3576013546134f7565b6014545b6001600160a01b0386166000908152602660205260409020549091506135309083906117be90869061352a908690614491565b90614491565b95945050505050565b60165460ff1681565b60226020526000908152604090205481565b60246020526000908152604090205481565b60085481565b601654610100900460ff1681565b6001600160a01b0381166000908152601f602052604081205460ff16156135ba57506001600160a01b0381166000908152602560205260409020546117c8565b6001600160a01b0382166000908152602860205260408120546135de908490613311565b6001600160a01b0384166000908152602660209081526040808320546025909252909120549192506117c491613615908490614544565b9061459c565b6001546040805163b1cc53ab60e01b81526001600160a01b038681166004830152858116602483015284151560448301529151600093630100000090049092169163b1cc53ab91606480820192602092909190829003018186803b15801561368257600080fd5b505afa158015613696573d6000803e3d6000fd5b505050506040513d60208110156136ac57600080fd5b5051949350505050565b6001600160a01b0381166000908152602d60205260408120548190806136e3576000809250925050613749565b60006136ee85613f10565b6001600160a01b0386166000908152602e60205260408120549192508282116137205761371b838361459c565b61372a565b61372a828461459c565b9050600061373c836117be8785614491565b9390921195509193505050505b915091565b60266020526000908152604090205481565b60135481565b60296020526000908152604090205481565b6001546040805163c7e074c360e01b81526001600160a01b03888116600483015260248201889052604482018790526064820186905284151560848301529151600093630100000090049092169163c7e074c39160a480820192602092909190829003018186803b1580156137ec57600080fd5b505afa158015613800573d6000803e3d6000fd5b505050506040513d602081101561381657600080fd5b50519695505050505050565b61382a614529565b61383e6001600160a01b038316848361570f565b505050565b61384b614529565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b613875614529565b601755565b613882614529565b613891612710821160026145de565b600855565b6001546040805163d54d5a9f60e01b81526001600160a01b03888116600483015287811660248301528681166044830152851515606483015284151560848301528251600094859463010000009091049092169263d54d5a9f9260a4808301939192829003018186803b15801561390c57600080fd5b505afa158015613920573d6000803e3d6000fd5b505050506040513d604081101561393657600080fd5b508051602090910151909890975095505050505050565b613955614529565b6001600160a01b0382166000908152602360205260409020548082111561398f5761398983613984848461459c565b615119565b506139a2565b61383e8361399d838561459c565b614e2d565b5050565b602a6020526000908152604090205481565b60105481565b6001546040805163369d949360e21b81526001600160a01b0389811660048301528881166024830152878116604483015286151560648301526084820186905260a482018590529151600093630100000090049092169163da76524c9160c480820192602092909190829003018186803b158015613a3b57600080fd5b505afa158015613a4f573d6000803e3d6000fd5b505050506040513d6020811015613a6557600080fd5b5051979650505050505050565b601c6020526000908152604090205460ff1681565b602080526000908152604090205460ff1681565b6000806000613aad8a8a8a8a8861252a565b90925090506000613abe8a87614544565b905060008815613aed5783613adc57613ad7828461459c565b613ae6565b613ae68284614544565b9050613b0e565b83613b0157613afc8284614544565b613b0b565b613b0b828461459c565b90505b613b1c816117be8a85614491565b9c9b505050505050505050505050565b60155481565b60026000541415613b78576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b60026000556016546301000000900460ff1615613bad5733600090815260196020526040902054613bad9060ff1660226145de565b6016805460ff19169055613bc184846141a1565b6000613bcf868686866119be565b9050613bd9615e2a565b506000818152602b6020908152604091829020825160e08101845281548082526001830154938201939093526002820154938101939093526003810154606084015260048101546080840152600581015460a08401526006015460c0830152613c4590151560236145de565b600080613c56898989896000613896565b91509150613c69826000141560246145de565b8160021415613c9e57613c86898989600087600001518b8f6151d7565b50506016805460ff1916600117905550613efe915050565b6000613caa8983613311565b6001600160a01b038a166000908152602c6020526040902054909150613cd09082614544565b6001600160a01b038a166000818152602c602090815260409182902093909355805191825291810184905280820183905290517f5d0c0019d3d45fadeb74eff9d2c9924d146d000ac6bcf3c28bf0ac3c9baa011a9181900360600190a1613d3b898560800151615761565b8615613d6a5760208401518451613d5c918b91613d579161459c565b614adc565b613d6a8961216d8b85613311565b600087613d7f57613d7a89613f10565b613d88565b613d8889612dfa565b90507f2e1f85a64a2f22cf2f0c42584e7c919ed4abe8d53675cff0f62bf1e95a1c676f868c8c8c8c8a600001518b602001518c608001518d60a001518a604051808b81526020018a6001600160a01b03168152602001896001600160a01b03168152602001886001600160a01b0316815260200187151581526020018681526020018581526020018481526020018381526020018281526020019a505050505050505050505060405180910390a187158015613e475750846020015183105b15613e75576020850151600090613e5e908561459c565b9050613e738b613e6e8d84613311565b614b5b565b505b87613e8857613e88898660000151615816565b6000868152602b60205260408120818155600181018290556002810182905560038101829055600481018290556005810182905560060155600954613ed4908b9061216d908290613311565b613eea8a613ee48c600954613311565b89615072565b50506016805460ff19166001179055505050505b50506001600055505050565b600e5481565b60048054601654604080516317e1d38560e11b81526001600160a01b03868116958201959095526001602482015260ff80841615156044830152610100909304909216151560648301525160009390921691632fc3a70a91608480820192602092909190829003018186803b158015612e7357600080fd5b601b8181548110613f9557fe5b6000918252602090912001546001600160a01b0316905081565b613fb7614529565b6001600160a01b0381166000908152601c6020526040902054613fde9060ff16600d6145de565b6001600160a01b0381166000908152602260205260409020546015546140039161459c565b6015556001600160a01b0381166000908152601c60209081526040808320805460ff19908116909155601d835281842084905560228352818420849055601e835281842084905560248352818420849055601f83528184208054821690559180529091208054909116905560075461407c90600161459c565b60075550565b61408a614529565b6001600160a01b039091166000908152602f6020526040902055565b60286020526000908152604090205481565b6140c0614529565b6016805491151563010000000263ff00000019909216919091179055565b60006140e8614529565b6001600160a01b0383166000908152602c602052604090205480614110576000915050611831565b6001600160a01b0384166000908152602c6020526040812055611dbf848285615072565b601a6020526000908152604090205460ff1681565b6005546001600160a01b031681565b6003546001600160a01b031681565b60008261417657506000611dbf565b6001600160a01b0384166000908152601d6020526040902054613530836117be86600a85900a614491565b6001546040805163fbfded6d60e01b81526001600160a01b03858116600483015284811660248301529151600093630100000090049092169163fbfded6d9160448082019260209290919082900301818787803b15801561420157600080fd5b505af1158015614215573d6000803e3d6000fd5b505050506040513d602081101561422b57600080fd5b505190508061423a57506139a2565b6001600160a01b0383166000908152602a6020526040902054614287576012546142689061352a42826144ea565b6001600160a01b0384166000908152602a6020526040902055506139a2565b6012546001600160a01b0384166000908152602a602052604090205442916142af9190614544565b11156142bb57506139a2565b60006142c68461343b565b6001600160a01b0385166000908152602960205260409020549091506142ec9082614544565b6001600160a01b0385166000908152602960205260409020556012546143169061352a42826144ea565b6001600160a01b0385166000818152602a602090815260408083209490945560298152908390205483519283529082015281517fa146fc154e1913322e9817d49f0d5c37466c24326e15de10e739a948be815eab929181900390910190a150505050565b610e1081565b6001546040805163fdaf6ac360e01b81526001600160a01b038881166004830152878116602483015286811660448301528515156064830152608482018590529151600093630100000090049092169163fdaf6ac39160a480820192602092909190829003018186803b1580156137ec57600080fd5b60306020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156144895780601f1061445e57610100808354040283529160200191614489565b820191906000526020600020905b81548152906001019060200180831161446c57829003601f168201915b505050505081565b6000826144a057506000611831565b828202828482816144ad57fe5b0414611dbf5760405162461bcd60e51b8152600401808060200182810382526021815260200180615e9d6021913960400191505060405180910390fd5b6000611dbf83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b81525061587e565b600654614542906001600160a01b0316331460356145de565b565b600082820183811015611dbf576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b6000611dbf83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615920565b60008181526030602052604090208261383e5760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561467b5780601f106146505761010080835404028352916020019161467b565b820191906000526020600020905b81548152906001019060200180831161465e57829003601f168201915b50509250505060405180910390fd5b60175461469657614542565b6145426017543a111560376145de565b336001600160a01b03821614156146bc57614706565b6003546001600160a01b03163314156146d457614706565b6001600160a01b03811660009081526018602090815260408083203384529091529020546147069060ff1660296145de565b50565b80156147825761472e826001600160a01b0316846001600160a01b031614602a6145de565b6001600160a01b0383166000908152601c60205260409020546147559060ff16602b6145de565b6001600160a01b0383166000908152601f602052604090205461477d9060ff1615602c6145de565b61383e565b6001600160a01b0383166000908152601c60205260409020546147a99060ff16602d6145de565b6001600160a01b0383166000908152601f60205260409020546147d09060ff16602e6145de565b6001600160a01b0382166000908152601f60205260409020546147f89060ff1615602f6145de565b6001600160a01b038216600090815260208052604090205461383e9060ff1660306145de565b60008061482e8989898989614380565b905060006148408a8a8a8a89896139be565b905061484c8282614544565b9150600061485a8a84613311565b6001600160a01b038b166000908152602c60205260409020549091506148809082614544565b6001600160a01b038b166000818152602c602090815260409182902093909355805191825291810185905280820183905290517f5d0c0019d3d45fadeb74eff9d2c9924d146d000ac6bcf3c28bf0ac3c9baa011a9181900360600190a150909998505050505050505050565b6001600160a01b03811660008181526021602090815260408083205481516370a0823160e01b8152306004820152915193949093859391926370a08231926024808301939192829003018186803b15801561494657600080fd5b505afa15801561495a573d6000803e3d6000fd5b505050506040513d602081101561497057600080fd5b50516001600160a01b03851660009081526021602052604090208190559050611b0b818361459c565b816149af576149aa811560276145de565b6139a2565b6139a28183101560286145de565b6001600160a01b0382166000908152602660205260409020546149e09082614544565b6001600160a01b038316600090815260266020818152604080842085905560258252909220549152614a1591111560346145de565b604080516001600160a01b03841681526020810183905281517faa5649d82f5462be9d19b0f2b31a59b2259950a6076550bac9f3a1c07db9f66d929181900390910190a15050565b6001600160a01b038216600090815260286020526040902054614a809082614544565b6001600160a01b03831660008181526028602090815260409182902093909355805191825291810183905281517fd9d4761f75e0d0103b5cbeab941eeb443d7a56a35b5baf2a0787c03f03f4e474929181900390910190a15050565b6001600160a01b038216600090815260286020526040902054614aff908261459c565b6001600160a01b03831660008181526028602090815260409182902093909355805191825291810183905281517f34e07158b9db50df5613e591c44ea2ebc82834eff4a4dc3a46e000e608261d68929181900390910190a15050565b6001600160a01b038216600090815260256020526040902054614b7e9082614544565b6001600160a01b03831660008181526025602090815260408083209490945583516370a0823160e01b8152306004820152935191936370a082319260248083019392829003018186803b158015614bd457600080fd5b505afa158015614be8573d6000803e3d6000fd5b505050506040513d6020811015614bfe57600080fd5b50516001600160a01b038416600090815260256020526040902054909150614c2a9082101560316145de565b604080516001600160a01b03851681526020810184905281517f976177fbe09a15e5e43f848844963a42b41ef919ef17ff21a17a5421de8f4737929181900390910190a1505050565b604080518082018252601a81527915985d5b1d0e881c1bdbdb105b5bdd5b9d08195e18d95959195960321b6020808301919091526001600160a01b038516600090815260259091529190912054614ccb918390615920565b6001600160a01b03831660009081526025602090815260408083208490556026909152902054614cfe91101560326145de565b604080516001600160a01b03841681526020810183905281517f112726233fbeaeed0f5b1dba5cb0b2b81883dee49fb35ff99fd98ed9f6d31eb0929181900390910190a15050565b6001600160a01b0382166000908152602d6020526040902054614d699082614544565b6001600160a01b0383166000908152602d6020908152604080832093909355602f90522054801561383e576001600160a01b0383166000908152602d602052604090205481101561383e576040805162461bcd60e51b815260206004820152601a60248201527915985d5b1d0e881b585e081cda1bdc9d1cc8195e18d95959195960321b604482015290519081900360640190fd5b60165462010000900460ff161561454257336000908152601a60205260409020546145429060ff1660366145de565b6001600160a01b038216600090815260236020526040902054818111614ea8576001600160a01b0383166000818152602360209081526040808320929092558151928352820183905280517fe1e812596aac93a06ecc4ca627014d18e30f5c33b825160cc9d5c0ba61e452279281900390910190a1506139a2565b614eb2818361459c565b6001600160a01b03841660008181526023602090815260409182902093909355805191825291810184905281517fe1e812596aac93a06ecc4ca627014d18e30f5c33b825160cc9d5c0ba61e45227929181900390910190a1505050565b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015614f5e57600080fd5b505afa158015614f72573d6000803e3d6000fd5b505050506040513d6020811015614f8857600080fd5b50516001600160a01b0390921660009081526021602052604090209190915550565b600080614fc76127106117be614fc0828761459c565b8790614491565b90506000614fd5858361459c565b6001600160a01b0387166000908152602c6020526040902054909150614ffb9082614544565b6001600160a01b0387166000908152602c60205260409020557f47cd9dda0e50ce30bcaaacd0488452b596221c07ac402a581cfae4d3933cac2b8661504081846117e4565b604080516001600160a01b0390931683526020830191909152818101849052519081900360600190a150949350505050565b6150866001600160a01b038416828461570f565b604080516370a0823160e01b815230600482015290516001600160a01b038516916370a08231916024808301926020929190829003018186803b1580156150cc57600080fd5b505afa1580156150e0573d6000803e3d6000fd5b505050506040513d60208110156150f657600080fd5b50516001600160a01b039093166000908152602160205260409020929092555050565b6001600160a01b03821660009081526023602052604090205461513c9082614544565b6001600160a01b038316600090815260236020908152604080832093909355602490522054801561518e576001600160a01b03831660009081526023602052604090205461518e9082101560336145de565b604080516001600160a01b03851681526020810184905281517f64243679a443432e2293343b77d411ff6144370404618f00ca0d2025d9ca9882929181900390910190a1505050565b600154604080516381d11a2360e01b81526001600160a01b038a8116600483015289811660248301528881166044830152606482018890526084820187905285151560a483015284811660c4830152915160009363010000009004909216916381d11a239160e4808201928692909190829003018186803b15801561525b57600080fd5b505afa15801561526f573d6000803e3d6000fd5b5050505061527d87876141a1565b600061528b898989876119be565b6000818152602b602052604090208054919250906152ac901515601f6145de565b6152be868260000154101560206145de565b6152d0878260010154101560216145de565b6001810154815460048301546000916152ed916117be908b614491565b60048401549091506152ff908261459c565b600484015561530e8b82615761565b506000806153208d8d8d8d8d8d61597a565b8554919350915089146154c4576153388c8c8a61361b565b60038501558354615349908a61459c565b808555600185015461535b9190614999565b6153698d8d8d8b6001613896565b505087156153965761538c8c61214686600101548661459c90919063ffffffff16565b6153968c8a614adc565b6000886153ab576153a68c613f10565b6153b4565b6153b48c612dfa565b90507f93d75d64d1f84fc6f430a64fc578bdd4c1e090e90ea2d51773e626d19de56d30868f8f8f8f8f8f886153e98c8c61459c565b60408051998a526001600160a01b0398891660208b015296881689880152949096166060880152608087019290925260a0860152151560c085015260e084019290925261010083019190915251908190036101200190a18454600186015460028701546003880154600489015460058a0154604080518d81526020810197909752868101959095526060860193909352608085019190915260a084015260c083015260e08201839052517f20853733b590dce729d9f4628682ebd9a34d2354e72679e66f43a008fc03b773918190036101000190a150615638565b87156154de576154d48c84614a5d565b6154de8c8a614adc565b6000886154f3576154ee8c613f10565b6154fc565b6154fc8c612dfa565b90507f93d75d64d1f84fc6f430a64fc578bdd4c1e090e90ea2d51773e626d19de56d30868f8f8f8f8f8f886155318c8c61459c565b60408051998a526001600160a01b0398891660208b015296881689880152949096166060880152608087019290925260a0860152151560c085015260e084019290925261010083019190915251908190036101200190a18454600186015460028701546003880154600489015460058a0154604080518d81526020810197909752868101959095526060860193909352608085019190915260a084015260c0830152517f73af1d417d82c240fdb6d319b34ad884487c6bf2845d98980cc52ad9171cb4559181900360e00190a1506000858152602b602052604081208181556001810182905560028101829055600381018290556004810182905560058101829055600601555b87615647576156478b8a615816565b8115615687578715615661576156618c61216d8e85613311565b600061566d8d83613311565b905061567a8d828a615072565b95506124e6945050505050565b5060009c9b505050505050505050505050565b6001600160a01b0381166000908152602760209081526040808320546025909252909120541015614706576040805162461bcd60e51b815260206004820152601a6024820152792b30bab63a1d103837b7b620b6b7bab73a101e10313ab33332b960311b604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261383e908490615b74565b604080518082018252601b81527a5661756c743a20696e73756666696369656e74207265736572766560281b6020808301919091526001600160a01b0385166000908152602690915291909120546157ba918390615920565b6001600160a01b03831660008181526026602090815260409182902093909355805191825291810183905281517f533cb5ed32be6a90284e96b5747a1bfc2d38fdb5768a6b5f67ff7d62144ed67b929181900390910190a15050565b6001600160a01b0382166000908152602d60205260409020548082111561585657506001600160a01b0382166000908152602d60205260408120556139a2565b615860818361459c565b6001600160a01b0384166000908152602d6020526040902055505050565b6000818361590a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156158cf5781810151838201526020016158b7565b50505050905090810190601f1680156158fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161591657fe5b0495945050505050565b600081848411156159725760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156158cf5781810151838201526020016158b7565b505050900390565b600080600061598b898989876119be565b6000818152602b602052604081208054600382015493945090926159b8918d918d918d918b918d9161481e565b90506000806000806159d98d876000015488600201548d8a6006015461252a565b875491955085935091506159f1906117be8d84614491565b925050506000828015615a045750600082115b15615a345750600584018054820190558088615a34576000615a268e84613311565b9050615a328e82614c73565b505b82158015615a425750600082115b15615a86576001850154615a56908361459c565b600186015588615a7a576000615a6c8e84613311565b9050615a788e82614b5b565b505b60058501805483900390555b8a15615aae57615a96818c614544565b6001860154909150615aa8908c61459c565b60018601555b84548a1415615ad1576001850154615ac7908290614544565b6000600187015590505b8084811115615aeb57615ae4828661459c565b9050615b1f565b6001860154615afa908661459c565b60018701558915615b1f576000615b118f87613311565b9050615b1d8f82614c73565b505b60408051888152851515602082015280820185905290517f3ff41bdde87755b687ae83d0221a232b6be51a803330ed9661c1b5d0105e0d8a9181900360600190a1909e909d509b505050505050505050505050565b6060615bc9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316615c259092919063ffffffff16565b80519091501561383e57808060200190516020811015615be857600080fd5b505161383e5760405162461bcd60e51b815260040180806020018281038252602a815260200180615ebe602a913960400191505060405180910390fd5b6060611b0b848460008585615c3985615d40565b615c8a576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310615cc95780518252601f199092019160209182019101615caa565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114615d2b576040519150601f19603f3d011682016040523d82523d6000602084013e615d30565b606091505b50915091506124e6828286615d46565b3b151590565b60608315615d55575081611dbf565b825115615d655782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156158cf5781810151838201526020016158b7565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615ded5782800160ff19823516178555615e1a565b82800160010185558215615e1a579182015b82811115615e1a578235825591602001919060010190615dff565b50615e26929150615e67565b5090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5b80821115615e265760008155600101615e6856fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a164736f6c634300060c000a",
      "deployedBytecode": "",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "evm": {
        "bytecode": {
          "linkReferences": {},
          "object": "60806040526001805462ff00001961ff00199091166101001716620100001781556207a1206008556032600a9081556014600b55601e600c819055600d556004600e55600f556011805460ff199081169091556170806012556016805463ffffff0019921690921716905534801561007657600080fd5b506001600055600680546001600160a01b03191633179055615ef4806200009e6000396000f3fe608060405234801561001057600080fd5b50600436106105995760003560e01c80638585f4d2116102e9578063c7e074c31161018f578063c7e074c314611225578063cea0c32814611265578063cfad57a21461129b578063d2fa635e146112c1578063d3127e63146112de578063d54d5a9f146112fb578063d66b000d1461135a578063d8f897c314611386578063d9ac4225146113ac578063da76524c146113b4578063daf9c210146113fe578063db3555fb14611424578063db97495f1461144a578063dc8f5fac14611496578063de2ea9481461149e578063df73a267146114e6578063e124e6d2146114ee578063e468baf014611514578063e67f59a714611531578063efa10a6e14611557578063f07456ce14611583578063f07bbf77146115a9578063f2555278146115c8578063f3ae2415146115f6578063f5b91b7b1461161c578063f887ea4014611624578063fa12dbc01461162c578063fbfded6d1461165e578063fce28c101461168c578063fdaf6ac314611694578063fed1a606146116d857610599565b80638585f4d214610e90578063870d917c14610ebc57806388b1fbdf14610ec45780638a27d46814610eea5780638a39735a1461061a5780638a78daa814610f135780638ee573ac14610f395780638f7b840414610f5f5780639060b1ca14610f855780639331621214610f8d57806395082d2514610fc55780639698d25a14610fcd5780639849e41214610ff35780639899cd0214610ffb5780639d7432ca146110275780639f392eb314611059578063a22f239214611061578063a42ab3d214611069578063a5e90eee14611095578063a93acac2146110c3578063ab08c1c6146110e9578063ab2f3ad4146110f1578063ad1e4f8d14611117578063ae3302c21461113d578063b06423f314611145578063b136ca491461114d578063b1cc53ab14611173578063b364accb146111ab578063c3c7b9e9146111d1578063c4f718bf146111f7578063c65bc7b1146111ff57610599565b80634453a3741161044e5780634453a3741461097057806345a6f3701461099e57806348d91abf146109f757806348f35cbb14610a3b5780634a3f088d14610a435780634a993ee914610ac45780634befe2ca14610aea5780634d47b30414610af2578063514ea4bf14610afa57806351723e8214610b4f578063523fba7f14610b8d578063529a356f14610bb357806352f55eed14610bd95780635c07eaab14610bff5780635f7bc11914610c3f5780636092219914610c6557806362287a3214610c935780636274980314610c9b5780636abbe0c814610cc15780636ae0b15414610cc95780636be6026b14610cef57806371089f4d14610cf7578063711e619014610d1d578063724e78da14610d4b578063728cdbca14610d71578063741bef1a14610db95780637a210a2b14610dc15780637c2eb9f714610dc9578063817bb85714610de857806381a612d614610e1657806382a0849014610e3c57610599565b806304fef1db1461059e57806307c58752146105d65780630842b076146105de5780630a48d5a9146105e657806310eb56c214610612578063126082cf1461061a57806312d43a5114610622578063134ca63b14610646578063174d26941461064e578063181e210e146106565780631aa4ace5146106725780631ce9cb8f1461069857806324b0c04d146106be57806324ca984e146106df57806328e67be51461070557806329ff96151461077a5780632c668ec1146107a05780632d4b0576146107cc57806330455ede1461080a578063318bc6891461082957806334c1557d1461061a578063351a964d14610831578063392e53cd146108395780633a05dcc1146108415780633c5a6e35146108675780633de39c11146108b55780633e72a262146108bd57806340eb3802146108c5578063421528731461091657806342b60b031461094a575b600080fd5b6105c4600480360360208110156105b457600080fd5b50356001600160a01b031661176a565b60408051918252519081900360200190f35b6105c46117cd565b6105c46117de565b6105c4600480360360408110156105fc57600080fd5b506001600160a01b0381351690602001356117e4565b6105c4611837565b6105c461183d565b61062a611843565b604080516001600160a01b039092168252519081900360200190f35b6105c4611852565b6105c4611858565b61065e61185e565b604080519115158252519081900360200190f35b6105c46004803603602081101561068857600080fd5b50356001600160a01b031661186e565b6105c4600480360360208110156106ae57600080fd5b50356001600160a01b0316611880565b6106dd600480360360208110156106d457600080fd5b50351515611892565b005b6106dd600480360360208110156106f557600080fd5b50356001600160a01b03166118b6565b6106dd6004803603604081101561071b57600080fd5b81359190810190604081016020820135600160201b81111561073c57600080fd5b82018360208201111561074e57600080fd5b803590602001918460018302840111600160201b8311171561076f57600080fd5b5090925090506118e7565b6105c46004803603602081101561079057600080fd5b50356001600160a01b0316611965565b6105c4600480360360408110156107b657600080fd5b506001600160a01b038135169060200135611979565b6105c4600480360360808110156107e257600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013515156119be565b6106dd6004803603602081101561082057600080fd5b50351515611a14565b6105c4611a36565b61065e611a3c565b61065e611a4a565b6105c46004803603602081101561085757600080fd5b50356001600160a01b0316611a53565b6106dd600480360360e081101561087d57600080fd5b506001600160a01b038135169060208101359060408101359060608101359060808101359060a081013515159060c001351515611b13565b6105c4611c55565b61065e611c5b565b6106dd60048036036101208110156108dc57600080fd5b5080359060208101359060408101359060608101359060808101359060a08101359060c08101359060e08101359061010001351515611c6a565b6105c46004803603606081101561092c57600080fd5b508035906001600160a01b0360208201358116916040013516611d24565b61065e6004803603602081101561096057600080fd5b50356001600160a01b0316611dc6565b6106dd6004803603604081101561098657600080fd5b506001600160a01b0381351690602001351515611ddb565b6109dc600480360360808110156109b457600080fd5b506001600160a01b038135811691602081013582169160408201351690606001351515611e0e565b60408051921515835260208301919091528051918290030190f35b6106dd600480360360a0811015610a0d57600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013590608001351515611eac565b61062a6122eb565b610a8160048036036080811015610a5957600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013515156122fa565b604080519889526020890197909752878701959095526060870193909352608086019190915260a0850152151560c084015260e083015251908190036101000190f35b6105c460048036036020811015610ada57600080fd5b50356001600160a01b03166123f0565b6105c4612402565b6105c4612408565b610b1760048036036020811015610b1057600080fd5b503561240e565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b6105c460048036036080811015610b6557600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135151561244b565b6105c460048036036020811015610ba357600080fd5b50356001600160a01b03166124f1565b61065e60048036036020811015610bc957600080fd5b50356001600160a01b0316612503565b6105c460048036036020811015610bef57600080fd5b50356001600160a01b0316612518565b6109dc600480360360a0811015610c1557600080fd5b506001600160a01b038135169060208101359060408101359060608101351515906080013561252a565b6106dd60048036036020811015610c5557600080fd5b50356001600160a01b0316612622565b61065e60048036036040811015610c7b57600080fd5b506001600160a01b0381358116916020013516612705565b6105c4612725565b6105c460048036036020811015610cb157600080fd5b50356001600160a01b031661272b565b61062a61273d565b6106dd60048036036020811015610cdf57600080fd5b50356001600160a01b0316612753565b6105c4612781565b6106dd60048036036020811015610d0d57600080fd5b50356001600160a01b0316612788565b6105c460048036036040811015610d3357600080fd5b506001600160a01b03813581169160200135166127bc565b6106dd60048036036020811015610d6157600080fd5b50356001600160a01b0316612a50565b6106dd600480360360c0811015610d8757600080fd5b506001600160a01b03813581169160208101358216916040820135169060608101359060808101359060a00135612a7a565b61062a612af1565b6105c4612b00565b6106dd60048036036020811015610ddf57600080fd5b50351515612b06565b6105c460048036036040811015610dfe57600080fd5b506001600160a01b0381358116916020013516612b2a565b6105c460048036036020811015610e2c57600080fd5b50356001600160a01b0316612dfa565b6105c4600480360360e0811015610e5257600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359160808201359160a081013515159160c09091013516612ea5565b6106dd60048036036040811015610ea657600080fd5b506001600160a01b038135169060200135612f23565b6105c4612f47565b6105c460048036036020811015610eda57600080fd5b50356001600160a01b0316612f4c565b6106dd60048036036060811015610f0057600080fd5b5080359060208101359060400135612f5e565b6105c460048036036020811015610f2957600080fd5b50356001600160a01b0316612fa4565b6105c460048036036020811015610f4f57600080fd5b50356001600160a01b0316612fb6565b6106dd60048036036020811015610f7557600080fd5b50356001600160a01b0316612fc8565b61065e612ff2565b6105c460048036036060811015610fa357600080fd5b506001600160a01b038135811691602081013582169160409091013516613001565b6105c46132e9565b6105c460048036036020811015610fe357600080fd5b50356001600160a01b03166132f9565b6105c461330b565b6105c46004803603604081101561101157600080fd5b506001600160a01b038135169060200135613311565b6105c46004803603606081101561103d57600080fd5b506001600160a01b038135169060208101359060400135613333565b61065e6133dc565b6105c46133e5565b6105c46004803603604081101561107f57600080fd5b506001600160a01b0381351690602001356133eb565b6106dd600480360360408110156110ab57600080fd5b506001600160a01b0381351690602001351515613408565b6105c4600480360360208110156110d957600080fd5b50356001600160a01b031661343b565b61065e613539565b6105c46004803603602081101561110757600080fd5b50356001600160a01b0316613542565b6105c46004803603602081101561112d57600080fd5b50356001600160a01b0316613554565b6105c4613566565b61065e61356c565b6105c46004803603602081101561116357600080fd5b50356001600160a01b031661357a565b6105c46004803603606081101561118957600080fd5b506001600160a01b03813581169160208101359091169060400135151561361b565b6109dc600480360360208110156111c157600080fd5b50356001600160a01b03166136b6565b6105c4600480360360208110156111e757600080fd5b50356001600160a01b031661374e565b6105c4613760565b6105c46004803603602081101561121557600080fd5b50356001600160a01b0316613766565b6105c4600480360360a081101561123b57600080fd5b506001600160a01b0381351690602081013590604081013590606081013590608001351515613778565b6106dd6004803603606081101561127b57600080fd5b506001600160a01b03813581169160208101359091169060400135613822565b6106dd600480360360208110156112b157600080fd5b50356001600160a01b0316613843565b6106dd600480360360208110156112d757600080fd5b503561386d565b6106dd600480360360208110156112f457600080fd5b503561387a565b611341600480360360a081101561131157600080fd5b506001600160a01b0381358116916020810135821691604082013516906060810135151590608001351515613896565b6040805192835260208301919091528051918290030190f35b6106dd6004803603604081101561137057600080fd5b506001600160a01b03813516906020013561394d565b6105c46004803603602081101561139c57600080fd5b50356001600160a01b03166139a6565b6105c46139b8565b6105c4600480360360c08110156113ca57600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013515159060808101359060a001356139be565b61065e6004803603602081101561141457600080fd5b50356001600160a01b0316613a72565b61065e6004803603602081101561143a57600080fd5b50356001600160a01b0316613a87565b6105c4600480360360e081101561146057600080fd5b506001600160a01b0381351690602081013590604081013590606081013515159060808101359060a08101359060c00135613a9b565b6105c4613b2c565b6106dd600480360360a08110156114b457600080fd5b506001600160a01b03813581169160208101358216916040820135811691606081013515159160809091013516613b32565b6105c4613f0a565b6105c46004803603602081101561150457600080fd5b50356001600160a01b0316613f10565b61062a6004803603602081101561152a57600080fd5b5035613f88565b6106dd6004803603602081101561154757600080fd5b50356001600160a01b0316613faf565b6106dd6004803603604081101561156d57600080fd5b506001600160a01b038135169060200135614082565b6105c46004803603602081101561159957600080fd5b50356001600160a01b03166140a6565b6106dd600480360360208110156115bf57600080fd5b503515156140b8565b6105c4600480360360408110156115de57600080fd5b506001600160a01b03813581169160200135166140de565b61065e6004803603602081101561160c57600080fd5b50356001600160a01b0316614134565b61062a614149565b61062a614158565b6105c46004803603606081101561164257600080fd5b506001600160a01b038135169060208101359060400135614167565b6106dd6004803603604081101561167457600080fd5b506001600160a01b03813581169160200135166141a1565b6105c461437a565b6105c4600480360360a08110156116aa57600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013515159060800135614380565b6116f5600480360360208110156116ee57600080fd5b50356143f6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561172f578181015183820152602001611717565b50505050905090810190601f16801561175c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6001600160a01b038116600090815260256020526040812054806117925760009150506117c8565b6001600160a01b0383166000908152602660205260409020546117c49082906117be90620f4240614491565b906144ea565b9150505b919050565b6904ee2d6d415b85acef8160201b81565b601b5490565b6000816117f357506000611831565b60006117fe84612dfa565b6001600160a01b0385166000908152601d602052604090205490915061182c600a82900a6117be8685614491565b925050505b92915050565b600b5481565b61271081565b6006546001600160a01b031681565b60145481565b60095481565b6016546301000000900460ff1681565b60236020526000908152604090205481565b602c6020526000908152604090205481565b61189a614529565b60168054911515620100000262ff000019909216919091179055565b3360009081526018602090815260408083206001600160a01b0394909416835292905220805460ff19166001179055565b6002546001600160a01b03163314611946576040805162461bcd60e51b815260206004820152601e60248201527f5661756c743a20696e76616c6964206572726f72436f6e74726f6c6c65720000604482015290519081900360640190fd5b600083815260306020526040902061195f908383615dac565b50505050565b6000611831826119748461357a565b6117e4565b60008061198584613f10565b905060006119a3826117be8668327cb2734119d3b7a9601e1b614491565b60055490915061182c9082906001600160a01b031687611d24565b604080516001600160601b0319606096871b811660208084019190915295871b811660348301529390951b9092166048850152151560f81b605c8401528051603d818503018152605d9093019052815191012090565b611a1c614529565b600180549115156101000261ff0019909216919091179055565b600f5481565b600154610100900460ff1681565b60015460ff1681565b600080600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aa457600080fd5b505afa158015611ab8573d6000803e3d6000fd5b505050506040513d6020811015611ace57600080fd5b5051905080611ae15760009150506117c8565b6001600160a01b038316600090815260226020526040902054601554611b0b906117be8385614491565b949350505050565b611b1b614529565b6001600160a01b0387166000908152601c602052604090205460ff16611b9857600754611b49906001614544565b600755601b80546001810182556000919091527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc10180546001600160a01b0319166001600160a01b0389161790555b6015546001600160a01b038816600090815260226020526040902054611bbf90829061459c565b6001600160a01b0389166000908152601c602090815260408083208054600160ff1991821617909155601d83528184208c9055602283528184208b9055601e83528184208a905560248352818420899055601f83528184208054821689151517905591805290912080549091168415151790559050611c3e8187614544565b601555611c4a88613f10565b505050505050505050565b60175481565b60015462010000900460ff1681565b611c72614529565b611c826101f48a111560036145de565b611c926101f489111560046145de565b611ca26101f488111560056145de565b611cb26101f487111560066145de565b611cc26101f486111560076145de565b611cd26101f485111560086145de565b611ced6904ee2d6d415b85acef8160201b84111560096145de565b600a98909855600b96909655600c94909455600d92909255600e55600f556009556010556011805460ff1916911515919091179055565b60055460009081906001600160a01b03858116911614611d5c576001600160a01b0384166000908152601d6020526040902054611d5f565b60125b6005549091506000906001600160a01b03858116911614611d98576001600160a01b0384166000908152601d6020526040902054611d9b565b60125b9050611dba82600a0a6117be83600a0a8961449190919063ffffffff16565b925050505b9392505050565b601f6020526000908152604090205460ff1681565b611de3614529565b6001600160a01b03919091166000908152601960205260409020805460ff1916911515919091179055565b6000806000611e1f878787876119be565b9050611e29615e2a565b506000818152602b6020908152604091829020825160e081018452815480825260018301549382019390935260028201549381018490526003820154606082015260048201546080820152600582015460a082015260069091015460c082018190529092611e9d928992909190899061252a565b93509350505094509492505050565b60026000541415611ef2576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b6002600055600154611f0e9062010000900460ff16601c6145de565b611f1661468a565b611f1f856146a6565b611f2a848483614709565b60015460408051634eae147d60e11b81526001600160a01b038881166004830152878116602483015286811660448301526064820186905284151560848301529151630100000090930490911691639d5c28fa9160a480820192600092909190829003018186803b158015611f9e57600080fd5b505afa158015611fb2573d6000803e3d6000fd5b50505050611fc084846141a1565b6000611fce868686856119be565b6000818152602b6020526040812091925083611ff257611fed86612dfa565b611ffb565b611ffb86613f10565b825490915061200c57600282018190555b81541580159061201c5750600085115b156120425761203c868360000154846002015487858a8860060154613a9b565b60028301555b600061205b898989888a8860000154896003015461481e565b90506000612068896148ec565b905060006120768a836117e4565b60018601549091506120889082614544565b6001860181905561209d90841115601d6145de565b60018501546120ac908461459c565b60018601556120bc8a8a8961361b565b600386015584546120cd9089614544565b8086554260068701556120e3901515601e6145de565b6120f585600001548660010154614999565b6121038b8b8b8a6001613896565b505060006121118b8a6133eb565b60048701549091506121239082614544565b60048701556121328b826149bd565b87156121775761214b8b6121468b87614544565b614a5d565b6121558b83614adc565b61215f8b84614b5b565b6121728b61216d8d87613311565b614c73565b6121e3565b6001600160a01b038a166000908152602d60205260409020546121b4576001600160a01b038a166000908152602e602052604090208590556121d9565b6121bf8a868b613333565b6001600160a01b038b166000908152602e60205260409020555b6121e38a8a614d46565b604080518881526001600160a01b03808f166020830152808e16828401528c1660608201526080810184905260a081018b905289151560c082015260e08101879052610100810186905290517f2fe68525253654c21998f35787a8d0f361905ef647c854092430ab65f2f15022918190036101200190a1855460018701546002880154600389015460048a015460058b0154604080518e81526020810197909752868101959095526060860193909352608085019190915260a084015260c083015260e08201879052517f20853733b590dce729d9f4628682ebd9a34d2354e72679e66f43a008fc03b773918190036101000190a15050600160005550505050505050505050565b6002546001600160a01b031681565b60008060008060008060008060006123148d8d8d8d6119be565b905061231e615e2a565b602b60008381526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505090506000808260a001511361239e578160a001516000036123a4565b8160a001515b9050816000015182602001518360400151846060015185608001518560008860a0015112158860c001519a509a509a509a509a509a509a509a5050505094995094995094999196509450565b60276020526000908152604090205481565b6101f481565b600c5481565b602b602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b60008061245a868686866119be565b9050612464615e2a565b506000818152602b6020908152604091829020825160e0810184528154815260018201549281018390526002820154938101939093526003810154606084015260048101546080840152600581015460a08401526006015460c08301526124ce90151560256145de565b602081015181516124e691906117be90612710614491565b979650505050505050565b60216020526000908152604090205481565b60196020526000908152604090205460ff1681565b60256020526000908152604090205481565b60008061253b6000861160266145de565b6000846125505761254b88613f10565b612559565b61255988612dfa565b905060008187116125735761256e828861459c565b61257d565b61257d878361459c565b9050600061258f886117be8b85614491565b9050600087156125a257508783116125a7565b508288115b60006125be6010548961454490919063ffffffff16565b42116125e2576001600160a01b038c166000908152601e60205260409020546125e5565b60005b905081801561260857506125f98b82614491565b61260584612710614491565b11155b1561261257600092505b509a909950975050505050505050565b60026000541415612668576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b600260009081556001600160a01b0382168152601c60205260409020546126939060ff16600e6145de565b600061269e826148ec565b90506126ae60008211600f6145de565b6126b88282614b5b565b604080516001600160a01b03841681526020810183905281517fa5a389190ebf6170a133bda5c769b77f4d6715b8aa172ec0ddf8473d0b4944bd929181900390910190a150506001600055565b601860209081526000928352604080842090915290825290205460ff1681565b60075481565b602e6020526000908152604090205481565b600154630100000090046001600160a01b031681565b3360009081526018602090815260408083206001600160a01b0394909416835292905220805460ff19169055565b620f424081565b612790614529565b600180546001600160a01b039092166301000000026301000000600160b81b0319909216919091179055565b600060026000541415612804576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b6002600055612811614dfe565b6001600160a01b0383166000908152601c60205260409020546128389060ff1660136145de565b6016805461ff00191661010017905560055460009061285f906001600160a01b03166148ec565b905061286f6000821160146145de565b61287984856141a1565b60006128858583611979565b90506128956000821160156145de565b61289f8583614e2d565b6128a98582614c73565b60055460408051632770a7eb60e21b81523060048201526024810185905290516001600160a01b0390921691639dc29fac9160448082019260009290919082900301818387803b1580156128fc57600080fd5b505af1158015612910573d6000803e3d6000fd5b505060055461292a92506001600160a01b03169050614f0f565b6001546040805163eb0835bf60e01b81526001600160a01b038881166004830152602482018690529151600093630100000090049092169163eb0835bf91604480820192602092909190829003018186803b15801561298857600080fd5b505afa15801561299c573d6000803e3d6000fd5b505050506040513d60208110156129b257600080fd5b5051905060006129c3878484614faa565b90506129d36000821160166145de565b6129de878288615072565b604080516001600160a01b03808916825289166020820152808201869052606081018390526080810184905290517fd732b7828fa6cee72c285eac756fc66a7477e3dc22e22e7c432f1c265d40b4839181900360a00190a16016805461ff001916905560016000559695505050505050565b612a58614529565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b612a82614529565b60018054612a969160ff90911615906145de565b6001805460ff191681179055600380546001600160a01b03199081166001600160a01b039889161790915560058054821696881696909617909555600480549095169390951692909217909255600991909155601355601455565b6004546001600160a01b031681565b600a5481565b612b0e614529565b60018054911515620100000262ff000019909216919091179055565b600060026000541415612b72576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b6002600055612b7f614dfe565b6001600160a01b0383166000908152601c6020526040902054612ba69060ff1660106145de565b6016805461ff0019166101001790556000612bc0846148ec565b9050612bd06000821160116145de565b612bda84856141a1565b6000612be585612dfa565b90506000612c0368327cb2734119d3b7a9601e1b6117be8585614491565b600554909150612c1f90829088906001600160a01b0316611d24565b9050612c2f6000821160126145de565b6001546040805163256f6ee360e11b81526001600160a01b0389811660048301526024820185905291516000936301000000900490921691634adeddc691604480820192602092909190829003018186803b158015612c8d57600080fd5b505afa158015612ca1573d6000803e3d6000fd5b505050506040513d6020811015612cb757600080fd5b505190506000612cc8888684614faa565b90506000612ce668327cb2734119d3b7a9601e1b6117be8488614491565b600554909150612d029082908b906001600160a01b0316611d24565b9050612d0e8982615119565b612d188983614b5b565b600554604080516340c10f1960e01b81526001600160a01b038b8116600483015260248201859052915191909216916340c10f1991604480830192600092919082900301818387803b158015612d6d57600080fd5b505af1158015612d81573d6000803e3d6000fd5b5050604080516001600160a01b03808d1682528d1660208201528082018a9052606081018590526080810187905290517fab4c77c74cd32c85f35416cf03e7ce9e2d4387f7b7f2c1f4bf53daaecf8ea72d93509081900360a0019150a16016805461ff0019169055600160005598975050505050505050565b60048054601654604080516317e1d38560e11b81526001600160a01b038681169582019590955260006024820181905260ff80851615156044840152610100909404909316151560648201529051919390921691632fc3a70a916084808301926020929190829003018186803b158015612e7357600080fd5b505afa158015612e87573d6000803e3d6000fd5b505050506040513d6020811015612e9d57600080fd5b505192915050565b600060026000541415612eed576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b6002600055612efa61468a565b612f03886146a6565b612f12888888888888886151d7565b600160005598975050505050505050565b612f2b614529565b6001600160a01b03909116600090815260276020526040902055565b601281565b601e6020526000908152604090205481565b612f66614529565b612f76610e10841015600a6145de565b612f86612710831115600b6145de565b612f96612710821115600c6145de565b601292909255601355601455565b602d6020526000908152604090205481565b601d6020526000908152604090205481565b612fd0614529565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60165462010000900460ff1681565b600060026000541415613049576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b600260005560015461306490610100900460ff1660176145de565b6001600160a01b0384166000908152601c602052604090205461308b9060ff1660186145de565b6001600160a01b0383166000908152601c60205260409020546130b29060ff1660196145de565b6130d2836001600160a01b0316856001600160a01b03161415601a6145de565b6016805461ff0019166101001790556130eb84806141a1565b6130f583846141a1565b6000613100856148ec565b905061311060008211601b6145de565b600061311b86612dfa565b9050600061312886613f10565b9050600061313a826117be8686614491565b9050613147818989611d24565b9050600061316568327cb2734119d3b7a9601e1b6117be8787614491565b6005549091506131819082908b906001600160a01b0316611d24565b60015460408051636d099c0b60e11b81526001600160a01b038d811660048301528c8116602483015260448201859052915193945060009363010000009093049091169163da13381691606480820192602092909190829003018186803b1580156131eb57600080fd5b505afa1580156131ff573d6000803e3d6000fd5b505050506040513d602081101561321557600080fd5b5051905060006132268a8584614faa565b90506132328b84615119565b61323c8a84614e2d565b6132468b88614b5b565b6132508a85614c73565b6132598a61569a565b6132648a828b615072565b604080516001600160a01b03808c168252808e1660208301528c1681830152606081018990526080810186905260a0810183905260c0810184905290517f0874b2d545cb271cdbda4e093020c452328b24af12382ed62c4d00f5c26709db9181900360e00190a16016805461ff001916905560016000559a9950505050505050505050565b68327cb2734119d3b7a9601e1b81565b602f6020526000908152604090205481565b60125481565b60008161332057506000611831565b611dbf838361332e86613f10565b614167565b6001600160a01b0383166000908152602d6020908152604080832054602e9092528220548285821161336e57613369868361459c565b613378565b613378828761459c565b9050600061338a836117be8685614491565b9050868311600061339b8689614544565b90506000826133b3576133ae8285614544565b6133bd565b6133bd828561459c565b90506133cd816117be8c85614491565b9b9a5050505050505050505050565b60115460ff1681565b600d5481565b6000816133fa57506000611831565b611dbf838361332e86612dfa565b613410614529565b6001600160a01b03919091166000908152601a60205260409020805460ff1916911515919091179055565b6012546001600160a01b0382166000908152602a60205260408120549091429161346491614544565b1115613472575060006117c8565b6012546001600160a01b0383166000908152602a6020526040812054909161349f916117be90429061459c565b6001600160a01b038416600090815260256020526040902054909150806134cb576000925050506117c8565b6001600160a01b0384166000908152601f602052604081205460ff166134f3576013546134f7565b6014545b6001600160a01b0386166000908152602660205260409020549091506135309083906117be90869061352a908690614491565b90614491565b95945050505050565b60165460ff1681565b60226020526000908152604090205481565b60246020526000908152604090205481565b60085481565b601654610100900460ff1681565b6001600160a01b0381166000908152601f602052604081205460ff16156135ba57506001600160a01b0381166000908152602560205260409020546117c8565b6001600160a01b0382166000908152602860205260408120546135de908490613311565b6001600160a01b0384166000908152602660209081526040808320546025909252909120549192506117c491613615908490614544565b9061459c565b6001546040805163b1cc53ab60e01b81526001600160a01b038681166004830152858116602483015284151560448301529151600093630100000090049092169163b1cc53ab91606480820192602092909190829003018186803b15801561368257600080fd5b505afa158015613696573d6000803e3d6000fd5b505050506040513d60208110156136ac57600080fd5b5051949350505050565b6001600160a01b0381166000908152602d60205260408120548190806136e3576000809250925050613749565b60006136ee85613f10565b6001600160a01b0386166000908152602e60205260408120549192508282116137205761371b838361459c565b61372a565b61372a828461459c565b9050600061373c836117be8785614491565b9390921195509193505050505b915091565b60266020526000908152604090205481565b60135481565b60296020526000908152604090205481565b6001546040805163c7e074c360e01b81526001600160a01b03888116600483015260248201889052604482018790526064820186905284151560848301529151600093630100000090049092169163c7e074c39160a480820192602092909190829003018186803b1580156137ec57600080fd5b505afa158015613800573d6000803e3d6000fd5b505050506040513d602081101561381657600080fd5b50519695505050505050565b61382a614529565b61383e6001600160a01b038316848361570f565b505050565b61384b614529565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b613875614529565b601755565b613882614529565b613891612710821160026145de565b600855565b6001546040805163d54d5a9f60e01b81526001600160a01b03888116600483015287811660248301528681166044830152851515606483015284151560848301528251600094859463010000009091049092169263d54d5a9f9260a4808301939192829003018186803b15801561390c57600080fd5b505afa158015613920573d6000803e3d6000fd5b505050506040513d604081101561393657600080fd5b508051602090910151909890975095505050505050565b613955614529565b6001600160a01b0382166000908152602360205260409020548082111561398f5761398983613984848461459c565b615119565b506139a2565b61383e8361399d838561459c565b614e2d565b5050565b602a6020526000908152604090205481565b60105481565b6001546040805163369d949360e21b81526001600160a01b0389811660048301528881166024830152878116604483015286151560648301526084820186905260a482018590529151600093630100000090049092169163da76524c9160c480820192602092909190829003018186803b158015613a3b57600080fd5b505afa158015613a4f573d6000803e3d6000fd5b505050506040513d6020811015613a6557600080fd5b5051979650505050505050565b601c6020526000908152604090205460ff1681565b602080526000908152604090205460ff1681565b6000806000613aad8a8a8a8a8861252a565b90925090506000613abe8a87614544565b905060008815613aed5783613adc57613ad7828461459c565b613ae6565b613ae68284614544565b9050613b0e565b83613b0157613afc8284614544565b613b0b565b613b0b828461459c565b90505b613b1c816117be8a85614491565b9c9b505050505050505050505050565b60155481565b60026000541415613b78576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b60026000556016546301000000900460ff1615613bad5733600090815260196020526040902054613bad9060ff1660226145de565b6016805460ff19169055613bc184846141a1565b6000613bcf868686866119be565b9050613bd9615e2a565b506000818152602b6020908152604091829020825160e08101845281548082526001830154938201939093526002820154938101939093526003810154606084015260048101546080840152600581015460a08401526006015460c0830152613c4590151560236145de565b600080613c56898989896000613896565b91509150613c69826000141560246145de565b8160021415613c9e57613c86898989600087600001518b8f6151d7565b50506016805460ff1916600117905550613efe915050565b6000613caa8983613311565b6001600160a01b038a166000908152602c6020526040902054909150613cd09082614544565b6001600160a01b038a166000818152602c602090815260409182902093909355805191825291810184905280820183905290517f5d0c0019d3d45fadeb74eff9d2c9924d146d000ac6bcf3c28bf0ac3c9baa011a9181900360600190a1613d3b898560800151615761565b8615613d6a5760208401518451613d5c918b91613d579161459c565b614adc565b613d6a8961216d8b85613311565b600087613d7f57613d7a89613f10565b613d88565b613d8889612dfa565b90507f2e1f85a64a2f22cf2f0c42584e7c919ed4abe8d53675cff0f62bf1e95a1c676f868c8c8c8c8a600001518b602001518c608001518d60a001518a604051808b81526020018a6001600160a01b03168152602001896001600160a01b03168152602001886001600160a01b0316815260200187151581526020018681526020018581526020018481526020018381526020018281526020019a505050505050505050505060405180910390a187158015613e475750846020015183105b15613e75576020850151600090613e5e908561459c565b9050613e738b613e6e8d84613311565b614b5b565b505b87613e8857613e88898660000151615816565b6000868152602b60205260408120818155600181018290556002810182905560038101829055600481018290556005810182905560060155600954613ed4908b9061216d908290613311565b613eea8a613ee48c600954613311565b89615072565b50506016805460ff19166001179055505050505b50506001600055505050565b600e5481565b60048054601654604080516317e1d38560e11b81526001600160a01b03868116958201959095526001602482015260ff80841615156044830152610100909304909216151560648301525160009390921691632fc3a70a91608480820192602092909190829003018186803b158015612e7357600080fd5b601b8181548110613f9557fe5b6000918252602090912001546001600160a01b0316905081565b613fb7614529565b6001600160a01b0381166000908152601c6020526040902054613fde9060ff16600d6145de565b6001600160a01b0381166000908152602260205260409020546015546140039161459c565b6015556001600160a01b0381166000908152601c60209081526040808320805460ff19908116909155601d835281842084905560228352818420849055601e835281842084905560248352818420849055601f83528184208054821690559180529091208054909116905560075461407c90600161459c565b60075550565b61408a614529565b6001600160a01b039091166000908152602f6020526040902055565b60286020526000908152604090205481565b6140c0614529565b6016805491151563010000000263ff00000019909216919091179055565b60006140e8614529565b6001600160a01b0383166000908152602c602052604090205480614110576000915050611831565b6001600160a01b0384166000908152602c6020526040812055611dbf848285615072565b601a6020526000908152604090205460ff1681565b6005546001600160a01b031681565b6003546001600160a01b031681565b60008261417657506000611dbf565b6001600160a01b0384166000908152601d6020526040902054613530836117be86600a85900a614491565b6001546040805163fbfded6d60e01b81526001600160a01b03858116600483015284811660248301529151600093630100000090049092169163fbfded6d9160448082019260209290919082900301818787803b15801561420157600080fd5b505af1158015614215573d6000803e3d6000fd5b505050506040513d602081101561422b57600080fd5b505190508061423a57506139a2565b6001600160a01b0383166000908152602a6020526040902054614287576012546142689061352a42826144ea565b6001600160a01b0384166000908152602a6020526040902055506139a2565b6012546001600160a01b0384166000908152602a602052604090205442916142af9190614544565b11156142bb57506139a2565b60006142c68461343b565b6001600160a01b0385166000908152602960205260409020549091506142ec9082614544565b6001600160a01b0385166000908152602960205260409020556012546143169061352a42826144ea565b6001600160a01b0385166000818152602a602090815260408083209490945560298152908390205483519283529082015281517fa146fc154e1913322e9817d49f0d5c37466c24326e15de10e739a948be815eab929181900390910190a150505050565b610e1081565b6001546040805163fdaf6ac360e01b81526001600160a01b038881166004830152878116602483015286811660448301528515156064830152608482018590529151600093630100000090049092169163fdaf6ac39160a480820192602092909190829003018186803b1580156137ec57600080fd5b60306020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156144895780601f1061445e57610100808354040283529160200191614489565b820191906000526020600020905b81548152906001019060200180831161446c57829003601f168201915b505050505081565b6000826144a057506000611831565b828202828482816144ad57fe5b0414611dbf5760405162461bcd60e51b8152600401808060200182810382526021815260200180615e9d6021913960400191505060405180910390fd5b6000611dbf83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b81525061587e565b600654614542906001600160a01b0316331460356145de565b565b600082820183811015611dbf576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b6000611dbf83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615920565b60008181526030602052604090208261383e5760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561467b5780601f106146505761010080835404028352916020019161467b565b820191906000526020600020905b81548152906001019060200180831161465e57829003601f168201915b50509250505060405180910390fd5b60175461469657614542565b6145426017543a111560376145de565b336001600160a01b03821614156146bc57614706565b6003546001600160a01b03163314156146d457614706565b6001600160a01b03811660009081526018602090815260408083203384529091529020546147069060ff1660296145de565b50565b80156147825761472e826001600160a01b0316846001600160a01b031614602a6145de565b6001600160a01b0383166000908152601c60205260409020546147559060ff16602b6145de565b6001600160a01b0383166000908152601f602052604090205461477d9060ff1615602c6145de565b61383e565b6001600160a01b0383166000908152601c60205260409020546147a99060ff16602d6145de565b6001600160a01b0383166000908152601f60205260409020546147d09060ff16602e6145de565b6001600160a01b0382166000908152601f60205260409020546147f89060ff1615602f6145de565b6001600160a01b038216600090815260208052604090205461383e9060ff1660306145de565b60008061482e8989898989614380565b905060006148408a8a8a8a89896139be565b905061484c8282614544565b9150600061485a8a84613311565b6001600160a01b038b166000908152602c60205260409020549091506148809082614544565b6001600160a01b038b166000818152602c602090815260409182902093909355805191825291810185905280820183905290517f5d0c0019d3d45fadeb74eff9d2c9924d146d000ac6bcf3c28bf0ac3c9baa011a9181900360600190a150909998505050505050505050565b6001600160a01b03811660008181526021602090815260408083205481516370a0823160e01b8152306004820152915193949093859391926370a08231926024808301939192829003018186803b15801561494657600080fd5b505afa15801561495a573d6000803e3d6000fd5b505050506040513d602081101561497057600080fd5b50516001600160a01b03851660009081526021602052604090208190559050611b0b818361459c565b816149af576149aa811560276145de565b6139a2565b6139a28183101560286145de565b6001600160a01b0382166000908152602660205260409020546149e09082614544565b6001600160a01b038316600090815260266020818152604080842085905560258252909220549152614a1591111560346145de565b604080516001600160a01b03841681526020810183905281517faa5649d82f5462be9d19b0f2b31a59b2259950a6076550bac9f3a1c07db9f66d929181900390910190a15050565b6001600160a01b038216600090815260286020526040902054614a809082614544565b6001600160a01b03831660008181526028602090815260409182902093909355805191825291810183905281517fd9d4761f75e0d0103b5cbeab941eeb443d7a56a35b5baf2a0787c03f03f4e474929181900390910190a15050565b6001600160a01b038216600090815260286020526040902054614aff908261459c565b6001600160a01b03831660008181526028602090815260409182902093909355805191825291810183905281517f34e07158b9db50df5613e591c44ea2ebc82834eff4a4dc3a46e000e608261d68929181900390910190a15050565b6001600160a01b038216600090815260256020526040902054614b7e9082614544565b6001600160a01b03831660008181526025602090815260408083209490945583516370a0823160e01b8152306004820152935191936370a082319260248083019392829003018186803b158015614bd457600080fd5b505afa158015614be8573d6000803e3d6000fd5b505050506040513d6020811015614bfe57600080fd5b50516001600160a01b038416600090815260256020526040902054909150614c2a9082101560316145de565b604080516001600160a01b03851681526020810184905281517f976177fbe09a15e5e43f848844963a42b41ef919ef17ff21a17a5421de8f4737929181900390910190a1505050565b604080518082018252601a81527915985d5b1d0e881c1bdbdb105b5bdd5b9d08195e18d95959195960321b6020808301919091526001600160a01b038516600090815260259091529190912054614ccb918390615920565b6001600160a01b03831660009081526025602090815260408083208490556026909152902054614cfe91101560326145de565b604080516001600160a01b03841681526020810183905281517f112726233fbeaeed0f5b1dba5cb0b2b81883dee49fb35ff99fd98ed9f6d31eb0929181900390910190a15050565b6001600160a01b0382166000908152602d6020526040902054614d699082614544565b6001600160a01b0383166000908152602d6020908152604080832093909355602f90522054801561383e576001600160a01b0383166000908152602d602052604090205481101561383e576040805162461bcd60e51b815260206004820152601a60248201527915985d5b1d0e881b585e081cda1bdc9d1cc8195e18d95959195960321b604482015290519081900360640190fd5b60165462010000900460ff161561454257336000908152601a60205260409020546145429060ff1660366145de565b6001600160a01b038216600090815260236020526040902054818111614ea8576001600160a01b0383166000818152602360209081526040808320929092558151928352820183905280517fe1e812596aac93a06ecc4ca627014d18e30f5c33b825160cc9d5c0ba61e452279281900390910190a1506139a2565b614eb2818361459c565b6001600160a01b03841660008181526023602090815260409182902093909355805191825291810184905281517fe1e812596aac93a06ecc4ca627014d18e30f5c33b825160cc9d5c0ba61e45227929181900390910190a1505050565b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015614f5e57600080fd5b505afa158015614f72573d6000803e3d6000fd5b505050506040513d6020811015614f8857600080fd5b50516001600160a01b0390921660009081526021602052604090209190915550565b600080614fc76127106117be614fc0828761459c565b8790614491565b90506000614fd5858361459c565b6001600160a01b0387166000908152602c6020526040902054909150614ffb9082614544565b6001600160a01b0387166000908152602c60205260409020557f47cd9dda0e50ce30bcaaacd0488452b596221c07ac402a581cfae4d3933cac2b8661504081846117e4565b604080516001600160a01b0390931683526020830191909152818101849052519081900360600190a150949350505050565b6150866001600160a01b038416828461570f565b604080516370a0823160e01b815230600482015290516001600160a01b038516916370a08231916024808301926020929190829003018186803b1580156150cc57600080fd5b505afa1580156150e0573d6000803e3d6000fd5b505050506040513d60208110156150f657600080fd5b50516001600160a01b039093166000908152602160205260409020929092555050565b6001600160a01b03821660009081526023602052604090205461513c9082614544565b6001600160a01b038316600090815260236020908152604080832093909355602490522054801561518e576001600160a01b03831660009081526023602052604090205461518e9082101560336145de565b604080516001600160a01b03851681526020810184905281517f64243679a443432e2293343b77d411ff6144370404618f00ca0d2025d9ca9882929181900390910190a1505050565b600154604080516381d11a2360e01b81526001600160a01b038a8116600483015289811660248301528881166044830152606482018890526084820187905285151560a483015284811660c4830152915160009363010000009004909216916381d11a239160e4808201928692909190829003018186803b15801561525b57600080fd5b505afa15801561526f573d6000803e3d6000fd5b5050505061527d87876141a1565b600061528b898989876119be565b6000818152602b602052604090208054919250906152ac901515601f6145de565b6152be868260000154101560206145de565b6152d0878260010154101560216145de565b6001810154815460048301546000916152ed916117be908b614491565b60048401549091506152ff908261459c565b600484015561530e8b82615761565b506000806153208d8d8d8d8d8d61597a565b8554919350915089146154c4576153388c8c8a61361b565b60038501558354615349908a61459c565b808555600185015461535b9190614999565b6153698d8d8d8b6001613896565b505087156153965761538c8c61214686600101548661459c90919063ffffffff16565b6153968c8a614adc565b6000886153ab576153a68c613f10565b6153b4565b6153b48c612dfa565b90507f93d75d64d1f84fc6f430a64fc578bdd4c1e090e90ea2d51773e626d19de56d30868f8f8f8f8f8f886153e98c8c61459c565b60408051998a526001600160a01b0398891660208b015296881689880152949096166060880152608087019290925260a0860152151560c085015260e084019290925261010083019190915251908190036101200190a18454600186015460028701546003880154600489015460058a0154604080518d81526020810197909752868101959095526060860193909352608085019190915260a084015260c083015260e08201839052517f20853733b590dce729d9f4628682ebd9a34d2354e72679e66f43a008fc03b773918190036101000190a150615638565b87156154de576154d48c84614a5d565b6154de8c8a614adc565b6000886154f3576154ee8c613f10565b6154fc565b6154fc8c612dfa565b90507f93d75d64d1f84fc6f430a64fc578bdd4c1e090e90ea2d51773e626d19de56d30868f8f8f8f8f8f886155318c8c61459c565b60408051998a526001600160a01b0398891660208b015296881689880152949096166060880152608087019290925260a0860152151560c085015260e084019290925261010083019190915251908190036101200190a18454600186015460028701546003880154600489015460058a0154604080518d81526020810197909752868101959095526060860193909352608085019190915260a084015260c0830152517f73af1d417d82c240fdb6d319b34ad884487c6bf2845d98980cc52ad9171cb4559181900360e00190a1506000858152602b602052604081208181556001810182905560028101829055600381018290556004810182905560058101829055600601555b87615647576156478b8a615816565b8115615687578715615661576156618c61216d8e85613311565b600061566d8d83613311565b905061567a8d828a615072565b95506124e6945050505050565b5060009c9b505050505050505050505050565b6001600160a01b0381166000908152602760209081526040808320546025909252909120541015614706576040805162461bcd60e51b815260206004820152601a6024820152792b30bab63a1d103837b7b620b6b7bab73a101e10313ab33332b960311b604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261383e908490615b74565b604080518082018252601b81527a5661756c743a20696e73756666696369656e74207265736572766560281b6020808301919091526001600160a01b0385166000908152602690915291909120546157ba918390615920565b6001600160a01b03831660008181526026602090815260409182902093909355805191825291810183905281517f533cb5ed32be6a90284e96b5747a1bfc2d38fdb5768a6b5f67ff7d62144ed67b929181900390910190a15050565b6001600160a01b0382166000908152602d60205260409020548082111561585657506001600160a01b0382166000908152602d60205260408120556139a2565b615860818361459c565b6001600160a01b0384166000908152602d6020526040902055505050565b6000818361590a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156158cf5781810151838201526020016158b7565b50505050905090810190601f1680156158fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161591657fe5b0495945050505050565b600081848411156159725760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156158cf5781810151838201526020016158b7565b505050900390565b600080600061598b898989876119be565b6000818152602b602052604081208054600382015493945090926159b8918d918d918d918b918d9161481e565b90506000806000806159d98d876000015488600201548d8a6006015461252a565b875491955085935091506159f1906117be8d84614491565b925050506000828015615a045750600082115b15615a345750600584018054820190558088615a34576000615a268e84613311565b9050615a328e82614c73565b505b82158015615a425750600082115b15615a86576001850154615a56908361459c565b600186015588615a7a576000615a6c8e84613311565b9050615a788e82614b5b565b505b60058501805483900390555b8a15615aae57615a96818c614544565b6001860154909150615aa8908c61459c565b60018601555b84548a1415615ad1576001850154615ac7908290614544565b6000600187015590505b8084811115615aeb57615ae4828661459c565b9050615b1f565b6001860154615afa908661459c565b60018701558915615b1f576000615b118f87613311565b9050615b1d8f82614c73565b505b60408051888152851515602082015280820185905290517f3ff41bdde87755b687ae83d0221a232b6be51a803330ed9661c1b5d0105e0d8a9181900360600190a1909e909d509b505050505050505050505050565b6060615bc9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316615c259092919063ffffffff16565b80519091501561383e57808060200190516020811015615be857600080fd5b505161383e5760405162461bcd60e51b815260040180806020018281038252602a815260200180615ebe602a913960400191505060405180910390fd5b6060611b0b848460008585615c3985615d40565b615c8a576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310615cc95780518252601f199092019160209182019101615caa565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114615d2b576040519150601f19603f3d011682016040523d82523d6000602084013e615d30565b606091505b50915091506124e6828286615d46565b3b151590565b60608315615d55575081611dbf565b825115615d655782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156158cf5781810151838201526020016158b7565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615ded5782800160ff19823516178555615e1a565b82800160010185558215615e1a579182015b82811115615e1a578235825591602001919060010190615dff565b50615e26929150615e67565b5090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5b80821115615e265760008155600101615e6856fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a164736f6c634300060c000a",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x1 DUP1 SLOAD PUSH3 0xFF0000 NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH3 0x10000 OR DUP2 SSTORE PUSH3 0x7A120 PUSH1 0x8 SSTORE PUSH1 0x32 PUSH1 0xA SWAP1 DUP2 SSTORE PUSH1 0x14 PUSH1 0xB SSTORE PUSH1 0x1E PUSH1 0xC DUP2 SWAP1 SSTORE PUSH1 0xD SSTORE PUSH1 0x4 PUSH1 0xE SSTORE PUSH1 0xF SSTORE PUSH1 0x11 DUP1 SLOAD PUSH1 0xFF NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH2 0x7080 PUSH1 0x12 SSTORE PUSH1 0x16 DUP1 SLOAD PUSH4 0xFFFFFF00 NOT SWAP3 AND SWAP1 SWAP3 OR AND SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x0 SSTORE PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x5EF4 DUP1 PUSH3 0x9E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x599 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8585F4D2 GT PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xC7E074C3 GT PUSH2 0x18F JUMPI DUP1 PUSH4 0xC7E074C3 EQ PUSH2 0x1225 JUMPI DUP1 PUSH4 0xCEA0C328 EQ PUSH2 0x1265 JUMPI DUP1 PUSH4 0xCFAD57A2 EQ PUSH2 0x129B JUMPI DUP1 PUSH4 0xD2FA635E EQ PUSH2 0x12C1 JUMPI DUP1 PUSH4 0xD3127E63 EQ PUSH2 0x12DE JUMPI DUP1 PUSH4 0xD54D5A9F EQ PUSH2 0x12FB JUMPI DUP1 PUSH4 0xD66B000D EQ PUSH2 0x135A JUMPI DUP1 PUSH4 0xD8F897C3 EQ PUSH2 0x1386 JUMPI DUP1 PUSH4 0xD9AC4225 EQ PUSH2 0x13AC JUMPI DUP1 PUSH4 0xDA76524C EQ PUSH2 0x13B4 JUMPI DUP1 PUSH4 0xDAF9C210 EQ PUSH2 0x13FE JUMPI DUP1 PUSH4 0xDB3555FB EQ PUSH2 0x1424 JUMPI DUP1 PUSH4 0xDB97495F EQ PUSH2 0x144A JUMPI DUP1 PUSH4 0xDC8F5FAC EQ PUSH2 0x1496 JUMPI DUP1 PUSH4 0xDE2EA948 EQ PUSH2 0x149E JUMPI DUP1 PUSH4 0xDF73A267 EQ PUSH2 0x14E6 JUMPI DUP1 PUSH4 0xE124E6D2 EQ PUSH2 0x14EE JUMPI DUP1 PUSH4 0xE468BAF0 EQ PUSH2 0x1514 JUMPI DUP1 PUSH4 0xE67F59A7 EQ PUSH2 0x1531 JUMPI DUP1 PUSH4 0xEFA10A6E EQ PUSH2 0x1557 JUMPI DUP1 PUSH4 0xF07456CE EQ PUSH2 0x1583 JUMPI DUP1 PUSH4 0xF07BBF77 EQ PUSH2 0x15A9 JUMPI DUP1 PUSH4 0xF2555278 EQ PUSH2 0x15C8 JUMPI DUP1 PUSH4 0xF3AE2415 EQ PUSH2 0x15F6 JUMPI DUP1 PUSH4 0xF5B91B7B EQ PUSH2 0x161C JUMPI DUP1 PUSH4 0xF887EA40 EQ PUSH2 0x1624 JUMPI DUP1 PUSH4 0xFA12DBC0 EQ PUSH2 0x162C JUMPI DUP1 PUSH4 0xFBFDED6D EQ PUSH2 0x165E JUMPI DUP1 PUSH4 0xFCE28C10 EQ PUSH2 0x168C JUMPI DUP1 PUSH4 0xFDAF6AC3 EQ PUSH2 0x1694 JUMPI DUP1 PUSH4 0xFED1A606 EQ PUSH2 0x16D8 JUMPI PUSH2 0x599 JUMP JUMPDEST DUP1 PUSH4 0x8585F4D2 EQ PUSH2 0xE90 JUMPI DUP1 PUSH4 0x870D917C EQ PUSH2 0xEBC JUMPI DUP1 PUSH4 0x88B1FBDF EQ PUSH2 0xEC4 JUMPI DUP1 PUSH4 0x8A27D468 EQ PUSH2 0xEEA JUMPI DUP1 PUSH4 0x8A39735A EQ PUSH2 0x61A JUMPI DUP1 PUSH4 0x8A78DAA8 EQ PUSH2 0xF13 JUMPI DUP1 PUSH4 0x8EE573AC EQ PUSH2 0xF39 JUMPI DUP1 PUSH4 0x8F7B8404 EQ PUSH2 0xF5F JUMPI DUP1 PUSH4 0x9060B1CA EQ PUSH2 0xF85 JUMPI DUP1 PUSH4 0x93316212 EQ PUSH2 0xF8D JUMPI DUP1 PUSH4 0x95082D25 EQ PUSH2 0xFC5 JUMPI DUP1 PUSH4 0x9698D25A EQ PUSH2 0xFCD JUMPI DUP1 PUSH4 0x9849E412 EQ PUSH2 0xFF3 JUMPI DUP1 PUSH4 0x9899CD02 EQ PUSH2 0xFFB JUMPI DUP1 PUSH4 0x9D7432CA EQ PUSH2 0x1027 JUMPI DUP1 PUSH4 0x9F392EB3 EQ PUSH2 0x1059 JUMPI DUP1 PUSH4 0xA22F2392 EQ PUSH2 0x1061 JUMPI DUP1 PUSH4 0xA42AB3D2 EQ PUSH2 0x1069 JUMPI DUP1 PUSH4 0xA5E90EEE EQ PUSH2 0x1095 JUMPI DUP1 PUSH4 0xA93ACAC2 EQ PUSH2 0x10C3 JUMPI DUP1 PUSH4 0xAB08C1C6 EQ PUSH2 0x10E9 JUMPI DUP1 PUSH4 0xAB2F3AD4 EQ PUSH2 0x10F1 JUMPI DUP1 PUSH4 0xAD1E4F8D EQ PUSH2 0x1117 JUMPI DUP1 PUSH4 0xAE3302C2 EQ PUSH2 0x113D JUMPI DUP1 PUSH4 0xB06423F3 EQ PUSH2 0x1145 JUMPI DUP1 PUSH4 0xB136CA49 EQ PUSH2 0x114D JUMPI DUP1 PUSH4 0xB1CC53AB EQ PUSH2 0x1173 JUMPI DUP1 PUSH4 0xB364ACCB EQ PUSH2 0x11AB JUMPI DUP1 PUSH4 0xC3C7B9E9 EQ PUSH2 0x11D1 JUMPI DUP1 PUSH4 0xC4F718BF EQ PUSH2 0x11F7 JUMPI DUP1 PUSH4 0xC65BC7B1 EQ PUSH2 0x11FF JUMPI PUSH2 0x599 JUMP JUMPDEST DUP1 PUSH4 0x4453A374 GT PUSH2 0x44E JUMPI DUP1 PUSH4 0x4453A374 EQ PUSH2 0x970 JUMPI DUP1 PUSH4 0x45A6F370 EQ PUSH2 0x99E JUMPI DUP1 PUSH4 0x48D91ABF EQ PUSH2 0x9F7 JUMPI DUP1 PUSH4 0x48F35CBB EQ PUSH2 0xA3B JUMPI DUP1 PUSH4 0x4A3F088D EQ PUSH2 0xA43 JUMPI DUP1 PUSH4 0x4A993EE9 EQ PUSH2 0xAC4 JUMPI DUP1 PUSH4 0x4BEFE2CA EQ PUSH2 0xAEA JUMPI DUP1 PUSH4 0x4D47B304 EQ PUSH2 0xAF2 JUMPI DUP1 PUSH4 0x514EA4BF EQ PUSH2 0xAFA JUMPI DUP1 PUSH4 0x51723E82 EQ PUSH2 0xB4F JUMPI DUP1 PUSH4 0x523FBA7F EQ PUSH2 0xB8D JUMPI DUP1 PUSH4 0x529A356F EQ PUSH2 0xBB3 JUMPI DUP1 PUSH4 0x52F55EED EQ PUSH2 0xBD9 JUMPI DUP1 PUSH4 0x5C07EAAB EQ PUSH2 0xBFF JUMPI DUP1 PUSH4 0x5F7BC119 EQ PUSH2 0xC3F JUMPI DUP1 PUSH4 0x60922199 EQ PUSH2 0xC65 JUMPI DUP1 PUSH4 0x62287A32 EQ PUSH2 0xC93 JUMPI DUP1 PUSH4 0x62749803 EQ PUSH2 0xC9B JUMPI DUP1 PUSH4 0x6ABBE0C8 EQ PUSH2 0xCC1 JUMPI DUP1 PUSH4 0x6AE0B154 EQ PUSH2 0xCC9 JUMPI DUP1 PUSH4 0x6BE6026B EQ PUSH2 0xCEF JUMPI DUP1 PUSH4 0x71089F4D EQ PUSH2 0xCF7 JUMPI DUP1 PUSH4 0x711E6190 EQ PUSH2 0xD1D JUMPI DUP1 PUSH4 0x724E78DA EQ PUSH2 0xD4B JUMPI DUP1 PUSH4 0x728CDBCA EQ PUSH2 0xD71 JUMPI DUP1 PUSH4 0x741BEF1A EQ PUSH2 0xDB9 JUMPI DUP1 PUSH4 0x7A210A2B EQ PUSH2 0xDC1 JUMPI DUP1 PUSH4 0x7C2EB9F7 EQ PUSH2 0xDC9 JUMPI DUP1 PUSH4 0x817BB857 EQ PUSH2 0xDE8 JUMPI DUP1 PUSH4 0x81A612D6 EQ PUSH2 0xE16 JUMPI DUP1 PUSH4 0x82A08490 EQ PUSH2 0xE3C JUMPI PUSH2 0x599 JUMP JUMPDEST DUP1 PUSH4 0x4FEF1DB EQ PUSH2 0x59E JUMPI DUP1 PUSH4 0x7C58752 EQ PUSH2 0x5D6 JUMPI DUP1 PUSH4 0x842B076 EQ PUSH2 0x5DE JUMPI DUP1 PUSH4 0xA48D5A9 EQ PUSH2 0x5E6 JUMPI DUP1 PUSH4 0x10EB56C2 EQ PUSH2 0x612 JUMPI DUP1 PUSH4 0x126082CF EQ PUSH2 0x61A JUMPI DUP1 PUSH4 0x12D43A51 EQ PUSH2 0x622 JUMPI DUP1 PUSH4 0x134CA63B EQ PUSH2 0x646 JUMPI DUP1 PUSH4 0x174D2694 EQ PUSH2 0x64E JUMPI DUP1 PUSH4 0x181E210E EQ PUSH2 0x656 JUMPI DUP1 PUSH4 0x1AA4ACE5 EQ PUSH2 0x672 JUMPI DUP1 PUSH4 0x1CE9CB8F EQ PUSH2 0x698 JUMPI DUP1 PUSH4 0x24B0C04D EQ PUSH2 0x6BE JUMPI DUP1 PUSH4 0x24CA984E EQ PUSH2 0x6DF JUMPI DUP1 PUSH4 0x28E67BE5 EQ PUSH2 0x705 JUMPI DUP1 PUSH4 0x29FF9615 EQ PUSH2 0x77A JUMPI DUP1 PUSH4 0x2C668EC1 EQ PUSH2 0x7A0 JUMPI DUP1 PUSH4 0x2D4B0576 EQ PUSH2 0x7CC JUMPI DUP1 PUSH4 0x30455EDE EQ PUSH2 0x80A JUMPI DUP1 PUSH4 0x318BC689 EQ PUSH2 0x829 JUMPI DUP1 PUSH4 0x34C1557D EQ PUSH2 0x61A JUMPI DUP1 PUSH4 0x351A964D EQ PUSH2 0x831 JUMPI DUP1 PUSH4 0x392E53CD EQ PUSH2 0x839 JUMPI DUP1 PUSH4 0x3A05DCC1 EQ PUSH2 0x841 JUMPI DUP1 PUSH4 0x3C5A6E35 EQ PUSH2 0x867 JUMPI DUP1 PUSH4 0x3DE39C11 EQ PUSH2 0x8B5 JUMPI DUP1 PUSH4 0x3E72A262 EQ PUSH2 0x8BD JUMPI DUP1 PUSH4 0x40EB3802 EQ PUSH2 0x8C5 JUMPI DUP1 PUSH4 0x42152873 EQ PUSH2 0x916 JUMPI DUP1 PUSH4 0x42B60B03 EQ PUSH2 0x94A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x176A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x5C4 PUSH2 0x17CD JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x17DE JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x17E4 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x1837 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x183D JUMP JUMPDEST PUSH2 0x62A PUSH2 0x1843 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x5C4 PUSH2 0x1852 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x1858 JUMP JUMPDEST PUSH2 0x65E PUSH2 0x185E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x688 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x186E JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1880 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x1892 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x18B6 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x71B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0x73C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x74E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x76F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x18E7 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x790 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1965 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x7B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x1979 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x7E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x19BE JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x820 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x1A14 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x1A36 JUMP JUMPDEST PUSH2 0x65E PUSH2 0x1A3C JUMP JUMPDEST PUSH2 0x65E PUSH2 0x1A4A JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x857 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1A53 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x87D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xA0 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0xC0 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x1B13 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x1C55 JUMP JUMPDEST PUSH2 0x65E PUSH2 0x1C5B JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x120 DUP2 LT ISZERO PUSH2 0x8DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xA0 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xC0 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xE0 DUP2 ADD CALLDATALOAD SWAP1 PUSH2 0x100 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x1C6A JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x92C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x40 ADD CALLDATALOAD AND PUSH2 0x1D24 JUMP JUMPDEST PUSH2 0x65E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x960 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1DC6 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x986 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x1DDB JUMP JUMPDEST PUSH2 0x9DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x9B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x1E0E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xA0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x80 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x62A PUSH2 0x22EB JUMP JUMPDEST PUSH2 0xA81 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0xA59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x22FA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP9 DUP10 MSTORE PUSH1 0x20 DUP10 ADD SWAP8 SWAP1 SWAP8 MSTORE DUP8 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x60 DUP8 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP6 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xE0 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH2 0x100 ADD SWAP1 RETURN JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xADA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x23F0 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x2402 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x2408 JUMP JUMPDEST PUSH2 0xB17 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x240E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP8 DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP7 SWAP1 SWAP7 MSTORE DUP7 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x60 DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xE0 ADD SWAP1 RETURN JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0xB65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x244B JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x24F1 JUMP JUMPDEST PUSH2 0x65E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2503 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2518 JUMP JUMPDEST PUSH2 0x9DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xC15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x80 ADD CALLDATALOAD PUSH2 0x252A JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xC55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2622 JUMP JUMPDEST PUSH2 0x65E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xC7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x2705 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x2725 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xCB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x272B JUMP JUMPDEST PUSH2 0x62A PUSH2 0x273D JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xCDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2753 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x2781 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2788 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xD33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x27BC JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2A50 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0xD87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xA0 ADD CALLDATALOAD PUSH2 0x2A7A JUMP JUMPDEST PUSH2 0x62A PUSH2 0x2AF1 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x2B00 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xDDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x2B06 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xDFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x2B2A JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xE2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2DFA JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0xE52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x80 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xA0 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP2 PUSH1 0xC0 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0x2EA5 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xEA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x2F23 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x2F47 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xEDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2F4C JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0xF00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x2F5E JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2FA4 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2FB6 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2FC8 JUMP JUMPDEST PUSH2 0x65E PUSH2 0x2FF2 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0xFA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0x3001 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x32E9 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xFE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x32F9 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x330B JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1011 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x3311 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x103D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x3333 JUMP JUMPDEST PUSH2 0x65E PUSH2 0x33DC JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x33E5 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x107F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x33EB JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x10AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x3408 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x10D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x343B JUMP JUMPDEST PUSH2 0x65E PUSH2 0x3539 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1107 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3542 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x112D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3554 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x3566 JUMP JUMPDEST PUSH2 0x65E PUSH2 0x356C JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1163 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x357A JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x361B JUMP JUMPDEST PUSH2 0x9DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x11C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x36B6 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x11E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x374E JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x3760 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1215 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3766 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x123B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x80 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x3778 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x127B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x3822 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x12B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3843 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x12D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x386D JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x12F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x387A JUMP JUMPDEST PUSH2 0x1341 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x1311 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x80 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x3896 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1370 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x394D JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x139C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x39A6 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x39B8 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x13CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xA0 ADD CALLDATALOAD PUSH2 0x39BE JUMP JUMPDEST PUSH2 0x65E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3A72 JUMP JUMPDEST PUSH2 0x65E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x143A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3A87 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x1460 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xA0 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xC0 ADD CALLDATALOAD PUSH2 0x3A9B JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x3B2C JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x14B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP2 PUSH1 0x80 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0x3B32 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x3F0A JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1504 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3F10 JUMP JUMPDEST PUSH2 0x62A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x152A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x3F88 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FAF JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x156D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x4082 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1599 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x40A6 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x15BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x40B8 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x15DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x40DE JUMP JUMPDEST PUSH2 0x65E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x160C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4134 JUMP JUMPDEST PUSH2 0x62A PUSH2 0x4149 JUMP JUMPDEST PUSH2 0x62A PUSH2 0x4158 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1642 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x4167 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1674 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x41A1 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x437A JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x16AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x80 ADD CALLDATALOAD PUSH2 0x4380 JUMP JUMPDEST PUSH2 0x16F5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x16EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x43F6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x172F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1717 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x175C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x25 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 PUSH2 0x1792 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x17C8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x26 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x17C4 SWAP1 DUP3 SWAP1 PUSH2 0x17BE SWAP1 PUSH3 0xF4240 PUSH2 0x4491 JUMP JUMPDEST SWAP1 PUSH2 0x44EA JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH10 0x4EE2D6D415B85ACEF81 PUSH1 0x20 SHL DUP2 JUMP JUMPDEST PUSH1 0x1B SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x17F3 JUMPI POP PUSH1 0x0 PUSH2 0x1831 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17FE DUP5 PUSH2 0x2DFA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x182C PUSH1 0xA DUP3 SWAP1 EXP PUSH2 0x17BE DUP7 DUP6 PUSH2 0x4491 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2710 DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x14 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x16 SLOAD PUSH4 0x1000000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x23 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2C PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x189A PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x16 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH3 0x10000 MUL PUSH3 0xFF0000 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x18 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1946 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5661756C743A20696E76616C6964206572726F72436F6E74726F6C6C65720000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x30 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x195F SWAP1 DUP4 DUP4 PUSH2 0x5DAC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1831 DUP3 PUSH2 0x1974 DUP5 PUSH2 0x357A JUMP JUMPDEST PUSH2 0x17E4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1985 DUP5 PUSH2 0x3F10 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x19A3 DUP3 PUSH2 0x17BE DUP7 PUSH9 0x327CB2734119D3B7A9 PUSH1 0x1E SHL PUSH2 0x4491 JUMP JUMPDEST PUSH1 0x5 SLOAD SWAP1 SWAP2 POP PUSH2 0x182C SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH2 0x1D24 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 SWAP7 DUP8 SHL DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP6 DUP8 SHL DUP2 AND PUSH1 0x34 DUP4 ADD MSTORE SWAP4 SWAP1 SWAP6 SHL SWAP1 SWAP3 AND PUSH1 0x48 DUP6 ADD MSTORE ISZERO ISZERO PUSH1 0xF8 SHL PUSH1 0x5C DUP5 ADD MSTORE DUP1 MLOAD PUSH1 0x3D DUP2 DUP6 SUB ADD DUP2 MSTORE PUSH1 0x5D SWAP1 SWAP4 ADD SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1A1C PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH2 0x100 MUL PUSH2 0xFF00 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AB8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1ACE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP DUP1 PUSH2 0x1AE1 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x17C8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x22 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x15 SLOAD PUSH2 0x1B0B SWAP1 PUSH2 0x17BE DUP4 DUP6 PUSH2 0x4491 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1B1B PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1B98 JUMPI PUSH1 0x7 SLOAD PUSH2 0x1B49 SWAP1 PUSH1 0x1 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH1 0x1B DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x3AD8AA4F87544323A9D1E5DD902F40C356527A7955687113DB5F9A85AD579DC1 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x15 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x22 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1BBF SWAP1 DUP3 SWAP1 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x1D DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP13 SWAP1 SSTORE PUSH1 0x22 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP12 SWAP1 SSTORE PUSH1 0x1E DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP11 SWAP1 SSTORE PUSH1 0x24 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP10 SWAP1 SSTORE PUSH1 0x1F DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD DUP3 AND DUP10 ISZERO ISZERO OR SWAP1 SSTORE SWAP2 DUP1 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND DUP5 ISZERO ISZERO OR SWAP1 SSTORE SWAP1 POP PUSH2 0x1C3E DUP2 DUP8 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x15 SSTORE PUSH2 0x1C4A DUP9 PUSH2 0x3F10 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x17 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x1C72 PUSH2 0x4529 JUMP JUMPDEST PUSH2 0x1C82 PUSH2 0x1F4 DUP11 GT ISZERO PUSH1 0x3 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x1C92 PUSH2 0x1F4 DUP10 GT ISZERO PUSH1 0x4 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x1CA2 PUSH2 0x1F4 DUP9 GT ISZERO PUSH1 0x5 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x1CB2 PUSH2 0x1F4 DUP8 GT ISZERO PUSH1 0x6 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x1CC2 PUSH2 0x1F4 DUP7 GT ISZERO PUSH1 0x7 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x1CD2 PUSH2 0x1F4 DUP6 GT ISZERO PUSH1 0x8 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x1CED PUSH10 0x4EE2D6D415B85ACEF81 PUSH1 0x20 SHL DUP5 GT ISZERO PUSH1 0x9 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0xA SWAP9 SWAP1 SWAP9 SSTORE PUSH1 0xB SWAP7 SWAP1 SWAP7 SSTORE PUSH1 0xC SWAP5 SWAP1 SWAP5 SSTORE PUSH1 0xD SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0xE SSTORE PUSH1 0xF SSTORE PUSH1 0x9 SSTORE PUSH1 0x10 SSTORE PUSH1 0x11 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ PUSH2 0x1D5C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1D5F JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0x5 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ PUSH2 0x1D98 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1D9B JUMP JUMPDEST PUSH1 0x12 JUMPDEST SWAP1 POP PUSH2 0x1DBA DUP3 PUSH1 0xA EXP PUSH2 0x17BE DUP4 PUSH1 0xA EXP DUP10 PUSH2 0x4491 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1F PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x1DE3 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1E1F DUP8 DUP8 DUP8 DUP8 PUSH2 0x19BE JUMP JUMPDEST SWAP1 POP PUSH2 0x1E29 PUSH2 0x5E2A JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2B PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SWAP1 SWAP2 ADD SLOAD PUSH1 0xC0 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP3 PUSH2 0x1E9D SWAP3 DUP10 SWAP3 SWAP1 SWAP2 SWAP1 DUP10 SWAP1 PUSH2 0x252A JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x1EF2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5E7D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0x1 SLOAD PUSH2 0x1F0E SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1C PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x1F16 PUSH2 0x468A JUMP JUMPDEST PUSH2 0x1F1F DUP6 PUSH2 0x46A6 JUMP JUMPDEST PUSH2 0x1F2A DUP5 DUP5 DUP4 PUSH2 0x4709 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x4EAE147D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP8 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP7 SWAP1 MSTORE DUP5 ISZERO ISZERO PUSH1 0x84 DUP4 ADD MSTORE SWAP2 MLOAD PUSH4 0x1000000 SWAP1 SWAP4 DIV SWAP1 SWAP2 AND SWAP2 PUSH4 0x9D5C28FA SWAP2 PUSH1 0xA4 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FB2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1FC0 DUP5 DUP5 PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FCE DUP7 DUP7 DUP7 DUP6 PUSH2 0x19BE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP DUP4 PUSH2 0x1FF2 JUMPI PUSH2 0x1FED DUP7 PUSH2 0x2DFA JUMP JUMPDEST PUSH2 0x1FFB JUMP JUMPDEST PUSH2 0x1FFB DUP7 PUSH2 0x3F10 JUMP JUMPDEST DUP3 SLOAD SWAP1 SWAP2 POP PUSH2 0x200C JUMPI PUSH1 0x2 DUP3 ADD DUP2 SWAP1 SSTORE JUMPDEST DUP2 SLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x201C JUMPI POP PUSH1 0x0 DUP6 GT JUMPDEST ISZERO PUSH2 0x2042 JUMPI PUSH2 0x203C DUP7 DUP4 PUSH1 0x0 ADD SLOAD DUP5 PUSH1 0x2 ADD SLOAD DUP8 DUP6 DUP11 DUP9 PUSH1 0x6 ADD SLOAD PUSH2 0x3A9B JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SSTORE JUMPDEST PUSH1 0x0 PUSH2 0x205B DUP10 DUP10 DUP10 DUP9 DUP11 DUP9 PUSH1 0x0 ADD SLOAD DUP10 PUSH1 0x3 ADD SLOAD PUSH2 0x481E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2068 DUP10 PUSH2 0x48EC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2076 DUP11 DUP4 PUSH2 0x17E4 JUMP JUMPDEST PUSH1 0x1 DUP7 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x2088 SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 DUP7 ADD DUP2 SWAP1 SSTORE PUSH2 0x209D SWAP1 DUP5 GT ISZERO PUSH1 0x1D PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 DUP6 ADD SLOAD PUSH2 0x20AC SWAP1 DUP5 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 DUP7 ADD SSTORE PUSH2 0x20BC DUP11 DUP11 DUP10 PUSH2 0x361B JUMP JUMPDEST PUSH1 0x3 DUP7 ADD SSTORE DUP5 SLOAD PUSH2 0x20CD SWAP1 DUP10 PUSH2 0x4544 JUMP JUMPDEST DUP1 DUP7 SSTORE TIMESTAMP PUSH1 0x6 DUP8 ADD SSTORE PUSH2 0x20E3 SWAP1 ISZERO ISZERO PUSH1 0x1E PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x20F5 DUP6 PUSH1 0x0 ADD SLOAD DUP7 PUSH1 0x1 ADD SLOAD PUSH2 0x4999 JUMP JUMPDEST PUSH2 0x2103 DUP12 DUP12 DUP12 DUP11 PUSH1 0x1 PUSH2 0x3896 JUMP JUMPDEST POP POP PUSH1 0x0 PUSH2 0x2111 DUP12 DUP11 PUSH2 0x33EB JUMP JUMPDEST PUSH1 0x4 DUP8 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x2123 SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x4 DUP8 ADD SSTORE PUSH2 0x2132 DUP12 DUP3 PUSH2 0x49BD JUMP JUMPDEST DUP8 ISZERO PUSH2 0x2177 JUMPI PUSH2 0x214B DUP12 PUSH2 0x2146 DUP12 DUP8 PUSH2 0x4544 JUMP JUMPDEST PUSH2 0x4A5D JUMP JUMPDEST PUSH2 0x2155 DUP12 DUP4 PUSH2 0x4ADC JUMP JUMPDEST PUSH2 0x215F DUP12 DUP5 PUSH2 0x4B5B JUMP JUMPDEST PUSH2 0x2172 DUP12 PUSH2 0x216D DUP14 DUP8 PUSH2 0x3311 JUMP JUMPDEST PUSH2 0x4C73 JUMP JUMPDEST PUSH2 0x21E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x21B4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE PUSH2 0x21D9 JUMP JUMPDEST PUSH2 0x21BF DUP11 DUP7 DUP12 PUSH2 0x3333 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH2 0x21E3 DUP11 DUP11 PUSH2 0x4D46 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP16 AND PUSH1 0x20 DUP4 ADD MSTORE DUP1 DUP15 AND DUP3 DUP5 ADD MSTORE DUP13 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP12 SWAP1 MSTORE DUP10 ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP2 ADD DUP8 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0x2FE68525253654C21998F35787A8D0F361905EF647C854092430AB65F2F15022 SWAP2 DUP2 SWAP1 SUB PUSH2 0x120 ADD SWAP1 LOG1 DUP6 SLOAD PUSH1 0x1 DUP8 ADD SLOAD PUSH1 0x2 DUP9 ADD SLOAD PUSH1 0x3 DUP10 ADD SLOAD PUSH1 0x4 DUP11 ADD SLOAD PUSH1 0x5 DUP12 ADD SLOAD PUSH1 0x40 DUP1 MLOAD DUP15 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP8 SWAP1 SWAP8 MSTORE DUP7 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x60 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP3 ADD DUP8 SWAP1 MSTORE MLOAD PUSH32 0x20853733B590DCE729D9F4628682EBD9A34D2354E72679E66F43A008FC03B773 SWAP2 DUP2 SWAP1 SUB PUSH2 0x100 ADD SWAP1 LOG1 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2314 DUP14 DUP14 DUP14 DUP14 PUSH2 0x19BE JUMP JUMPDEST SWAP1 POP PUSH2 0x231E PUSH2 0x5E2A JUMP JUMPDEST PUSH1 0x2B PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP3 PUSH1 0xA0 ADD MLOAD SGT PUSH2 0x239E JUMPI DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x0 SUB PUSH2 0x23A4 JUMP JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD JUMPDEST SWAP1 POP DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD DUP6 PUSH1 0x80 ADD MLOAD DUP6 PUSH1 0x0 DUP9 PUSH1 0xA0 ADD MLOAD SLT ISZERO DUP9 PUSH1 0xC0 ADD MLOAD SWAP11 POP SWAP11 POP SWAP11 POP SWAP11 POP SWAP11 POP SWAP11 POP SWAP11 POP SWAP11 POP POP POP POP SWAP5 SWAP10 POP SWAP5 SWAP10 POP SWAP5 SWAP10 SWAP2 SWAP7 POP SWAP5 POP JUMP JUMPDEST PUSH1 0x27 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1F4 DUP2 JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2B PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0x5 DUP7 ADD SLOAD PUSH1 0x6 SWAP1 SWAP7 ADD SLOAD SWAP5 SWAP6 SWAP4 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x245A DUP7 DUP7 DUP7 DUP7 PUSH2 0x19BE JUMP JUMPDEST SWAP1 POP PUSH2 0x2464 PUSH2 0x5E2A JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2B PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x24CE SWAP1 ISZERO ISZERO PUSH1 0x25 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD PUSH2 0x24E6 SWAP2 SWAP1 PUSH2 0x17BE SWAP1 PUSH2 0x2710 PUSH2 0x4491 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x21 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x25 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x253B PUSH1 0x0 DUP7 GT PUSH1 0x26 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH2 0x2550 JUMPI PUSH2 0x254B DUP9 PUSH2 0x3F10 JUMP JUMPDEST PUSH2 0x2559 JUMP JUMPDEST PUSH2 0x2559 DUP9 PUSH2 0x2DFA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP8 GT PUSH2 0x2573 JUMPI PUSH2 0x256E DUP3 DUP9 PUSH2 0x459C JUMP JUMPDEST PUSH2 0x257D JUMP JUMPDEST PUSH2 0x257D DUP8 DUP4 PUSH2 0x459C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x258F DUP9 PUSH2 0x17BE DUP12 DUP6 PUSH2 0x4491 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 ISZERO PUSH2 0x25A2 JUMPI POP DUP8 DUP4 GT PUSH2 0x25A7 JUMP JUMPDEST POP DUP3 DUP9 GT JUMPDEST PUSH1 0x0 PUSH2 0x25BE PUSH1 0x10 SLOAD DUP10 PUSH2 0x4544 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST TIMESTAMP GT PUSH2 0x25E2 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x25E5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP DUP2 DUP1 ISZERO PUSH2 0x2608 JUMPI POP PUSH2 0x25F9 DUP12 DUP3 PUSH2 0x4491 JUMP JUMPDEST PUSH2 0x2605 DUP5 PUSH2 0x2710 PUSH2 0x4491 JUMP JUMPDEST GT ISZERO JUMPDEST ISZERO PUSH2 0x2612 JUMPI PUSH1 0x0 SWAP3 POP JUMPDEST POP SWAP11 SWAP1 SWAP10 POP SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x2668 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5E7D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 DUP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2693 SWAP1 PUSH1 0xFF AND PUSH1 0xE PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x269E DUP3 PUSH2 0x48EC JUMP JUMPDEST SWAP1 POP PUSH2 0x26AE PUSH1 0x0 DUP3 GT PUSH1 0xF PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x26B8 DUP3 DUP3 PUSH2 0x4B5B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 0xA5A389190EBF6170A133BDA5C769B77F4D6715B8AA172EC0DDF8473D0B4944BD SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x18 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2E PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH4 0x1000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x18 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH3 0xF4240 DUP2 JUMP JUMPDEST PUSH2 0x2790 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH4 0x1000000 MUL PUSH4 0x1000000 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x2804 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5E7D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x2811 PUSH2 0x4DFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2838 SWAP1 PUSH1 0xFF AND PUSH1 0x13 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x16 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x285F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x48EC JUMP JUMPDEST SWAP1 POP PUSH2 0x286F PUSH1 0x0 DUP3 GT PUSH1 0x14 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x2879 DUP5 DUP6 PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2885 DUP6 DUP4 PUSH2 0x1979 JUMP JUMPDEST SWAP1 POP PUSH2 0x2895 PUSH1 0x0 DUP3 GT PUSH1 0x15 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x289F DUP6 DUP4 PUSH2 0x4E2D JUMP JUMPDEST PUSH2 0x28A9 DUP6 DUP3 PUSH2 0x4C73 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x9DC29FAC SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x28FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2910 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x5 SLOAD PUSH2 0x292A SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP PUSH2 0x4F0F JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xEB0835BF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH4 0x1000000 SWAP1 DIV SWAP1 SWAP3 AND SWAP2 PUSH4 0xEB0835BF SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2988 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x299C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x29B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x29C3 DUP8 DUP5 DUP5 PUSH2 0x4FAA JUMP JUMPDEST SWAP1 POP PUSH2 0x29D3 PUSH1 0x0 DUP3 GT PUSH1 0x16 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x29DE DUP8 DUP3 DUP9 PUSH2 0x5072 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND DUP3 MSTORE DUP10 AND PUSH1 0x20 DUP3 ADD MSTORE DUP1 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0xD732B7828FA6CEE72C285EAC756FC66A7477E3DC22E22E7C432F1C265D40B483 SWAP2 DUP2 SWAP1 SUB PUSH1 0xA0 ADD SWAP1 LOG1 PUSH1 0x16 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x0 SSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2A58 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2A82 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH2 0x2A96 SWAP2 PUSH1 0xFF SWAP1 SWAP2 AND ISZERO SWAP1 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0xFF NOT AND DUP2 OR SWAP1 SSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP9 DUP10 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x5 DUP1 SLOAD DUP3 AND SWAP7 DUP9 AND SWAP7 SWAP1 SWAP7 OR SWAP1 SWAP6 SSTORE PUSH1 0x4 DUP1 SLOAD SWAP1 SWAP6 AND SWAP4 SWAP1 SWAP6 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x9 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x13 SSTORE PUSH1 0x14 SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2B0E PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH3 0x10000 MUL PUSH3 0xFF0000 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x2B72 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5E7D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x2B7F PUSH2 0x4DFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2BA6 SWAP1 PUSH1 0xFF AND PUSH1 0x10 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x16 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE PUSH1 0x0 PUSH2 0x2BC0 DUP5 PUSH2 0x48EC JUMP JUMPDEST SWAP1 POP PUSH2 0x2BD0 PUSH1 0x0 DUP3 GT PUSH1 0x11 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x2BDA DUP5 DUP6 PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BE5 DUP6 PUSH2 0x2DFA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2C03 PUSH9 0x327CB2734119D3B7A9 PUSH1 0x1E SHL PUSH2 0x17BE DUP6 DUP6 PUSH2 0x4491 JUMP JUMPDEST PUSH1 0x5 SLOAD SWAP1 SWAP2 POP PUSH2 0x2C1F SWAP1 DUP3 SWAP1 DUP9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1D24 JUMP JUMPDEST SWAP1 POP PUSH2 0x2C2F PUSH1 0x0 DUP3 GT PUSH1 0x12 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x256F6EE3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH4 0x1000000 SWAP1 DIV SWAP1 SWAP3 AND SWAP2 PUSH4 0x4ADEDDC6 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2CA1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2CB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x2CC8 DUP9 DUP7 DUP5 PUSH2 0x4FAA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2CE6 PUSH9 0x327CB2734119D3B7A9 PUSH1 0x1E SHL PUSH2 0x17BE DUP5 DUP9 PUSH2 0x4491 JUMP JUMPDEST PUSH1 0x5 SLOAD SWAP1 SWAP2 POP PUSH2 0x2D02 SWAP1 DUP3 SWAP1 DUP12 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1D24 JUMP JUMPDEST SWAP1 POP PUSH2 0x2D0E DUP10 DUP3 PUSH2 0x5119 JUMP JUMPDEST PUSH2 0x2D18 DUP10 DUP4 PUSH2 0x4B5B JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x40C10F19 SWAP2 PUSH1 0x44 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2D81 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP14 AND DUP3 MSTORE DUP14 AND PUSH1 0x20 DUP3 ADD MSTORE DUP1 DUP3 ADD DUP11 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0xAB4C77C74CD32C85F35416CF03E7CE9E2D4387F7B7F2C1F4BF53DAAECF8EA72D SWAP4 POP SWAP1 DUP2 SWAP1 SUB PUSH1 0xA0 ADD SWAP2 POP LOG1 PUSH1 0x16 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x0 SSTORE SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x16 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x17E1D385 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP6 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x0 PUSH1 0x24 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xFF DUP1 DUP6 AND ISZERO ISZERO PUSH1 0x44 DUP5 ADD MSTORE PUSH2 0x100 SWAP1 SWAP5 DIV SWAP1 SWAP4 AND ISZERO ISZERO PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP1 SWAP3 AND SWAP2 PUSH4 0x2FC3A70A SWAP2 PUSH1 0x84 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E87 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2E9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x2EED JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5E7D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x2EFA PUSH2 0x468A JUMP JUMPDEST PUSH2 0x2F03 DUP9 PUSH2 0x46A6 JUMP JUMPDEST PUSH2 0x2F12 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x51D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2F2B PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x27 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x12 DUP2 JUMP JUMPDEST PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2F66 PUSH2 0x4529 JUMP JUMPDEST PUSH2 0x2F76 PUSH2 0xE10 DUP5 LT ISZERO PUSH1 0xA PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x2F86 PUSH2 0x2710 DUP4 GT ISZERO PUSH1 0xB PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x2F96 PUSH2 0x2710 DUP3 GT ISZERO PUSH1 0xC PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x12 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x13 SSTORE PUSH1 0x14 SSTORE JUMP JUMPDEST PUSH1 0x2D PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1D PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2FD0 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x16 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x3049 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5E7D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0x1 SLOAD PUSH2 0x3064 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH1 0x17 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x308B SWAP1 PUSH1 0xFF AND PUSH1 0x18 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x30B2 SWAP1 PUSH1 0xFF AND PUSH1 0x19 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x30D2 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH1 0x1A PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x16 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE PUSH2 0x30EB DUP5 DUP1 PUSH2 0x41A1 JUMP JUMPDEST PUSH2 0x30F5 DUP4 DUP5 PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3100 DUP6 PUSH2 0x48EC JUMP JUMPDEST SWAP1 POP PUSH2 0x3110 PUSH1 0x0 DUP3 GT PUSH1 0x1B PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x311B DUP7 PUSH2 0x2DFA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3128 DUP7 PUSH2 0x3F10 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x313A DUP3 PUSH2 0x17BE DUP7 DUP7 PUSH2 0x4491 JUMP JUMPDEST SWAP1 POP PUSH2 0x3147 DUP2 DUP10 DUP10 PUSH2 0x1D24 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3165 PUSH9 0x327CB2734119D3B7A9 PUSH1 0x1E SHL PUSH2 0x17BE DUP8 DUP8 PUSH2 0x4491 JUMP JUMPDEST PUSH1 0x5 SLOAD SWAP1 SWAP2 POP PUSH2 0x3181 SWAP1 DUP3 SWAP1 DUP12 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1D24 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x6D099C0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP13 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD SWAP4 SWAP5 POP PUSH1 0x0 SWAP4 PUSH4 0x1000000 SWAP1 SWAP4 DIV SWAP1 SWAP2 AND SWAP2 PUSH4 0xDA133816 SWAP2 PUSH1 0x64 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x31EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x31FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3215 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x3226 DUP11 DUP6 DUP5 PUSH2 0x4FAA JUMP JUMPDEST SWAP1 POP PUSH2 0x3232 DUP12 DUP5 PUSH2 0x5119 JUMP JUMPDEST PUSH2 0x323C DUP11 DUP5 PUSH2 0x4E2D JUMP JUMPDEST PUSH2 0x3246 DUP12 DUP9 PUSH2 0x4B5B JUMP JUMPDEST PUSH2 0x3250 DUP11 DUP6 PUSH2 0x4C73 JUMP JUMPDEST PUSH2 0x3259 DUP11 PUSH2 0x569A JUMP JUMPDEST PUSH2 0x3264 DUP11 DUP3 DUP12 PUSH2 0x5072 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP13 AND DUP3 MSTORE DUP1 DUP15 AND PUSH1 0x20 DUP4 ADD MSTORE DUP13 AND DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0x874B2D545CB271CDBDA4E093020C452328B24AF12382ED62C4D00F5C26709DB SWAP2 DUP2 SWAP1 SUB PUSH1 0xE0 ADD SWAP1 LOG1 PUSH1 0x16 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x0 SSTORE SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH9 0x327CB2734119D3B7A9 PUSH1 0x1E SHL DUP2 JUMP JUMPDEST PUSH1 0x2F PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x12 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3320 JUMPI POP PUSH1 0x0 PUSH2 0x1831 JUMP JUMPDEST PUSH2 0x1DBF DUP4 DUP4 PUSH2 0x332E DUP7 PUSH2 0x3F10 JUMP JUMPDEST PUSH2 0x4167 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x2E SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD DUP3 DUP6 DUP3 GT PUSH2 0x336E JUMPI PUSH2 0x3369 DUP7 DUP4 PUSH2 0x459C JUMP JUMPDEST PUSH2 0x3378 JUMP JUMPDEST PUSH2 0x3378 DUP3 DUP8 PUSH2 0x459C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x338A DUP4 PUSH2 0x17BE DUP7 DUP6 PUSH2 0x4491 JUMP JUMPDEST SWAP1 POP DUP7 DUP4 GT PUSH1 0x0 PUSH2 0x339B DUP7 DUP10 PUSH2 0x4544 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH2 0x33B3 JUMPI PUSH2 0x33AE DUP3 DUP6 PUSH2 0x4544 JUMP JUMPDEST PUSH2 0x33BD JUMP JUMPDEST PUSH2 0x33BD DUP3 DUP6 PUSH2 0x459C JUMP JUMPDEST SWAP1 POP PUSH2 0x33CD DUP2 PUSH2 0x17BE DUP13 DUP6 PUSH2 0x4491 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x33FA JUMPI POP PUSH1 0x0 PUSH2 0x1831 JUMP JUMPDEST PUSH2 0x1DBF DUP4 DUP4 PUSH2 0x332E DUP7 PUSH2 0x2DFA JUMP JUMPDEST PUSH2 0x3410 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 TIMESTAMP SWAP2 PUSH2 0x3464 SWAP2 PUSH2 0x4544 JUMP JUMPDEST GT ISZERO PUSH2 0x3472 JUMPI POP PUSH1 0x0 PUSH2 0x17C8 JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x349F SWAP2 PUSH2 0x17BE SWAP1 TIMESTAMP SWAP1 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x25 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP1 PUSH2 0x34CB JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x17C8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1F PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x34F3 JUMPI PUSH1 0x13 SLOAD PUSH2 0x34F7 JUMP JUMPDEST PUSH1 0x14 SLOAD JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x26 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x3530 SWAP1 DUP4 SWAP1 PUSH2 0x17BE SWAP1 DUP7 SWAP1 PUSH2 0x352A SWAP1 DUP7 SWAP1 PUSH2 0x4491 JUMP JUMPDEST SWAP1 PUSH2 0x4491 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x16 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x22 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x24 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x16 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1F PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x35BA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x25 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x17C8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x28 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x35DE SWAP1 DUP5 SWAP1 PUSH2 0x3311 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x26 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x25 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH2 0x17C4 SWAP2 PUSH2 0x3615 SWAP1 DUP5 SWAP1 PUSH2 0x4544 JUMP JUMPDEST SWAP1 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xB1CC53AB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 ISZERO ISZERO PUSH1 0x44 DUP4 ADD MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH4 0x1000000 SWAP1 DIV SWAP1 SWAP3 AND SWAP2 PUSH4 0xB1CC53AB SWAP2 PUSH1 0x64 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3682 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3696 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x36AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2D PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 DUP1 PUSH2 0x36E3 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x3749 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36EE DUP6 PUSH2 0x3F10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2E PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP DUP3 DUP3 GT PUSH2 0x3720 JUMPI PUSH2 0x371B DUP4 DUP4 PUSH2 0x459C JUMP JUMPDEST PUSH2 0x372A JUMP JUMPDEST PUSH2 0x372A DUP3 DUP5 PUSH2 0x459C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x373C DUP4 PUSH2 0x17BE DUP8 DUP6 PUSH2 0x4491 JUMP JUMPDEST SWAP4 SWAP1 SWAP3 GT SWAP6 POP SWAP2 SWAP4 POP POP POP POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x26 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x13 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x29 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xC7E074C3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP3 ADD DUP8 SWAP1 MSTORE PUSH1 0x64 DUP3 ADD DUP7 SWAP1 MSTORE DUP5 ISZERO ISZERO PUSH1 0x84 DUP4 ADD MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH4 0x1000000 SWAP1 DIV SWAP1 SWAP3 AND SWAP2 PUSH4 0xC7E074C3 SWAP2 PUSH1 0xA4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3800 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3816 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x382A PUSH2 0x4529 JUMP JUMPDEST PUSH2 0x383E PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP5 DUP4 PUSH2 0x570F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x384B PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x3875 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x17 SSTORE JUMP JUMPDEST PUSH2 0x3882 PUSH2 0x4529 JUMP JUMPDEST PUSH2 0x3891 PUSH2 0x2710 DUP3 GT PUSH1 0x2 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x8 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xD54D5A9F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP8 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE DUP6 ISZERO ISZERO PUSH1 0x64 DUP4 ADD MSTORE DUP5 ISZERO ISZERO PUSH1 0x84 DUP4 ADD MSTORE DUP3 MLOAD PUSH1 0x0 SWAP5 DUP6 SWAP5 PUSH4 0x1000000 SWAP1 SWAP2 DIV SWAP1 SWAP3 AND SWAP3 PUSH4 0xD54D5A9F SWAP3 PUSH1 0xA4 DUP1 DUP4 ADD SWAP4 SWAP2 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x390C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3920 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3936 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP9 SWAP1 SWAP8 POP SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3955 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x23 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 DUP3 GT ISZERO PUSH2 0x398F JUMPI PUSH2 0x3989 DUP4 PUSH2 0x3984 DUP5 DUP5 PUSH2 0x459C JUMP JUMPDEST PUSH2 0x5119 JUMP JUMPDEST POP PUSH2 0x39A2 JUMP JUMPDEST PUSH2 0x383E DUP4 PUSH2 0x399D DUP4 DUP6 PUSH2 0x459C JUMP JUMPDEST PUSH2 0x4E2D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x2A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x369D9493 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP9 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP8 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE DUP7 ISZERO ISZERO PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x84 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0xA4 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH4 0x1000000 SWAP1 DIV SWAP1 SWAP3 AND SWAP2 PUSH4 0xDA76524C SWAP2 PUSH1 0xC4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3A4F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3A65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x20 DUP1 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3AAD DUP11 DUP11 DUP11 DUP11 DUP9 PUSH2 0x252A JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH2 0x3ABE DUP11 DUP8 PUSH2 0x4544 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP9 ISZERO PUSH2 0x3AED JUMPI DUP4 PUSH2 0x3ADC JUMPI PUSH2 0x3AD7 DUP3 DUP5 PUSH2 0x459C JUMP JUMPDEST PUSH2 0x3AE6 JUMP JUMPDEST PUSH2 0x3AE6 DUP3 DUP5 PUSH2 0x4544 JUMP JUMPDEST SWAP1 POP PUSH2 0x3B0E JUMP JUMPDEST DUP4 PUSH2 0x3B01 JUMPI PUSH2 0x3AFC DUP3 DUP5 PUSH2 0x4544 JUMP JUMPDEST PUSH2 0x3B0B JUMP JUMPDEST PUSH2 0x3B0B DUP3 DUP5 PUSH2 0x459C JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x3B1C DUP2 PUSH2 0x17BE DUP11 DUP6 PUSH2 0x4491 JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x15 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x3B78 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5E7D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0x16 SLOAD PUSH4 0x1000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x3BAD JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x3BAD SWAP1 PUSH1 0xFF AND PUSH1 0x22 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x16 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH2 0x3BC1 DUP5 DUP5 PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BCF DUP7 DUP7 DUP7 DUP7 PUSH2 0x19BE JUMP JUMPDEST SWAP1 POP PUSH2 0x3BD9 PUSH2 0x5E2A JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2B PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x3C45 SWAP1 ISZERO ISZERO PUSH1 0x23 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3C56 DUP10 DUP10 DUP10 DUP10 PUSH1 0x0 PUSH2 0x3896 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x3C69 DUP3 PUSH1 0x0 EQ ISZERO PUSH1 0x24 PUSH2 0x45DE JUMP JUMPDEST DUP2 PUSH1 0x2 EQ ISZERO PUSH2 0x3C9E JUMPI PUSH2 0x3C86 DUP10 DUP10 DUP10 PUSH1 0x0 DUP8 PUSH1 0x0 ADD MLOAD DUP12 DUP16 PUSH2 0x51D7 JUMP JUMPDEST POP POP PUSH1 0x16 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE POP PUSH2 0x3EFE SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CAA DUP10 DUP4 PUSH2 0x3311 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x3CD0 SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD SWAP2 DUP3 MSTORE SWAP2 DUP2 ADD DUP5 SWAP1 MSTORE DUP1 DUP3 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0x5D0C0019D3D45FADEB74EFF9D2C9924D146D000AC6BCF3C28BF0AC3C9BAA011A SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 PUSH2 0x3D3B DUP10 DUP6 PUSH1 0x80 ADD MLOAD PUSH2 0x5761 JUMP JUMPDEST DUP7 ISZERO PUSH2 0x3D6A JUMPI PUSH1 0x20 DUP5 ADD MLOAD DUP5 MLOAD PUSH2 0x3D5C SWAP2 DUP12 SWAP2 PUSH2 0x3D57 SWAP2 PUSH2 0x459C JUMP JUMPDEST PUSH2 0x4ADC JUMP JUMPDEST PUSH2 0x3D6A DUP10 PUSH2 0x216D DUP12 DUP6 PUSH2 0x3311 JUMP JUMPDEST PUSH1 0x0 DUP8 PUSH2 0x3D7F JUMPI PUSH2 0x3D7A DUP10 PUSH2 0x3F10 JUMP JUMPDEST PUSH2 0x3D88 JUMP JUMPDEST PUSH2 0x3D88 DUP10 PUSH2 0x2DFA JUMP JUMPDEST SWAP1 POP PUSH32 0x2E1F85A64A2F22CF2F0C42584E7C919ED4ABE8D53675CFF0F62BF1E95A1C676F DUP7 DUP13 DUP13 DUP13 DUP13 DUP11 PUSH1 0x0 ADD MLOAD DUP12 PUSH1 0x20 ADD MLOAD DUP13 PUSH1 0x80 ADD MLOAD DUP14 PUSH1 0xA0 ADD MLOAD DUP11 PUSH1 0x40 MLOAD DUP1 DUP12 DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP11 POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP8 ISZERO DUP1 ISZERO PUSH2 0x3E47 JUMPI POP DUP5 PUSH1 0x20 ADD MLOAD DUP4 LT JUMPDEST ISZERO PUSH2 0x3E75 JUMPI PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x0 SWAP1 PUSH2 0x3E5E SWAP1 DUP6 PUSH2 0x459C JUMP JUMPDEST SWAP1 POP PUSH2 0x3E73 DUP12 PUSH2 0x3E6E DUP14 DUP5 PUSH2 0x3311 JUMP JUMPDEST PUSH2 0x4B5B JUMP JUMPDEST POP JUMPDEST DUP8 PUSH2 0x3E88 JUMPI PUSH2 0x3E88 DUP10 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x5816 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x2B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x2 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x3 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x5 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x6 ADD SSTORE PUSH1 0x9 SLOAD PUSH2 0x3ED4 SWAP1 DUP12 SWAP1 PUSH2 0x216D SWAP1 DUP3 SWAP1 PUSH2 0x3311 JUMP JUMPDEST PUSH2 0x3EEA DUP11 PUSH2 0x3EE4 DUP13 PUSH1 0x9 SLOAD PUSH2 0x3311 JUMP JUMPDEST DUP10 PUSH2 0x5072 JUMP JUMPDEST POP POP PUSH1 0x16 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE POP POP POP POP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x16 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x17E1D385 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP6 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0xFF DUP1 DUP5 AND ISZERO ISZERO PUSH1 0x44 DUP4 ADD MSTORE PUSH2 0x100 SWAP1 SWAP4 DIV SWAP1 SWAP3 AND ISZERO ISZERO PUSH1 0x64 DUP4 ADD MSTORE MLOAD PUSH1 0x0 SWAP4 SWAP1 SWAP3 AND SWAP2 PUSH4 0x2FC3A70A SWAP2 PUSH1 0x84 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1B DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3F95 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x3FB7 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x3FDE SWAP1 PUSH1 0xFF AND PUSH1 0xD PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x22 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x15 SLOAD PUSH2 0x4003 SWAP2 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x15 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1D DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x22 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x1E DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x24 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x1F DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD DUP3 AND SWAP1 SSTORE SWAP2 DUP1 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x7 SLOAD PUSH2 0x407C SWAP1 PUSH1 0x1 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x7 SSTORE POP JUMP JUMPDEST PUSH2 0x408A PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x28 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x40C0 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x16 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH4 0x1000000 MUL PUSH4 0xFF000000 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x40E8 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x4110 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1831 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2C PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x1DBF DUP5 DUP3 DUP6 PUSH2 0x5072 JUMP JUMPDEST PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x4176 JUMPI POP PUSH1 0x0 PUSH2 0x1DBF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x3530 DUP4 PUSH2 0x17BE DUP7 PUSH1 0xA DUP6 SWAP1 EXP PUSH2 0x4491 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xFBFDED6D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH4 0x1000000 SWAP1 DIV SWAP1 SWAP3 AND SWAP2 PUSH4 0xFBFDED6D SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP8 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4201 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4215 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x422B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP DUP1 PUSH2 0x423A JUMPI POP PUSH2 0x39A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4287 JUMPI PUSH1 0x12 SLOAD PUSH2 0x4268 SWAP1 PUSH2 0x352A TIMESTAMP DUP3 PUSH2 0x44EA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE POP PUSH2 0x39A2 JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP SWAP2 PUSH2 0x42AF SWAP2 SWAP1 PUSH2 0x4544 JUMP JUMPDEST GT ISZERO PUSH2 0x42BB JUMPI POP PUSH2 0x39A2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42C6 DUP5 PUSH2 0x343B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x29 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x42EC SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x29 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x12 SLOAD PUSH2 0x4316 SWAP1 PUSH2 0x352A TIMESTAMP DUP3 PUSH2 0x44EA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2A PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 0x29 DUP2 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 SLOAD DUP4 MLOAD SWAP3 DUP4 MSTORE SWAP1 DUP3 ADD MSTORE DUP2 MLOAD PUSH32 0xA146FC154E1913322E9817D49F0D5C37466C24326E15DE10E739A948BE815EAB SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH2 0xE10 DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xFDAF6AC3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP8 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE DUP6 ISZERO ISZERO PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x84 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH4 0x1000000 SWAP1 DIV SWAP1 SWAP3 AND SWAP2 PUSH4 0xFDAF6AC3 SWAP2 PUSH1 0xA4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x30 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP7 AND ISZERO MUL ADD SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 DIV SWAP2 DUP3 ADD DUP5 SWAP1 DIV DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x4489 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x445E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4489 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x446C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x44A0 JUMPI POP PUSH1 0x0 PUSH2 0x1831 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x44AD JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1DBF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5E9D PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1DBF DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH26 0x536166654D6174683A206469766973696F6E206279207A65726F PUSH1 0x30 SHL DUP2 MSTORE POP PUSH2 0x587E JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x4542 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH1 0x35 PUSH2 0x45DE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1DBF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH27 0x536166654D6174683A206164646974696F6E206F766572666C6F77 PUSH1 0x28 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1DBF DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH2 0x5920 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x30 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP3 PUSH2 0x383E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD SWAP1 DUP2 MSTORE DUP3 SLOAD PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP5 AND ISZERO MUL ADD SWAP1 SWAP2 AND DIV PUSH1 0x24 DUP4 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP2 DUP3 SWAP2 PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 DUP5 SWAP1 DUP1 ISZERO PUSH2 0x467B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4650 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x467B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x465E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x17 SLOAD PUSH2 0x4696 JUMPI PUSH2 0x4542 JUMP JUMPDEST PUSH2 0x4542 PUSH1 0x17 SLOAD GASPRICE GT ISZERO PUSH1 0x37 PUSH2 0x45DE JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ ISZERO PUSH2 0x46BC JUMPI PUSH2 0x4706 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x46D4 JUMPI PUSH2 0x4706 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x18 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x4706 SWAP1 PUSH1 0xFF AND PUSH1 0x29 PUSH2 0x45DE JUMP JUMPDEST POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4782 JUMPI PUSH2 0x472E DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x2A PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4755 SWAP1 PUSH1 0xFF AND PUSH1 0x2B PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x477D SWAP1 PUSH1 0xFF AND ISZERO PUSH1 0x2C PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x383E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x47A9 SWAP1 PUSH1 0xFF AND PUSH1 0x2D PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x47D0 SWAP1 PUSH1 0xFF AND PUSH1 0x2E PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x47F8 SWAP1 PUSH1 0xFF AND ISZERO PUSH1 0x2F PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x383E SWAP1 PUSH1 0xFF AND PUSH1 0x30 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x482E DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x4380 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4840 DUP11 DUP11 DUP11 DUP11 DUP10 DUP10 PUSH2 0x39BE JUMP JUMPDEST SWAP1 POP PUSH2 0x484C DUP3 DUP3 PUSH2 0x4544 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x485A DUP11 DUP5 PUSH2 0x3311 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x4880 SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD SWAP2 DUP3 MSTORE SWAP2 DUP2 ADD DUP6 SWAP1 MSTORE DUP1 DUP3 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0x5D0C0019D3D45FADEB74EFF9D2C9924D146D000AC6BCF3C28BF0AC3C9BAA011A SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x21 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 DUP6 SWAP4 SWAP2 SWAP3 PUSH4 0x70A08231 SWAP3 PUSH1 0x24 DUP1 DUP4 ADD SWAP4 SWAP2 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4946 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x495A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4970 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE SWAP1 POP PUSH2 0x1B0B DUP2 DUP4 PUSH2 0x459C JUMP JUMPDEST DUP2 PUSH2 0x49AF JUMPI PUSH2 0x49AA DUP2 ISZERO PUSH1 0x27 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x39A2 JUMP JUMPDEST PUSH2 0x39A2 DUP2 DUP4 LT ISZERO PUSH1 0x28 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x26 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x49E0 SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x26 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP6 SWAP1 SSTORE PUSH1 0x25 DUP3 MSTORE SWAP1 SWAP3 KECCAK256 SLOAD SWAP2 MSTORE PUSH2 0x4A15 SWAP2 GT ISZERO PUSH1 0x34 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 0xAA5649D82F5462BE9D19B0F2B31A59B2259950A6076550BAC9F3A1C07DB9F66D SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x28 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4A80 SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x28 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD SWAP2 DUP3 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 0xD9D4761F75E0D0103B5CBEAB941EEB443D7A56A35B5BAF2A0787C03F03F4E474 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x28 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4AFF SWAP1 DUP3 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x28 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD SWAP2 DUP3 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 0x34E07158B9DB50DF5613E591C44EA2EBC82834EFF4A4DC3A46E000E608261D68 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x25 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4B7E SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x25 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP4 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP4 MLOAD SWAP2 SWAP4 PUSH4 0x70A08231 SWAP3 PUSH1 0x24 DUP1 DUP4 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4BD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4BE8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4BFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x25 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x4C2A SWAP1 DUP3 LT ISZERO PUSH1 0x31 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE DUP2 MLOAD PUSH32 0x976177FBE09A15E5E43F848844963A42B41EF919EF17FF21A17A5421DE8F4737 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH26 0x15985D5B1D0E881C1BDBDB105B5BDD5B9D08195E18D959591959 PUSH1 0x32 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x25 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0x4CCB SWAP2 DUP4 SWAP1 PUSH2 0x5920 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x25 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x26 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x4CFE SWAP2 LT ISZERO PUSH1 0x32 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 0x112726233FBEAEED0F5B1DBA5CB0B2B81883DEE49FB35FF99FD98ED9F6D31EB0 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4D69 SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x2F SWAP1 MSTORE KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x383E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x383E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH26 0x15985D5B1D0E881B585E081CDA1BDC9D1CC8195E18D959591959 PUSH1 0x32 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x16 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x4542 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4542 SWAP1 PUSH1 0xFF AND PUSH1 0x36 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x23 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 GT PUSH2 0x4EA8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x23 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE DUP2 MLOAD SWAP3 DUP4 MSTORE DUP3 ADD DUP4 SWAP1 MSTORE DUP1 MLOAD PUSH32 0xE1E812596AAC93A06ECC4CA627014D18E30F5C33B825160CC9D5C0BA61E45227 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP PUSH2 0x39A2 JUMP JUMPDEST PUSH2 0x4EB2 DUP2 DUP4 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x23 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD SWAP2 DUP3 MSTORE SWAP2 DUP2 ADD DUP5 SWAP1 MSTORE DUP2 MLOAD PUSH32 0xE1E812596AAC93A06ECC4CA627014D18E30F5C33B825160CC9D5C0BA61E45227 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4F5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4F72 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4F88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4FC7 PUSH2 0x2710 PUSH2 0x17BE PUSH2 0x4FC0 DUP3 DUP8 PUSH2 0x459C JUMP JUMPDEST DUP8 SWAP1 PUSH2 0x4491 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4FD5 DUP6 DUP4 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x4FFB SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH32 0x47CD9DDA0E50CE30BCAAACD0488452B596221C07AC402A581CFAE4D3933CAC2B DUP7 PUSH2 0x5040 DUP2 DUP5 PUSH2 0x17E4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 DUP2 ADD DUP5 SWAP1 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x5086 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP3 DUP5 PUSH2 0x570F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x50CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x50E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x50F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x23 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x513C SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x23 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x24 SWAP1 MSTORE KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x518E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x23 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x518E SWAP1 DUP3 LT ISZERO PUSH1 0x33 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE DUP2 MLOAD PUSH32 0x64243679A443432E2293343B77D411FF6144370404618F00CA0D2025D9CA9882 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x81D11A23 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP10 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP9 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0x84 DUP3 ADD DUP8 SWAP1 MSTORE DUP6 ISZERO ISZERO PUSH1 0xA4 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0xC4 DUP4 ADD MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH4 0x1000000 SWAP1 DIV SWAP1 SWAP3 AND SWAP2 PUSH4 0x81D11A23 SWAP2 PUSH1 0xE4 DUP1 DUP3 ADD SWAP3 DUP7 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x525B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x526F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x527D DUP8 DUP8 PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x528B DUP10 DUP10 DUP10 DUP8 PUSH2 0x19BE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x52AC SWAP1 ISZERO ISZERO PUSH1 0x1F PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x52BE DUP7 DUP3 PUSH1 0x0 ADD SLOAD LT ISZERO PUSH1 0x20 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x52D0 DUP8 DUP3 PUSH1 0x1 ADD SLOAD LT ISZERO PUSH1 0x21 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x0 SWAP2 PUSH2 0x52ED SWAP2 PUSH2 0x17BE SWAP1 DUP12 PUSH2 0x4491 JUMP JUMPDEST PUSH1 0x4 DUP5 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x52FF SWAP1 DUP3 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x4 DUP5 ADD SSTORE PUSH2 0x530E DUP12 DUP3 PUSH2 0x5761 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x5320 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 PUSH2 0x597A JUMP JUMPDEST DUP6 SLOAD SWAP2 SWAP4 POP SWAP2 POP DUP10 EQ PUSH2 0x54C4 JUMPI PUSH2 0x5338 DUP13 DUP13 DUP11 PUSH2 0x361B JUMP JUMPDEST PUSH1 0x3 DUP6 ADD SSTORE DUP4 SLOAD PUSH2 0x5349 SWAP1 DUP11 PUSH2 0x459C JUMP JUMPDEST DUP1 DUP6 SSTORE PUSH1 0x1 DUP6 ADD SLOAD PUSH2 0x535B SWAP2 SWAP1 PUSH2 0x4999 JUMP JUMPDEST PUSH2 0x5369 DUP14 DUP14 DUP14 DUP12 PUSH1 0x1 PUSH2 0x3896 JUMP JUMPDEST POP POP DUP8 ISZERO PUSH2 0x5396 JUMPI PUSH2 0x538C DUP13 PUSH2 0x2146 DUP7 PUSH1 0x1 ADD SLOAD DUP7 PUSH2 0x459C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x5396 DUP13 DUP11 PUSH2 0x4ADC JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH2 0x53AB JUMPI PUSH2 0x53A6 DUP13 PUSH2 0x3F10 JUMP JUMPDEST PUSH2 0x53B4 JUMP JUMPDEST PUSH2 0x53B4 DUP13 PUSH2 0x2DFA JUMP JUMPDEST SWAP1 POP PUSH32 0x93D75D64D1F84FC6F430A64FC578BDD4C1E090E90EA2D51773E626D19DE56D30 DUP7 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP9 PUSH2 0x53E9 DUP13 DUP13 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP10 DUP11 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP9 DUP10 AND PUSH1 0x20 DUP12 ADD MSTORE SWAP7 DUP9 AND DUP10 DUP9 ADD MSTORE SWAP5 SWAP1 SWAP7 AND PUSH1 0x60 DUP9 ADD MSTORE PUSH1 0x80 DUP8 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xA0 DUP7 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x100 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH2 0x120 ADD SWAP1 LOG1 DUP5 SLOAD PUSH1 0x1 DUP7 ADD SLOAD PUSH1 0x2 DUP8 ADD SLOAD PUSH1 0x3 DUP9 ADD SLOAD PUSH1 0x4 DUP10 ADD SLOAD PUSH1 0x5 DUP11 ADD SLOAD PUSH1 0x40 DUP1 MLOAD DUP14 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP8 SWAP1 SWAP8 MSTORE DUP7 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x60 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP3 ADD DUP4 SWAP1 MSTORE MLOAD PUSH32 0x20853733B590DCE729D9F4628682EBD9A34D2354E72679E66F43A008FC03B773 SWAP2 DUP2 SWAP1 SUB PUSH2 0x100 ADD SWAP1 LOG1 POP PUSH2 0x5638 JUMP JUMPDEST DUP8 ISZERO PUSH2 0x54DE JUMPI PUSH2 0x54D4 DUP13 DUP5 PUSH2 0x4A5D JUMP JUMPDEST PUSH2 0x54DE DUP13 DUP11 PUSH2 0x4ADC JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH2 0x54F3 JUMPI PUSH2 0x54EE DUP13 PUSH2 0x3F10 JUMP JUMPDEST PUSH2 0x54FC JUMP JUMPDEST PUSH2 0x54FC DUP13 PUSH2 0x2DFA JUMP JUMPDEST SWAP1 POP PUSH32 0x93D75D64D1F84FC6F430A64FC578BDD4C1E090E90EA2D51773E626D19DE56D30 DUP7 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP9 PUSH2 0x5531 DUP13 DUP13 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP10 DUP11 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP9 DUP10 AND PUSH1 0x20 DUP12 ADD MSTORE SWAP7 DUP9 AND DUP10 DUP9 ADD MSTORE SWAP5 SWAP1 SWAP7 AND PUSH1 0x60 DUP9 ADD MSTORE PUSH1 0x80 DUP8 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xA0 DUP7 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x100 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH2 0x120 ADD SWAP1 LOG1 DUP5 SLOAD PUSH1 0x1 DUP7 ADD SLOAD PUSH1 0x2 DUP8 ADD SLOAD PUSH1 0x3 DUP9 ADD SLOAD PUSH1 0x4 DUP10 ADD SLOAD PUSH1 0x5 DUP11 ADD SLOAD PUSH1 0x40 DUP1 MLOAD DUP14 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP8 SWAP1 SWAP8 MSTORE DUP7 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x60 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE MLOAD PUSH32 0x73AF1D417D82C240FDB6D319B34AD884487C6BF2845D98980CC52AD9171CB455 SWAP2 DUP2 SWAP1 SUB PUSH1 0xE0 ADD SWAP1 LOG1 POP PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x2B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x2 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x3 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x5 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x6 ADD SSTORE JUMPDEST DUP8 PUSH2 0x5647 JUMPI PUSH2 0x5647 DUP12 DUP11 PUSH2 0x5816 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x5687 JUMPI DUP8 ISZERO PUSH2 0x5661 JUMPI PUSH2 0x5661 DUP13 PUSH2 0x216D DUP15 DUP6 PUSH2 0x3311 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x566D DUP14 DUP4 PUSH2 0x3311 JUMP JUMPDEST SWAP1 POP PUSH2 0x567A DUP14 DUP3 DUP11 PUSH2 0x5072 JUMP JUMPDEST SWAP6 POP PUSH2 0x24E6 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x27 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x25 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD LT ISZERO PUSH2 0x4706 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH26 0x2B30BAB63A1D103837B7B620B6B7BAB73A101E10313AB33332B9 PUSH1 0x31 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x383E SWAP1 DUP5 SWAP1 PUSH2 0x5B74 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH27 0x5661756C743A20696E73756666696369656E742072657365727665 PUSH1 0x28 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x26 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0x57BA SWAP2 DUP4 SWAP1 PUSH2 0x5920 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x26 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD SWAP2 DUP3 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 0x533CB5ED32BE6A90284E96B5747A1BFC2D38FDB5768A6B5F67FF7D62144ED67B SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 DUP3 GT ISZERO PUSH2 0x5856 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2D PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x39A2 JUMP JUMPDEST PUSH2 0x5860 DUP2 DUP4 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x590A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x58CF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x58B7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x58FC JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 DUP2 PUSH2 0x5916 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x5972 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 DUP2 MSTORE DUP4 MLOAD PUSH1 0x24 DUP5 ADD MSTORE DUP4 MLOAD SWAP1 SWAP3 DUP4 SWAP3 PUSH1 0x44 SWAP1 SWAP2 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 DUP4 ISZERO PUSH2 0x58CF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x58B7 JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x598B DUP10 DUP10 DUP10 DUP8 PUSH2 0x19BE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x3 DUP3 ADD SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 PUSH2 0x59B8 SWAP2 DUP14 SWAP2 DUP14 SWAP2 DUP14 SWAP2 DUP12 SWAP2 DUP14 SWAP2 PUSH2 0x481E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x59D9 DUP14 DUP8 PUSH1 0x0 ADD SLOAD DUP9 PUSH1 0x2 ADD SLOAD DUP14 DUP11 PUSH1 0x6 ADD SLOAD PUSH2 0x252A JUMP JUMPDEST DUP8 SLOAD SWAP2 SWAP6 POP DUP6 SWAP4 POP SWAP2 POP PUSH2 0x59F1 SWAP1 PUSH2 0x17BE DUP14 DUP5 PUSH2 0x4491 JUMP JUMPDEST SWAP3 POP POP POP PUSH1 0x0 DUP3 DUP1 ISZERO PUSH2 0x5A04 JUMPI POP PUSH1 0x0 DUP3 GT JUMPDEST ISZERO PUSH2 0x5A34 JUMPI POP PUSH1 0x5 DUP5 ADD DUP1 SLOAD DUP3 ADD SWAP1 SSTORE DUP1 DUP9 PUSH2 0x5A34 JUMPI PUSH1 0x0 PUSH2 0x5A26 DUP15 DUP5 PUSH2 0x3311 JUMP JUMPDEST SWAP1 POP PUSH2 0x5A32 DUP15 DUP3 PUSH2 0x4C73 JUMP JUMPDEST POP JUMPDEST DUP3 ISZERO DUP1 ISZERO PUSH2 0x5A42 JUMPI POP PUSH1 0x0 DUP3 GT JUMPDEST ISZERO PUSH2 0x5A86 JUMPI PUSH1 0x1 DUP6 ADD SLOAD PUSH2 0x5A56 SWAP1 DUP4 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 DUP7 ADD SSTORE DUP9 PUSH2 0x5A7A JUMPI PUSH1 0x0 PUSH2 0x5A6C DUP15 DUP5 PUSH2 0x3311 JUMP JUMPDEST SWAP1 POP PUSH2 0x5A78 DUP15 DUP3 PUSH2 0x4B5B JUMP JUMPDEST POP JUMPDEST PUSH1 0x5 DUP6 ADD DUP1 SLOAD DUP4 SWAP1 SUB SWAP1 SSTORE JUMPDEST DUP11 ISZERO PUSH2 0x5AAE JUMPI PUSH2 0x5A96 DUP2 DUP13 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 DUP7 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x5AA8 SWAP1 DUP13 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 DUP7 ADD SSTORE JUMPDEST DUP5 SLOAD DUP11 EQ ISZERO PUSH2 0x5AD1 JUMPI PUSH1 0x1 DUP6 ADD SLOAD PUSH2 0x5AC7 SWAP1 DUP3 SWAP1 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 ADD SSTORE SWAP1 POP JUMPDEST DUP1 DUP5 DUP2 GT ISZERO PUSH2 0x5AEB JUMPI PUSH2 0x5AE4 DUP3 DUP7 PUSH2 0x459C JUMP JUMPDEST SWAP1 POP PUSH2 0x5B1F JUMP JUMPDEST PUSH1 0x1 DUP7 ADD SLOAD PUSH2 0x5AFA SWAP1 DUP7 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 DUP8 ADD SSTORE DUP10 ISZERO PUSH2 0x5B1F JUMPI PUSH1 0x0 PUSH2 0x5B11 DUP16 DUP8 PUSH2 0x3311 JUMP JUMPDEST SWAP1 POP PUSH2 0x5B1D DUP16 DUP3 PUSH2 0x4C73 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE DUP6 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE DUP1 DUP3 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0x3FF41BDDE87755B687AE83D0221A232B6BE51A803330ED9661C1B5D0105E0D8A SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 SWAP1 SWAP15 SWAP1 SWAP14 POP SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5BC9 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5C25 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x383E JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5BE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x383E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5EBE PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH2 0x1B0B DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH2 0x5C39 DUP6 PUSH2 0x5D40 JUMP JUMPDEST PUSH2 0x5C8A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x5CC9 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x5CAA JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5D2B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5D30 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x24E6 DUP3 DUP3 DUP7 PUSH2 0x5D46 JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x5D55 JUMPI POP DUP2 PUSH2 0x1DBF JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x5D65 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 DUP2 MSTORE DUP5 MLOAD PUSH1 0x24 DUP5 ADD MSTORE DUP5 MLOAD DUP6 SWAP4 SWAP2 SWAP3 DUP4 SWAP3 PUSH1 0x44 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 DUP4 ISZERO PUSH2 0x58CF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x58B7 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x5DED JUMPI DUP3 DUP1 ADD PUSH1 0xFF NOT DUP3 CALLDATALOAD AND OR DUP6 SSTORE PUSH2 0x5E1A JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x5E1A JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x5E1A JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x5DFF JUMP JUMPDEST POP PUSH2 0x5E26 SWAP3 SWAP2 POP PUSH2 0x5E67 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x5E26 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x5E68 JUMP INVALID MSTORE PUSH6 0x656E7472616E PUSH4 0x79477561 PUSH19 0x643A207265656E7472616E742063616C6C0053 PUSH2 0x6665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F77536166654552433230 GASPRICE KECCAK256 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x756363656564A164736F6C634300060C000A0000 ",
          "sourceMap": "390:53114:15:-:0;;;1380:4;1343:41;;-1:-1:-1;;;;1343:41:15;;;;;1390:45;;;;;1749:10;1711:48;;1861:2;1820:43;;;;1924:2;1877:49;;1989:2;1940:51;;;;2005:47;;2117:1;2066:52;;2133:49;;2240:43;;;-1:-1:-1;;2240:43:15;;;;;;2332:7;2290:49;;2493:34;;;-1:-1:-1;;2493:34:15;;;;;2622:53;;;8422:54;;;;;;;;;-1:-1:-1;1628:1:47;1743:7;:22;8453:3:15;:16;;-1:-1:-1;;;;;;8453:16:15;8459:10;8453:16;;;390:53114;;;;;;"
        },
        "deployedBytecode": {
          "immutableReferences": {},
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x599 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8585F4D2 GT PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xC7E074C3 GT PUSH2 0x18F JUMPI DUP1 PUSH4 0xC7E074C3 EQ PUSH2 0x1225 JUMPI DUP1 PUSH4 0xCEA0C328 EQ PUSH2 0x1265 JUMPI DUP1 PUSH4 0xCFAD57A2 EQ PUSH2 0x129B JUMPI DUP1 PUSH4 0xD2FA635E EQ PUSH2 0x12C1 JUMPI DUP1 PUSH4 0xD3127E63 EQ PUSH2 0x12DE JUMPI DUP1 PUSH4 0xD54D5A9F EQ PUSH2 0x12FB JUMPI DUP1 PUSH4 0xD66B000D EQ PUSH2 0x135A JUMPI DUP1 PUSH4 0xD8F897C3 EQ PUSH2 0x1386 JUMPI DUP1 PUSH4 0xD9AC4225 EQ PUSH2 0x13AC JUMPI DUP1 PUSH4 0xDA76524C EQ PUSH2 0x13B4 JUMPI DUP1 PUSH4 0xDAF9C210 EQ PUSH2 0x13FE JUMPI DUP1 PUSH4 0xDB3555FB EQ PUSH2 0x1424 JUMPI DUP1 PUSH4 0xDB97495F EQ PUSH2 0x144A JUMPI DUP1 PUSH4 0xDC8F5FAC EQ PUSH2 0x1496 JUMPI DUP1 PUSH4 0xDE2EA948 EQ PUSH2 0x149E JUMPI DUP1 PUSH4 0xDF73A267 EQ PUSH2 0x14E6 JUMPI DUP1 PUSH4 0xE124E6D2 EQ PUSH2 0x14EE JUMPI DUP1 PUSH4 0xE468BAF0 EQ PUSH2 0x1514 JUMPI DUP1 PUSH4 0xE67F59A7 EQ PUSH2 0x1531 JUMPI DUP1 PUSH4 0xEFA10A6E EQ PUSH2 0x1557 JUMPI DUP1 PUSH4 0xF07456CE EQ PUSH2 0x1583 JUMPI DUP1 PUSH4 0xF07BBF77 EQ PUSH2 0x15A9 JUMPI DUP1 PUSH4 0xF2555278 EQ PUSH2 0x15C8 JUMPI DUP1 PUSH4 0xF3AE2415 EQ PUSH2 0x15F6 JUMPI DUP1 PUSH4 0xF5B91B7B EQ PUSH2 0x161C JUMPI DUP1 PUSH4 0xF887EA40 EQ PUSH2 0x1624 JUMPI DUP1 PUSH4 0xFA12DBC0 EQ PUSH2 0x162C JUMPI DUP1 PUSH4 0xFBFDED6D EQ PUSH2 0x165E JUMPI DUP1 PUSH4 0xFCE28C10 EQ PUSH2 0x168C JUMPI DUP1 PUSH4 0xFDAF6AC3 EQ PUSH2 0x1694 JUMPI DUP1 PUSH4 0xFED1A606 EQ PUSH2 0x16D8 JUMPI PUSH2 0x599 JUMP JUMPDEST DUP1 PUSH4 0x8585F4D2 EQ PUSH2 0xE90 JUMPI DUP1 PUSH4 0x870D917C EQ PUSH2 0xEBC JUMPI DUP1 PUSH4 0x88B1FBDF EQ PUSH2 0xEC4 JUMPI DUP1 PUSH4 0x8A27D468 EQ PUSH2 0xEEA JUMPI DUP1 PUSH4 0x8A39735A EQ PUSH2 0x61A JUMPI DUP1 PUSH4 0x8A78DAA8 EQ PUSH2 0xF13 JUMPI DUP1 PUSH4 0x8EE573AC EQ PUSH2 0xF39 JUMPI DUP1 PUSH4 0x8F7B8404 EQ PUSH2 0xF5F JUMPI DUP1 PUSH4 0x9060B1CA EQ PUSH2 0xF85 JUMPI DUP1 PUSH4 0x93316212 EQ PUSH2 0xF8D JUMPI DUP1 PUSH4 0x95082D25 EQ PUSH2 0xFC5 JUMPI DUP1 PUSH4 0x9698D25A EQ PUSH2 0xFCD JUMPI DUP1 PUSH4 0x9849E412 EQ PUSH2 0xFF3 JUMPI DUP1 PUSH4 0x9899CD02 EQ PUSH2 0xFFB JUMPI DUP1 PUSH4 0x9D7432CA EQ PUSH2 0x1027 JUMPI DUP1 PUSH4 0x9F392EB3 EQ PUSH2 0x1059 JUMPI DUP1 PUSH4 0xA22F2392 EQ PUSH2 0x1061 JUMPI DUP1 PUSH4 0xA42AB3D2 EQ PUSH2 0x1069 JUMPI DUP1 PUSH4 0xA5E90EEE EQ PUSH2 0x1095 JUMPI DUP1 PUSH4 0xA93ACAC2 EQ PUSH2 0x10C3 JUMPI DUP1 PUSH4 0xAB08C1C6 EQ PUSH2 0x10E9 JUMPI DUP1 PUSH4 0xAB2F3AD4 EQ PUSH2 0x10F1 JUMPI DUP1 PUSH4 0xAD1E4F8D EQ PUSH2 0x1117 JUMPI DUP1 PUSH4 0xAE3302C2 EQ PUSH2 0x113D JUMPI DUP1 PUSH4 0xB06423F3 EQ PUSH2 0x1145 JUMPI DUP1 PUSH4 0xB136CA49 EQ PUSH2 0x114D JUMPI DUP1 PUSH4 0xB1CC53AB EQ PUSH2 0x1173 JUMPI DUP1 PUSH4 0xB364ACCB EQ PUSH2 0x11AB JUMPI DUP1 PUSH4 0xC3C7B9E9 EQ PUSH2 0x11D1 JUMPI DUP1 PUSH4 0xC4F718BF EQ PUSH2 0x11F7 JUMPI DUP1 PUSH4 0xC65BC7B1 EQ PUSH2 0x11FF JUMPI PUSH2 0x599 JUMP JUMPDEST DUP1 PUSH4 0x4453A374 GT PUSH2 0x44E JUMPI DUP1 PUSH4 0x4453A374 EQ PUSH2 0x970 JUMPI DUP1 PUSH4 0x45A6F370 EQ PUSH2 0x99E JUMPI DUP1 PUSH4 0x48D91ABF EQ PUSH2 0x9F7 JUMPI DUP1 PUSH4 0x48F35CBB EQ PUSH2 0xA3B JUMPI DUP1 PUSH4 0x4A3F088D EQ PUSH2 0xA43 JUMPI DUP1 PUSH4 0x4A993EE9 EQ PUSH2 0xAC4 JUMPI DUP1 PUSH4 0x4BEFE2CA EQ PUSH2 0xAEA JUMPI DUP1 PUSH4 0x4D47B304 EQ PUSH2 0xAF2 JUMPI DUP1 PUSH4 0x514EA4BF EQ PUSH2 0xAFA JUMPI DUP1 PUSH4 0x51723E82 EQ PUSH2 0xB4F JUMPI DUP1 PUSH4 0x523FBA7F EQ PUSH2 0xB8D JUMPI DUP1 PUSH4 0x529A356F EQ PUSH2 0xBB3 JUMPI DUP1 PUSH4 0x52F55EED EQ PUSH2 0xBD9 JUMPI DUP1 PUSH4 0x5C07EAAB EQ PUSH2 0xBFF JUMPI DUP1 PUSH4 0x5F7BC119 EQ PUSH2 0xC3F JUMPI DUP1 PUSH4 0x60922199 EQ PUSH2 0xC65 JUMPI DUP1 PUSH4 0x62287A32 EQ PUSH2 0xC93 JUMPI DUP1 PUSH4 0x62749803 EQ PUSH2 0xC9B JUMPI DUP1 PUSH4 0x6ABBE0C8 EQ PUSH2 0xCC1 JUMPI DUP1 PUSH4 0x6AE0B154 EQ PUSH2 0xCC9 JUMPI DUP1 PUSH4 0x6BE6026B EQ PUSH2 0xCEF JUMPI DUP1 PUSH4 0x71089F4D EQ PUSH2 0xCF7 JUMPI DUP1 PUSH4 0x711E6190 EQ PUSH2 0xD1D JUMPI DUP1 PUSH4 0x724E78DA EQ PUSH2 0xD4B JUMPI DUP1 PUSH4 0x728CDBCA EQ PUSH2 0xD71 JUMPI DUP1 PUSH4 0x741BEF1A EQ PUSH2 0xDB9 JUMPI DUP1 PUSH4 0x7A210A2B EQ PUSH2 0xDC1 JUMPI DUP1 PUSH4 0x7C2EB9F7 EQ PUSH2 0xDC9 JUMPI DUP1 PUSH4 0x817BB857 EQ PUSH2 0xDE8 JUMPI DUP1 PUSH4 0x81A612D6 EQ PUSH2 0xE16 JUMPI DUP1 PUSH4 0x82A08490 EQ PUSH2 0xE3C JUMPI PUSH2 0x599 JUMP JUMPDEST DUP1 PUSH4 0x4FEF1DB EQ PUSH2 0x59E JUMPI DUP1 PUSH4 0x7C58752 EQ PUSH2 0x5D6 JUMPI DUP1 PUSH4 0x842B076 EQ PUSH2 0x5DE JUMPI DUP1 PUSH4 0xA48D5A9 EQ PUSH2 0x5E6 JUMPI DUP1 PUSH4 0x10EB56C2 EQ PUSH2 0x612 JUMPI DUP1 PUSH4 0x126082CF EQ PUSH2 0x61A JUMPI DUP1 PUSH4 0x12D43A51 EQ PUSH2 0x622 JUMPI DUP1 PUSH4 0x134CA63B EQ PUSH2 0x646 JUMPI DUP1 PUSH4 0x174D2694 EQ PUSH2 0x64E JUMPI DUP1 PUSH4 0x181E210E EQ PUSH2 0x656 JUMPI DUP1 PUSH4 0x1AA4ACE5 EQ PUSH2 0x672 JUMPI DUP1 PUSH4 0x1CE9CB8F EQ PUSH2 0x698 JUMPI DUP1 PUSH4 0x24B0C04D EQ PUSH2 0x6BE JUMPI DUP1 PUSH4 0x24CA984E EQ PUSH2 0x6DF JUMPI DUP1 PUSH4 0x28E67BE5 EQ PUSH2 0x705 JUMPI DUP1 PUSH4 0x29FF9615 EQ PUSH2 0x77A JUMPI DUP1 PUSH4 0x2C668EC1 EQ PUSH2 0x7A0 JUMPI DUP1 PUSH4 0x2D4B0576 EQ PUSH2 0x7CC JUMPI DUP1 PUSH4 0x30455EDE EQ PUSH2 0x80A JUMPI DUP1 PUSH4 0x318BC689 EQ PUSH2 0x829 JUMPI DUP1 PUSH4 0x34C1557D EQ PUSH2 0x61A JUMPI DUP1 PUSH4 0x351A964D EQ PUSH2 0x831 JUMPI DUP1 PUSH4 0x392E53CD EQ PUSH2 0x839 JUMPI DUP1 PUSH4 0x3A05DCC1 EQ PUSH2 0x841 JUMPI DUP1 PUSH4 0x3C5A6E35 EQ PUSH2 0x867 JUMPI DUP1 PUSH4 0x3DE39C11 EQ PUSH2 0x8B5 JUMPI DUP1 PUSH4 0x3E72A262 EQ PUSH2 0x8BD JUMPI DUP1 PUSH4 0x40EB3802 EQ PUSH2 0x8C5 JUMPI DUP1 PUSH4 0x42152873 EQ PUSH2 0x916 JUMPI DUP1 PUSH4 0x42B60B03 EQ PUSH2 0x94A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x176A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x5C4 PUSH2 0x17CD JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x17DE JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x17E4 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x1837 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x183D JUMP JUMPDEST PUSH2 0x62A PUSH2 0x1843 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x5C4 PUSH2 0x1852 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x1858 JUMP JUMPDEST PUSH2 0x65E PUSH2 0x185E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x688 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x186E JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1880 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x1892 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x18B6 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x71B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0x73C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x74E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x76F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x18E7 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x790 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1965 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x7B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x1979 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x7E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x19BE JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x820 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x1A14 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x1A36 JUMP JUMPDEST PUSH2 0x65E PUSH2 0x1A3C JUMP JUMPDEST PUSH2 0x65E PUSH2 0x1A4A JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x857 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1A53 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x87D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xA0 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0xC0 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x1B13 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x1C55 JUMP JUMPDEST PUSH2 0x65E PUSH2 0x1C5B JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x120 DUP2 LT ISZERO PUSH2 0x8DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xA0 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xC0 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xE0 DUP2 ADD CALLDATALOAD SWAP1 PUSH2 0x100 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x1C6A JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x92C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x40 ADD CALLDATALOAD AND PUSH2 0x1D24 JUMP JUMPDEST PUSH2 0x65E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x960 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1DC6 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x986 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x1DDB JUMP JUMPDEST PUSH2 0x9DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x9B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x1E0E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xA0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x80 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x62A PUSH2 0x22EB JUMP JUMPDEST PUSH2 0xA81 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0xA59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x22FA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP9 DUP10 MSTORE PUSH1 0x20 DUP10 ADD SWAP8 SWAP1 SWAP8 MSTORE DUP8 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x60 DUP8 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP6 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xE0 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH2 0x100 ADD SWAP1 RETURN JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xADA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x23F0 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x2402 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x2408 JUMP JUMPDEST PUSH2 0xB17 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x240E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP8 DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP7 SWAP1 SWAP7 MSTORE DUP7 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x60 DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xE0 ADD SWAP1 RETURN JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0xB65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x244B JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x24F1 JUMP JUMPDEST PUSH2 0x65E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2503 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2518 JUMP JUMPDEST PUSH2 0x9DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xC15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x80 ADD CALLDATALOAD PUSH2 0x252A JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xC55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2622 JUMP JUMPDEST PUSH2 0x65E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xC7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x2705 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x2725 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xCB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x272B JUMP JUMPDEST PUSH2 0x62A PUSH2 0x273D JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xCDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2753 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x2781 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2788 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xD33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x27BC JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2A50 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0xD87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xA0 ADD CALLDATALOAD PUSH2 0x2A7A JUMP JUMPDEST PUSH2 0x62A PUSH2 0x2AF1 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x2B00 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xDDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x2B06 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xDFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x2B2A JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xE2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2DFA JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0xE52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x80 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xA0 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP2 PUSH1 0xC0 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0x2EA5 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xEA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x2F23 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x2F47 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xEDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2F4C JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0xF00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x2F5E JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2FA4 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2FB6 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2FC8 JUMP JUMPDEST PUSH2 0x65E PUSH2 0x2FF2 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0xFA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0x3001 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x32E9 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xFE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x32F9 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x330B JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1011 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x3311 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x103D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x3333 JUMP JUMPDEST PUSH2 0x65E PUSH2 0x33DC JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x33E5 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x107F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x33EB JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x10AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x3408 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x10D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x343B JUMP JUMPDEST PUSH2 0x65E PUSH2 0x3539 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1107 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3542 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x112D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3554 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x3566 JUMP JUMPDEST PUSH2 0x65E PUSH2 0x356C JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1163 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x357A JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x361B JUMP JUMPDEST PUSH2 0x9DC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x11C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x36B6 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x11E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x374E JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x3760 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1215 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3766 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x123B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x80 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x3778 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x127B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x3822 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x12B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3843 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x12D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x386D JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x12F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x387A JUMP JUMPDEST PUSH2 0x1341 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x1311 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x80 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x3896 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1370 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x394D JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x139C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x39A6 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x39B8 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x13CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xA0 ADD CALLDATALOAD PUSH2 0x39BE JUMP JUMPDEST PUSH2 0x65E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3A72 JUMP JUMPDEST PUSH2 0x65E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x143A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3A87 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x1460 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xA0 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xC0 ADD CALLDATALOAD PUSH2 0x3A9B JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x3B2C JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x14B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP2 PUSH1 0x80 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0x3B32 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x3F0A JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1504 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3F10 JUMP JUMPDEST PUSH2 0x62A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x152A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x3F88 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3FAF JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x156D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x4082 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1599 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x40A6 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x15BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x40B8 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x15DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x40DE JUMP JUMPDEST PUSH2 0x65E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x160C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4134 JUMP JUMPDEST PUSH2 0x62A PUSH2 0x4149 JUMP JUMPDEST PUSH2 0x62A PUSH2 0x4158 JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1642 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x4167 JUMP JUMPDEST PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1674 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x41A1 JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x437A JUMP JUMPDEST PUSH2 0x5C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x16AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x80 ADD CALLDATALOAD PUSH2 0x4380 JUMP JUMPDEST PUSH2 0x16F5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x16EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x43F6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x172F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1717 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x175C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x25 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 PUSH2 0x1792 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x17C8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x26 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x17C4 SWAP1 DUP3 SWAP1 PUSH2 0x17BE SWAP1 PUSH3 0xF4240 PUSH2 0x4491 JUMP JUMPDEST SWAP1 PUSH2 0x44EA JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH10 0x4EE2D6D415B85ACEF81 PUSH1 0x20 SHL DUP2 JUMP JUMPDEST PUSH1 0x1B SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x17F3 JUMPI POP PUSH1 0x0 PUSH2 0x1831 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17FE DUP5 PUSH2 0x2DFA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x182C PUSH1 0xA DUP3 SWAP1 EXP PUSH2 0x17BE DUP7 DUP6 PUSH2 0x4491 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2710 DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x14 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x16 SLOAD PUSH4 0x1000000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x23 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2C PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x189A PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x16 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH3 0x10000 MUL PUSH3 0xFF0000 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x18 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1946 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5661756C743A20696E76616C6964206572726F72436F6E74726F6C6C65720000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x30 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x195F SWAP1 DUP4 DUP4 PUSH2 0x5DAC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1831 DUP3 PUSH2 0x1974 DUP5 PUSH2 0x357A JUMP JUMPDEST PUSH2 0x17E4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1985 DUP5 PUSH2 0x3F10 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x19A3 DUP3 PUSH2 0x17BE DUP7 PUSH9 0x327CB2734119D3B7A9 PUSH1 0x1E SHL PUSH2 0x4491 JUMP JUMPDEST PUSH1 0x5 SLOAD SWAP1 SWAP2 POP PUSH2 0x182C SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH2 0x1D24 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 SWAP7 DUP8 SHL DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP6 DUP8 SHL DUP2 AND PUSH1 0x34 DUP4 ADD MSTORE SWAP4 SWAP1 SWAP6 SHL SWAP1 SWAP3 AND PUSH1 0x48 DUP6 ADD MSTORE ISZERO ISZERO PUSH1 0xF8 SHL PUSH1 0x5C DUP5 ADD MSTORE DUP1 MLOAD PUSH1 0x3D DUP2 DUP6 SUB ADD DUP2 MSTORE PUSH1 0x5D SWAP1 SWAP4 ADD SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1A1C PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH2 0x100 MUL PUSH2 0xFF00 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AB8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1ACE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP DUP1 PUSH2 0x1AE1 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x17C8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x22 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x15 SLOAD PUSH2 0x1B0B SWAP1 PUSH2 0x17BE DUP4 DUP6 PUSH2 0x4491 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1B1B PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1B98 JUMPI PUSH1 0x7 SLOAD PUSH2 0x1B49 SWAP1 PUSH1 0x1 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH1 0x1B DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x3AD8AA4F87544323A9D1E5DD902F40C356527A7955687113DB5F9A85AD579DC1 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x15 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x22 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1BBF SWAP1 DUP3 SWAP1 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x1D DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP13 SWAP1 SSTORE PUSH1 0x22 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP12 SWAP1 SSTORE PUSH1 0x1E DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP11 SWAP1 SSTORE PUSH1 0x24 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP10 SWAP1 SSTORE PUSH1 0x1F DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD DUP3 AND DUP10 ISZERO ISZERO OR SWAP1 SSTORE SWAP2 DUP1 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND DUP5 ISZERO ISZERO OR SWAP1 SSTORE SWAP1 POP PUSH2 0x1C3E DUP2 DUP8 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x15 SSTORE PUSH2 0x1C4A DUP9 PUSH2 0x3F10 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x17 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x1C72 PUSH2 0x4529 JUMP JUMPDEST PUSH2 0x1C82 PUSH2 0x1F4 DUP11 GT ISZERO PUSH1 0x3 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x1C92 PUSH2 0x1F4 DUP10 GT ISZERO PUSH1 0x4 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x1CA2 PUSH2 0x1F4 DUP9 GT ISZERO PUSH1 0x5 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x1CB2 PUSH2 0x1F4 DUP8 GT ISZERO PUSH1 0x6 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x1CC2 PUSH2 0x1F4 DUP7 GT ISZERO PUSH1 0x7 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x1CD2 PUSH2 0x1F4 DUP6 GT ISZERO PUSH1 0x8 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x1CED PUSH10 0x4EE2D6D415B85ACEF81 PUSH1 0x20 SHL DUP5 GT ISZERO PUSH1 0x9 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0xA SWAP9 SWAP1 SWAP9 SSTORE PUSH1 0xB SWAP7 SWAP1 SWAP7 SSTORE PUSH1 0xC SWAP5 SWAP1 SWAP5 SSTORE PUSH1 0xD SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0xE SSTORE PUSH1 0xF SSTORE PUSH1 0x9 SSTORE PUSH1 0x10 SSTORE PUSH1 0x11 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ PUSH2 0x1D5C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1D5F JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0x5 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ PUSH2 0x1D98 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1D9B JUMP JUMPDEST PUSH1 0x12 JUMPDEST SWAP1 POP PUSH2 0x1DBA DUP3 PUSH1 0xA EXP PUSH2 0x17BE DUP4 PUSH1 0xA EXP DUP10 PUSH2 0x4491 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1F PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x1DE3 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1E1F DUP8 DUP8 DUP8 DUP8 PUSH2 0x19BE JUMP JUMPDEST SWAP1 POP PUSH2 0x1E29 PUSH2 0x5E2A JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2B PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SWAP1 SWAP2 ADD SLOAD PUSH1 0xC0 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP3 PUSH2 0x1E9D SWAP3 DUP10 SWAP3 SWAP1 SWAP2 SWAP1 DUP10 SWAP1 PUSH2 0x252A JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x1EF2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5E7D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0x1 SLOAD PUSH2 0x1F0E SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1C PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x1F16 PUSH2 0x468A JUMP JUMPDEST PUSH2 0x1F1F DUP6 PUSH2 0x46A6 JUMP JUMPDEST PUSH2 0x1F2A DUP5 DUP5 DUP4 PUSH2 0x4709 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x4EAE147D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP8 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP7 SWAP1 MSTORE DUP5 ISZERO ISZERO PUSH1 0x84 DUP4 ADD MSTORE SWAP2 MLOAD PUSH4 0x1000000 SWAP1 SWAP4 DIV SWAP1 SWAP2 AND SWAP2 PUSH4 0x9D5C28FA SWAP2 PUSH1 0xA4 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FB2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1FC0 DUP5 DUP5 PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FCE DUP7 DUP7 DUP7 DUP6 PUSH2 0x19BE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP DUP4 PUSH2 0x1FF2 JUMPI PUSH2 0x1FED DUP7 PUSH2 0x2DFA JUMP JUMPDEST PUSH2 0x1FFB JUMP JUMPDEST PUSH2 0x1FFB DUP7 PUSH2 0x3F10 JUMP JUMPDEST DUP3 SLOAD SWAP1 SWAP2 POP PUSH2 0x200C JUMPI PUSH1 0x2 DUP3 ADD DUP2 SWAP1 SSTORE JUMPDEST DUP2 SLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x201C JUMPI POP PUSH1 0x0 DUP6 GT JUMPDEST ISZERO PUSH2 0x2042 JUMPI PUSH2 0x203C DUP7 DUP4 PUSH1 0x0 ADD SLOAD DUP5 PUSH1 0x2 ADD SLOAD DUP8 DUP6 DUP11 DUP9 PUSH1 0x6 ADD SLOAD PUSH2 0x3A9B JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SSTORE JUMPDEST PUSH1 0x0 PUSH2 0x205B DUP10 DUP10 DUP10 DUP9 DUP11 DUP9 PUSH1 0x0 ADD SLOAD DUP10 PUSH1 0x3 ADD SLOAD PUSH2 0x481E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2068 DUP10 PUSH2 0x48EC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2076 DUP11 DUP4 PUSH2 0x17E4 JUMP JUMPDEST PUSH1 0x1 DUP7 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x2088 SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 DUP7 ADD DUP2 SWAP1 SSTORE PUSH2 0x209D SWAP1 DUP5 GT ISZERO PUSH1 0x1D PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 DUP6 ADD SLOAD PUSH2 0x20AC SWAP1 DUP5 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 DUP7 ADD SSTORE PUSH2 0x20BC DUP11 DUP11 DUP10 PUSH2 0x361B JUMP JUMPDEST PUSH1 0x3 DUP7 ADD SSTORE DUP5 SLOAD PUSH2 0x20CD SWAP1 DUP10 PUSH2 0x4544 JUMP JUMPDEST DUP1 DUP7 SSTORE TIMESTAMP PUSH1 0x6 DUP8 ADD SSTORE PUSH2 0x20E3 SWAP1 ISZERO ISZERO PUSH1 0x1E PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x20F5 DUP6 PUSH1 0x0 ADD SLOAD DUP7 PUSH1 0x1 ADD SLOAD PUSH2 0x4999 JUMP JUMPDEST PUSH2 0x2103 DUP12 DUP12 DUP12 DUP11 PUSH1 0x1 PUSH2 0x3896 JUMP JUMPDEST POP POP PUSH1 0x0 PUSH2 0x2111 DUP12 DUP11 PUSH2 0x33EB JUMP JUMPDEST PUSH1 0x4 DUP8 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x2123 SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x4 DUP8 ADD SSTORE PUSH2 0x2132 DUP12 DUP3 PUSH2 0x49BD JUMP JUMPDEST DUP8 ISZERO PUSH2 0x2177 JUMPI PUSH2 0x214B DUP12 PUSH2 0x2146 DUP12 DUP8 PUSH2 0x4544 JUMP JUMPDEST PUSH2 0x4A5D JUMP JUMPDEST PUSH2 0x2155 DUP12 DUP4 PUSH2 0x4ADC JUMP JUMPDEST PUSH2 0x215F DUP12 DUP5 PUSH2 0x4B5B JUMP JUMPDEST PUSH2 0x2172 DUP12 PUSH2 0x216D DUP14 DUP8 PUSH2 0x3311 JUMP JUMPDEST PUSH2 0x4C73 JUMP JUMPDEST PUSH2 0x21E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x21B4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE PUSH2 0x21D9 JUMP JUMPDEST PUSH2 0x21BF DUP11 DUP7 DUP12 PUSH2 0x3333 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH2 0x21E3 DUP11 DUP11 PUSH2 0x4D46 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP16 AND PUSH1 0x20 DUP4 ADD MSTORE DUP1 DUP15 AND DUP3 DUP5 ADD MSTORE DUP13 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP12 SWAP1 MSTORE DUP10 ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP2 ADD DUP8 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0x2FE68525253654C21998F35787A8D0F361905EF647C854092430AB65F2F15022 SWAP2 DUP2 SWAP1 SUB PUSH2 0x120 ADD SWAP1 LOG1 DUP6 SLOAD PUSH1 0x1 DUP8 ADD SLOAD PUSH1 0x2 DUP9 ADD SLOAD PUSH1 0x3 DUP10 ADD SLOAD PUSH1 0x4 DUP11 ADD SLOAD PUSH1 0x5 DUP12 ADD SLOAD PUSH1 0x40 DUP1 MLOAD DUP15 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP8 SWAP1 SWAP8 MSTORE DUP7 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x60 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP3 ADD DUP8 SWAP1 MSTORE MLOAD PUSH32 0x20853733B590DCE729D9F4628682EBD9A34D2354E72679E66F43A008FC03B773 SWAP2 DUP2 SWAP1 SUB PUSH2 0x100 ADD SWAP1 LOG1 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2314 DUP14 DUP14 DUP14 DUP14 PUSH2 0x19BE JUMP JUMPDEST SWAP1 POP PUSH2 0x231E PUSH2 0x5E2A JUMP JUMPDEST PUSH1 0x2B PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP3 PUSH1 0xA0 ADD MLOAD SGT PUSH2 0x239E JUMPI DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x0 SUB PUSH2 0x23A4 JUMP JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD JUMPDEST SWAP1 POP DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD DUP6 PUSH1 0x80 ADD MLOAD DUP6 PUSH1 0x0 DUP9 PUSH1 0xA0 ADD MLOAD SLT ISZERO DUP9 PUSH1 0xC0 ADD MLOAD SWAP11 POP SWAP11 POP SWAP11 POP SWAP11 POP SWAP11 POP SWAP11 POP SWAP11 POP SWAP11 POP POP POP POP SWAP5 SWAP10 POP SWAP5 SWAP10 POP SWAP5 SWAP10 SWAP2 SWAP7 POP SWAP5 POP JUMP JUMPDEST PUSH1 0x27 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1F4 DUP2 JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2B PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0x5 DUP7 ADD SLOAD PUSH1 0x6 SWAP1 SWAP7 ADD SLOAD SWAP5 SWAP6 SWAP4 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x245A DUP7 DUP7 DUP7 DUP7 PUSH2 0x19BE JUMP JUMPDEST SWAP1 POP PUSH2 0x2464 PUSH2 0x5E2A JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2B PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x24CE SWAP1 ISZERO ISZERO PUSH1 0x25 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD PUSH2 0x24E6 SWAP2 SWAP1 PUSH2 0x17BE SWAP1 PUSH2 0x2710 PUSH2 0x4491 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x21 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x25 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x253B PUSH1 0x0 DUP7 GT PUSH1 0x26 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH2 0x2550 JUMPI PUSH2 0x254B DUP9 PUSH2 0x3F10 JUMP JUMPDEST PUSH2 0x2559 JUMP JUMPDEST PUSH2 0x2559 DUP9 PUSH2 0x2DFA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP8 GT PUSH2 0x2573 JUMPI PUSH2 0x256E DUP3 DUP9 PUSH2 0x459C JUMP JUMPDEST PUSH2 0x257D JUMP JUMPDEST PUSH2 0x257D DUP8 DUP4 PUSH2 0x459C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x258F DUP9 PUSH2 0x17BE DUP12 DUP6 PUSH2 0x4491 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 ISZERO PUSH2 0x25A2 JUMPI POP DUP8 DUP4 GT PUSH2 0x25A7 JUMP JUMPDEST POP DUP3 DUP9 GT JUMPDEST PUSH1 0x0 PUSH2 0x25BE PUSH1 0x10 SLOAD DUP10 PUSH2 0x4544 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST TIMESTAMP GT PUSH2 0x25E2 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x25E5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP DUP2 DUP1 ISZERO PUSH2 0x2608 JUMPI POP PUSH2 0x25F9 DUP12 DUP3 PUSH2 0x4491 JUMP JUMPDEST PUSH2 0x2605 DUP5 PUSH2 0x2710 PUSH2 0x4491 JUMP JUMPDEST GT ISZERO JUMPDEST ISZERO PUSH2 0x2612 JUMPI PUSH1 0x0 SWAP3 POP JUMPDEST POP SWAP11 SWAP1 SWAP10 POP SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x2668 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5E7D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 DUP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2693 SWAP1 PUSH1 0xFF AND PUSH1 0xE PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x269E DUP3 PUSH2 0x48EC JUMP JUMPDEST SWAP1 POP PUSH2 0x26AE PUSH1 0x0 DUP3 GT PUSH1 0xF PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x26B8 DUP3 DUP3 PUSH2 0x4B5B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 0xA5A389190EBF6170A133BDA5C769B77F4D6715B8AA172EC0DDF8473D0B4944BD SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x18 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2E PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH4 0x1000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x18 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH3 0xF4240 DUP2 JUMP JUMPDEST PUSH2 0x2790 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH4 0x1000000 MUL PUSH4 0x1000000 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x2804 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5E7D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x2811 PUSH2 0x4DFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2838 SWAP1 PUSH1 0xFF AND PUSH1 0x13 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x16 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x285F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x48EC JUMP JUMPDEST SWAP1 POP PUSH2 0x286F PUSH1 0x0 DUP3 GT PUSH1 0x14 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x2879 DUP5 DUP6 PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2885 DUP6 DUP4 PUSH2 0x1979 JUMP JUMPDEST SWAP1 POP PUSH2 0x2895 PUSH1 0x0 DUP3 GT PUSH1 0x15 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x289F DUP6 DUP4 PUSH2 0x4E2D JUMP JUMPDEST PUSH2 0x28A9 DUP6 DUP3 PUSH2 0x4C73 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x9DC29FAC SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x28FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2910 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x5 SLOAD PUSH2 0x292A SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP PUSH2 0x4F0F JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xEB0835BF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH4 0x1000000 SWAP1 DIV SWAP1 SWAP3 AND SWAP2 PUSH4 0xEB0835BF SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2988 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x299C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x29B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x29C3 DUP8 DUP5 DUP5 PUSH2 0x4FAA JUMP JUMPDEST SWAP1 POP PUSH2 0x29D3 PUSH1 0x0 DUP3 GT PUSH1 0x16 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x29DE DUP8 DUP3 DUP9 PUSH2 0x5072 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND DUP3 MSTORE DUP10 AND PUSH1 0x20 DUP3 ADD MSTORE DUP1 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0xD732B7828FA6CEE72C285EAC756FC66A7477E3DC22E22E7C432F1C265D40B483 SWAP2 DUP2 SWAP1 SUB PUSH1 0xA0 ADD SWAP1 LOG1 PUSH1 0x16 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x0 SSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2A58 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2A82 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH2 0x2A96 SWAP2 PUSH1 0xFF SWAP1 SWAP2 AND ISZERO SWAP1 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0xFF NOT AND DUP2 OR SWAP1 SSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP9 DUP10 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x5 DUP1 SLOAD DUP3 AND SWAP7 DUP9 AND SWAP7 SWAP1 SWAP7 OR SWAP1 SWAP6 SSTORE PUSH1 0x4 DUP1 SLOAD SWAP1 SWAP6 AND SWAP4 SWAP1 SWAP6 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x9 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x13 SSTORE PUSH1 0x14 SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2B0E PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH3 0x10000 MUL PUSH3 0xFF0000 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x2B72 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5E7D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x2B7F PUSH2 0x4DFE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2BA6 SWAP1 PUSH1 0xFF AND PUSH1 0x10 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x16 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE PUSH1 0x0 PUSH2 0x2BC0 DUP5 PUSH2 0x48EC JUMP JUMPDEST SWAP1 POP PUSH2 0x2BD0 PUSH1 0x0 DUP3 GT PUSH1 0x11 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x2BDA DUP5 DUP6 PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BE5 DUP6 PUSH2 0x2DFA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2C03 PUSH9 0x327CB2734119D3B7A9 PUSH1 0x1E SHL PUSH2 0x17BE DUP6 DUP6 PUSH2 0x4491 JUMP JUMPDEST PUSH1 0x5 SLOAD SWAP1 SWAP2 POP PUSH2 0x2C1F SWAP1 DUP3 SWAP1 DUP9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1D24 JUMP JUMPDEST SWAP1 POP PUSH2 0x2C2F PUSH1 0x0 DUP3 GT PUSH1 0x12 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x256F6EE3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH4 0x1000000 SWAP1 DIV SWAP1 SWAP3 AND SWAP2 PUSH4 0x4ADEDDC6 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2CA1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2CB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x2CC8 DUP9 DUP7 DUP5 PUSH2 0x4FAA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2CE6 PUSH9 0x327CB2734119D3B7A9 PUSH1 0x1E SHL PUSH2 0x17BE DUP5 DUP9 PUSH2 0x4491 JUMP JUMPDEST PUSH1 0x5 SLOAD SWAP1 SWAP2 POP PUSH2 0x2D02 SWAP1 DUP3 SWAP1 DUP12 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1D24 JUMP JUMPDEST SWAP1 POP PUSH2 0x2D0E DUP10 DUP3 PUSH2 0x5119 JUMP JUMPDEST PUSH2 0x2D18 DUP10 DUP4 PUSH2 0x4B5B JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x40C10F19 SWAP2 PUSH1 0x44 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2D81 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP14 AND DUP3 MSTORE DUP14 AND PUSH1 0x20 DUP3 ADD MSTORE DUP1 DUP3 ADD DUP11 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0xAB4C77C74CD32C85F35416CF03E7CE9E2D4387F7B7F2C1F4BF53DAAECF8EA72D SWAP4 POP SWAP1 DUP2 SWAP1 SUB PUSH1 0xA0 ADD SWAP2 POP LOG1 PUSH1 0x16 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x0 SSTORE SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x16 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x17E1D385 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP6 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x0 PUSH1 0x24 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xFF DUP1 DUP6 AND ISZERO ISZERO PUSH1 0x44 DUP5 ADD MSTORE PUSH2 0x100 SWAP1 SWAP5 DIV SWAP1 SWAP4 AND ISZERO ISZERO PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP1 SWAP3 AND SWAP2 PUSH4 0x2FC3A70A SWAP2 PUSH1 0x84 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E87 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2E9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x2EED JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5E7D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x2EFA PUSH2 0x468A JUMP JUMPDEST PUSH2 0x2F03 DUP9 PUSH2 0x46A6 JUMP JUMPDEST PUSH2 0x2F12 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x51D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2F2B PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x27 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x12 DUP2 JUMP JUMPDEST PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2F66 PUSH2 0x4529 JUMP JUMPDEST PUSH2 0x2F76 PUSH2 0xE10 DUP5 LT ISZERO PUSH1 0xA PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x2F86 PUSH2 0x2710 DUP4 GT ISZERO PUSH1 0xB PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x2F96 PUSH2 0x2710 DUP3 GT ISZERO PUSH1 0xC PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x12 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x13 SSTORE PUSH1 0x14 SSTORE JUMP JUMPDEST PUSH1 0x2D PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1D PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2FD0 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x16 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x3049 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5E7D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0x1 SLOAD PUSH2 0x3064 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH1 0x17 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x308B SWAP1 PUSH1 0xFF AND PUSH1 0x18 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x30B2 SWAP1 PUSH1 0xFF AND PUSH1 0x19 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x30D2 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH1 0x1A PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x16 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE PUSH2 0x30EB DUP5 DUP1 PUSH2 0x41A1 JUMP JUMPDEST PUSH2 0x30F5 DUP4 DUP5 PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3100 DUP6 PUSH2 0x48EC JUMP JUMPDEST SWAP1 POP PUSH2 0x3110 PUSH1 0x0 DUP3 GT PUSH1 0x1B PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x311B DUP7 PUSH2 0x2DFA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3128 DUP7 PUSH2 0x3F10 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x313A DUP3 PUSH2 0x17BE DUP7 DUP7 PUSH2 0x4491 JUMP JUMPDEST SWAP1 POP PUSH2 0x3147 DUP2 DUP10 DUP10 PUSH2 0x1D24 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3165 PUSH9 0x327CB2734119D3B7A9 PUSH1 0x1E SHL PUSH2 0x17BE DUP8 DUP8 PUSH2 0x4491 JUMP JUMPDEST PUSH1 0x5 SLOAD SWAP1 SWAP2 POP PUSH2 0x3181 SWAP1 DUP3 SWAP1 DUP12 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1D24 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x6D099C0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP13 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD SWAP4 SWAP5 POP PUSH1 0x0 SWAP4 PUSH4 0x1000000 SWAP1 SWAP4 DIV SWAP1 SWAP2 AND SWAP2 PUSH4 0xDA133816 SWAP2 PUSH1 0x64 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x31EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x31FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3215 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x3226 DUP11 DUP6 DUP5 PUSH2 0x4FAA JUMP JUMPDEST SWAP1 POP PUSH2 0x3232 DUP12 DUP5 PUSH2 0x5119 JUMP JUMPDEST PUSH2 0x323C DUP11 DUP5 PUSH2 0x4E2D JUMP JUMPDEST PUSH2 0x3246 DUP12 DUP9 PUSH2 0x4B5B JUMP JUMPDEST PUSH2 0x3250 DUP11 DUP6 PUSH2 0x4C73 JUMP JUMPDEST PUSH2 0x3259 DUP11 PUSH2 0x569A JUMP JUMPDEST PUSH2 0x3264 DUP11 DUP3 DUP12 PUSH2 0x5072 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP13 AND DUP3 MSTORE DUP1 DUP15 AND PUSH1 0x20 DUP4 ADD MSTORE DUP13 AND DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0x874B2D545CB271CDBDA4E093020C452328B24AF12382ED62C4D00F5C26709DB SWAP2 DUP2 SWAP1 SUB PUSH1 0xE0 ADD SWAP1 LOG1 PUSH1 0x16 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x0 SSTORE SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH9 0x327CB2734119D3B7A9 PUSH1 0x1E SHL DUP2 JUMP JUMPDEST PUSH1 0x2F PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x12 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3320 JUMPI POP PUSH1 0x0 PUSH2 0x1831 JUMP JUMPDEST PUSH2 0x1DBF DUP4 DUP4 PUSH2 0x332E DUP7 PUSH2 0x3F10 JUMP JUMPDEST PUSH2 0x4167 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x2E SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD DUP3 DUP6 DUP3 GT PUSH2 0x336E JUMPI PUSH2 0x3369 DUP7 DUP4 PUSH2 0x459C JUMP JUMPDEST PUSH2 0x3378 JUMP JUMPDEST PUSH2 0x3378 DUP3 DUP8 PUSH2 0x459C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x338A DUP4 PUSH2 0x17BE DUP7 DUP6 PUSH2 0x4491 JUMP JUMPDEST SWAP1 POP DUP7 DUP4 GT PUSH1 0x0 PUSH2 0x339B DUP7 DUP10 PUSH2 0x4544 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH2 0x33B3 JUMPI PUSH2 0x33AE DUP3 DUP6 PUSH2 0x4544 JUMP JUMPDEST PUSH2 0x33BD JUMP JUMPDEST PUSH2 0x33BD DUP3 DUP6 PUSH2 0x459C JUMP JUMPDEST SWAP1 POP PUSH2 0x33CD DUP2 PUSH2 0x17BE DUP13 DUP6 PUSH2 0x4491 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x33FA JUMPI POP PUSH1 0x0 PUSH2 0x1831 JUMP JUMPDEST PUSH2 0x1DBF DUP4 DUP4 PUSH2 0x332E DUP7 PUSH2 0x2DFA JUMP JUMPDEST PUSH2 0x3410 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 TIMESTAMP SWAP2 PUSH2 0x3464 SWAP2 PUSH2 0x4544 JUMP JUMPDEST GT ISZERO PUSH2 0x3472 JUMPI POP PUSH1 0x0 PUSH2 0x17C8 JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2A PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x349F SWAP2 PUSH2 0x17BE SWAP1 TIMESTAMP SWAP1 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x25 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP1 PUSH2 0x34CB JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x17C8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1F PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x34F3 JUMPI PUSH1 0x13 SLOAD PUSH2 0x34F7 JUMP JUMPDEST PUSH1 0x14 SLOAD JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x26 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x3530 SWAP1 DUP4 SWAP1 PUSH2 0x17BE SWAP1 DUP7 SWAP1 PUSH2 0x352A SWAP1 DUP7 SWAP1 PUSH2 0x4491 JUMP JUMPDEST SWAP1 PUSH2 0x4491 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x16 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x22 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x24 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x16 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1F PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x35BA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x25 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x17C8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x28 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x35DE SWAP1 DUP5 SWAP1 PUSH2 0x3311 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x26 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x25 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH2 0x17C4 SWAP2 PUSH2 0x3615 SWAP1 DUP5 SWAP1 PUSH2 0x4544 JUMP JUMPDEST SWAP1 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xB1CC53AB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 ISZERO ISZERO PUSH1 0x44 DUP4 ADD MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH4 0x1000000 SWAP1 DIV SWAP1 SWAP3 AND SWAP2 PUSH4 0xB1CC53AB SWAP2 PUSH1 0x64 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3682 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3696 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x36AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2D PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 DUP1 PUSH2 0x36E3 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x3749 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36EE DUP6 PUSH2 0x3F10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2E PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP DUP3 DUP3 GT PUSH2 0x3720 JUMPI PUSH2 0x371B DUP4 DUP4 PUSH2 0x459C JUMP JUMPDEST PUSH2 0x372A JUMP JUMPDEST PUSH2 0x372A DUP3 DUP5 PUSH2 0x459C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x373C DUP4 PUSH2 0x17BE DUP8 DUP6 PUSH2 0x4491 JUMP JUMPDEST SWAP4 SWAP1 SWAP3 GT SWAP6 POP SWAP2 SWAP4 POP POP POP POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x26 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x13 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x29 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xC7E074C3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP3 ADD DUP8 SWAP1 MSTORE PUSH1 0x64 DUP3 ADD DUP7 SWAP1 MSTORE DUP5 ISZERO ISZERO PUSH1 0x84 DUP4 ADD MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH4 0x1000000 SWAP1 DIV SWAP1 SWAP3 AND SWAP2 PUSH4 0xC7E074C3 SWAP2 PUSH1 0xA4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3800 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3816 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x382A PUSH2 0x4529 JUMP JUMPDEST PUSH2 0x383E PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP5 DUP4 PUSH2 0x570F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x384B PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x3875 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x17 SSTORE JUMP JUMPDEST PUSH2 0x3882 PUSH2 0x4529 JUMP JUMPDEST PUSH2 0x3891 PUSH2 0x2710 DUP3 GT PUSH1 0x2 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x8 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xD54D5A9F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP8 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE DUP6 ISZERO ISZERO PUSH1 0x64 DUP4 ADD MSTORE DUP5 ISZERO ISZERO PUSH1 0x84 DUP4 ADD MSTORE DUP3 MLOAD PUSH1 0x0 SWAP5 DUP6 SWAP5 PUSH4 0x1000000 SWAP1 SWAP2 DIV SWAP1 SWAP3 AND SWAP3 PUSH4 0xD54D5A9F SWAP3 PUSH1 0xA4 DUP1 DUP4 ADD SWAP4 SWAP2 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x390C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3920 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3936 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP9 SWAP1 SWAP8 POP SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3955 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x23 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 DUP3 GT ISZERO PUSH2 0x398F JUMPI PUSH2 0x3989 DUP4 PUSH2 0x3984 DUP5 DUP5 PUSH2 0x459C JUMP JUMPDEST PUSH2 0x5119 JUMP JUMPDEST POP PUSH2 0x39A2 JUMP JUMPDEST PUSH2 0x383E DUP4 PUSH2 0x399D DUP4 DUP6 PUSH2 0x459C JUMP JUMPDEST PUSH2 0x4E2D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x2A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x369D9493 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP9 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP8 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE DUP7 ISZERO ISZERO PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x84 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0xA4 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH4 0x1000000 SWAP1 DIV SWAP1 SWAP3 AND SWAP2 PUSH4 0xDA76524C SWAP2 PUSH1 0xC4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3A4F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3A65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x20 DUP1 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3AAD DUP11 DUP11 DUP11 DUP11 DUP9 PUSH2 0x252A JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH2 0x3ABE DUP11 DUP8 PUSH2 0x4544 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP9 ISZERO PUSH2 0x3AED JUMPI DUP4 PUSH2 0x3ADC JUMPI PUSH2 0x3AD7 DUP3 DUP5 PUSH2 0x459C JUMP JUMPDEST PUSH2 0x3AE6 JUMP JUMPDEST PUSH2 0x3AE6 DUP3 DUP5 PUSH2 0x4544 JUMP JUMPDEST SWAP1 POP PUSH2 0x3B0E JUMP JUMPDEST DUP4 PUSH2 0x3B01 JUMPI PUSH2 0x3AFC DUP3 DUP5 PUSH2 0x4544 JUMP JUMPDEST PUSH2 0x3B0B JUMP JUMPDEST PUSH2 0x3B0B DUP3 DUP5 PUSH2 0x459C JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x3B1C DUP2 PUSH2 0x17BE DUP11 DUP6 PUSH2 0x4491 JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x15 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x3B78 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5E7D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0x16 SLOAD PUSH4 0x1000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x3BAD JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x3BAD SWAP1 PUSH1 0xFF AND PUSH1 0x22 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x16 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH2 0x3BC1 DUP5 DUP5 PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BCF DUP7 DUP7 DUP7 DUP7 PUSH2 0x19BE JUMP JUMPDEST SWAP1 POP PUSH2 0x3BD9 PUSH2 0x5E2A JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2B PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x3C45 SWAP1 ISZERO ISZERO PUSH1 0x23 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3C56 DUP10 DUP10 DUP10 DUP10 PUSH1 0x0 PUSH2 0x3896 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x3C69 DUP3 PUSH1 0x0 EQ ISZERO PUSH1 0x24 PUSH2 0x45DE JUMP JUMPDEST DUP2 PUSH1 0x2 EQ ISZERO PUSH2 0x3C9E JUMPI PUSH2 0x3C86 DUP10 DUP10 DUP10 PUSH1 0x0 DUP8 PUSH1 0x0 ADD MLOAD DUP12 DUP16 PUSH2 0x51D7 JUMP JUMPDEST POP POP PUSH1 0x16 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE POP PUSH2 0x3EFE SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CAA DUP10 DUP4 PUSH2 0x3311 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x3CD0 SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD SWAP2 DUP3 MSTORE SWAP2 DUP2 ADD DUP5 SWAP1 MSTORE DUP1 DUP3 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0x5D0C0019D3D45FADEB74EFF9D2C9924D146D000AC6BCF3C28BF0AC3C9BAA011A SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 PUSH2 0x3D3B DUP10 DUP6 PUSH1 0x80 ADD MLOAD PUSH2 0x5761 JUMP JUMPDEST DUP7 ISZERO PUSH2 0x3D6A JUMPI PUSH1 0x20 DUP5 ADD MLOAD DUP5 MLOAD PUSH2 0x3D5C SWAP2 DUP12 SWAP2 PUSH2 0x3D57 SWAP2 PUSH2 0x459C JUMP JUMPDEST PUSH2 0x4ADC JUMP JUMPDEST PUSH2 0x3D6A DUP10 PUSH2 0x216D DUP12 DUP6 PUSH2 0x3311 JUMP JUMPDEST PUSH1 0x0 DUP8 PUSH2 0x3D7F JUMPI PUSH2 0x3D7A DUP10 PUSH2 0x3F10 JUMP JUMPDEST PUSH2 0x3D88 JUMP JUMPDEST PUSH2 0x3D88 DUP10 PUSH2 0x2DFA JUMP JUMPDEST SWAP1 POP PUSH32 0x2E1F85A64A2F22CF2F0C42584E7C919ED4ABE8D53675CFF0F62BF1E95A1C676F DUP7 DUP13 DUP13 DUP13 DUP13 DUP11 PUSH1 0x0 ADD MLOAD DUP12 PUSH1 0x20 ADD MLOAD DUP13 PUSH1 0x80 ADD MLOAD DUP14 PUSH1 0xA0 ADD MLOAD DUP11 PUSH1 0x40 MLOAD DUP1 DUP12 DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP11 POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP8 ISZERO DUP1 ISZERO PUSH2 0x3E47 JUMPI POP DUP5 PUSH1 0x20 ADD MLOAD DUP4 LT JUMPDEST ISZERO PUSH2 0x3E75 JUMPI PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x0 SWAP1 PUSH2 0x3E5E SWAP1 DUP6 PUSH2 0x459C JUMP JUMPDEST SWAP1 POP PUSH2 0x3E73 DUP12 PUSH2 0x3E6E DUP14 DUP5 PUSH2 0x3311 JUMP JUMPDEST PUSH2 0x4B5B JUMP JUMPDEST POP JUMPDEST DUP8 PUSH2 0x3E88 JUMPI PUSH2 0x3E88 DUP10 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x5816 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x2B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x2 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x3 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x5 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x6 ADD SSTORE PUSH1 0x9 SLOAD PUSH2 0x3ED4 SWAP1 DUP12 SWAP1 PUSH2 0x216D SWAP1 DUP3 SWAP1 PUSH2 0x3311 JUMP JUMPDEST PUSH2 0x3EEA DUP11 PUSH2 0x3EE4 DUP13 PUSH1 0x9 SLOAD PUSH2 0x3311 JUMP JUMPDEST DUP10 PUSH2 0x5072 JUMP JUMPDEST POP POP PUSH1 0x16 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE POP POP POP POP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x16 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x17E1D385 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP6 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0xFF DUP1 DUP5 AND ISZERO ISZERO PUSH1 0x44 DUP4 ADD MSTORE PUSH2 0x100 SWAP1 SWAP4 DIV SWAP1 SWAP3 AND ISZERO ISZERO PUSH1 0x64 DUP4 ADD MSTORE MLOAD PUSH1 0x0 SWAP4 SWAP1 SWAP3 AND SWAP2 PUSH4 0x2FC3A70A SWAP2 PUSH1 0x84 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1B DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3F95 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x3FB7 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x3FDE SWAP1 PUSH1 0xFF AND PUSH1 0xD PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x22 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x15 SLOAD PUSH2 0x4003 SWAP2 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x15 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1D DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x22 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x1E DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x24 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x1F DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD DUP3 AND SWAP1 SSTORE SWAP2 DUP1 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x7 SLOAD PUSH2 0x407C SWAP1 PUSH1 0x1 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x7 SSTORE POP JUMP JUMPDEST PUSH2 0x408A PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x28 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x40C0 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x16 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH4 0x1000000 MUL PUSH4 0xFF000000 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x40E8 PUSH2 0x4529 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x4110 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1831 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2C PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x1DBF DUP5 DUP3 DUP6 PUSH2 0x5072 JUMP JUMPDEST PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x4176 JUMPI POP PUSH1 0x0 PUSH2 0x1DBF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x3530 DUP4 PUSH2 0x17BE DUP7 PUSH1 0xA DUP6 SWAP1 EXP PUSH2 0x4491 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xFBFDED6D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH4 0x1000000 SWAP1 DIV SWAP1 SWAP3 AND SWAP2 PUSH4 0xFBFDED6D SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP8 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4201 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4215 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x422B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP DUP1 PUSH2 0x423A JUMPI POP PUSH2 0x39A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4287 JUMPI PUSH1 0x12 SLOAD PUSH2 0x4268 SWAP1 PUSH2 0x352A TIMESTAMP DUP3 PUSH2 0x44EA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE POP PUSH2 0x39A2 JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP SWAP2 PUSH2 0x42AF SWAP2 SWAP1 PUSH2 0x4544 JUMP JUMPDEST GT ISZERO PUSH2 0x42BB JUMPI POP PUSH2 0x39A2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42C6 DUP5 PUSH2 0x343B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x29 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x42EC SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x29 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x12 SLOAD PUSH2 0x4316 SWAP1 PUSH2 0x352A TIMESTAMP DUP3 PUSH2 0x44EA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2A PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 0x29 DUP2 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 SLOAD DUP4 MLOAD SWAP3 DUP4 MSTORE SWAP1 DUP3 ADD MSTORE DUP2 MLOAD PUSH32 0xA146FC154E1913322E9817D49F0D5C37466C24326E15DE10E739A948BE815EAB SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH2 0xE10 DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xFDAF6AC3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP8 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE DUP6 ISZERO ISZERO PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x84 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH4 0x1000000 SWAP1 DIV SWAP1 SWAP3 AND SWAP2 PUSH4 0xFDAF6AC3 SWAP2 PUSH1 0xA4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x30 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP7 AND ISZERO MUL ADD SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 DIV SWAP2 DUP3 ADD DUP5 SWAP1 DIV DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x4489 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x445E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4489 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x446C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x44A0 JUMPI POP PUSH1 0x0 PUSH2 0x1831 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x44AD JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1DBF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5E9D PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1DBF DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH26 0x536166654D6174683A206469766973696F6E206279207A65726F PUSH1 0x30 SHL DUP2 MSTORE POP PUSH2 0x587E JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x4542 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH1 0x35 PUSH2 0x45DE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1DBF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH27 0x536166654D6174683A206164646974696F6E206F766572666C6F77 PUSH1 0x28 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1DBF DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH2 0x5920 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x30 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP3 PUSH2 0x383E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD SWAP1 DUP2 MSTORE DUP3 SLOAD PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP5 AND ISZERO MUL ADD SWAP1 SWAP2 AND DIV PUSH1 0x24 DUP4 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP2 DUP3 SWAP2 PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 DUP5 SWAP1 DUP1 ISZERO PUSH2 0x467B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4650 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x467B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x465E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x17 SLOAD PUSH2 0x4696 JUMPI PUSH2 0x4542 JUMP JUMPDEST PUSH2 0x4542 PUSH1 0x17 SLOAD GASPRICE GT ISZERO PUSH1 0x37 PUSH2 0x45DE JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ ISZERO PUSH2 0x46BC JUMPI PUSH2 0x4706 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x46D4 JUMPI PUSH2 0x4706 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x18 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x4706 SWAP1 PUSH1 0xFF AND PUSH1 0x29 PUSH2 0x45DE JUMP JUMPDEST POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4782 JUMPI PUSH2 0x472E DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x2A PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4755 SWAP1 PUSH1 0xFF AND PUSH1 0x2B PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x477D SWAP1 PUSH1 0xFF AND ISZERO PUSH1 0x2C PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x383E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x47A9 SWAP1 PUSH1 0xFF AND PUSH1 0x2D PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x47D0 SWAP1 PUSH1 0xFF AND PUSH1 0x2E PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x47F8 SWAP1 PUSH1 0xFF AND ISZERO PUSH1 0x2F PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x383E SWAP1 PUSH1 0xFF AND PUSH1 0x30 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x482E DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x4380 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4840 DUP11 DUP11 DUP11 DUP11 DUP10 DUP10 PUSH2 0x39BE JUMP JUMPDEST SWAP1 POP PUSH2 0x484C DUP3 DUP3 PUSH2 0x4544 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x485A DUP11 DUP5 PUSH2 0x3311 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x4880 SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD SWAP2 DUP3 MSTORE SWAP2 DUP2 ADD DUP6 SWAP1 MSTORE DUP1 DUP3 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0x5D0C0019D3D45FADEB74EFF9D2C9924D146D000AC6BCF3C28BF0AC3C9BAA011A SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x21 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 DUP6 SWAP4 SWAP2 SWAP3 PUSH4 0x70A08231 SWAP3 PUSH1 0x24 DUP1 DUP4 ADD SWAP4 SWAP2 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4946 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x495A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4970 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE SWAP1 POP PUSH2 0x1B0B DUP2 DUP4 PUSH2 0x459C JUMP JUMPDEST DUP2 PUSH2 0x49AF JUMPI PUSH2 0x49AA DUP2 ISZERO PUSH1 0x27 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x39A2 JUMP JUMPDEST PUSH2 0x39A2 DUP2 DUP4 LT ISZERO PUSH1 0x28 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x26 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x49E0 SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x26 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP6 SWAP1 SSTORE PUSH1 0x25 DUP3 MSTORE SWAP1 SWAP3 KECCAK256 SLOAD SWAP2 MSTORE PUSH2 0x4A15 SWAP2 GT ISZERO PUSH1 0x34 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 0xAA5649D82F5462BE9D19B0F2B31A59B2259950A6076550BAC9F3A1C07DB9F66D SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x28 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4A80 SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x28 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD SWAP2 DUP3 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 0xD9D4761F75E0D0103B5CBEAB941EEB443D7A56A35B5BAF2A0787C03F03F4E474 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x28 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4AFF SWAP1 DUP3 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x28 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD SWAP2 DUP3 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 0x34E07158B9DB50DF5613E591C44EA2EBC82834EFF4A4DC3A46E000E608261D68 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x25 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4B7E SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x25 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP4 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP4 MLOAD SWAP2 SWAP4 PUSH4 0x70A08231 SWAP3 PUSH1 0x24 DUP1 DUP4 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4BD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4BE8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4BFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x25 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x4C2A SWAP1 DUP3 LT ISZERO PUSH1 0x31 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE DUP2 MLOAD PUSH32 0x976177FBE09A15E5E43F848844963A42B41EF919EF17FF21A17A5421DE8F4737 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH26 0x15985D5B1D0E881C1BDBDB105B5BDD5B9D08195E18D959591959 PUSH1 0x32 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x25 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0x4CCB SWAP2 DUP4 SWAP1 PUSH2 0x5920 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x25 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x26 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x4CFE SWAP2 LT ISZERO PUSH1 0x32 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 0x112726233FBEAEED0F5B1DBA5CB0B2B81883DEE49FB35FF99FD98ED9F6D31EB0 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4D69 SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x2F SWAP1 MSTORE KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x383E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x383E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH26 0x15985D5B1D0E881B585E081CDA1BDC9D1CC8195E18D959591959 PUSH1 0x32 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x16 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x4542 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4542 SWAP1 PUSH1 0xFF AND PUSH1 0x36 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x23 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 GT PUSH2 0x4EA8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x23 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE DUP2 MLOAD SWAP3 DUP4 MSTORE DUP3 ADD DUP4 SWAP1 MSTORE DUP1 MLOAD PUSH32 0xE1E812596AAC93A06ECC4CA627014D18E30F5C33B825160CC9D5C0BA61E45227 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP PUSH2 0x39A2 JUMP JUMPDEST PUSH2 0x4EB2 DUP2 DUP4 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x23 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD SWAP2 DUP3 MSTORE SWAP2 DUP2 ADD DUP5 SWAP1 MSTORE DUP2 MLOAD PUSH32 0xE1E812596AAC93A06ECC4CA627014D18E30F5C33B825160CC9D5C0BA61E45227 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4F5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4F72 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4F88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4FC7 PUSH2 0x2710 PUSH2 0x17BE PUSH2 0x4FC0 DUP3 DUP8 PUSH2 0x459C JUMP JUMPDEST DUP8 SWAP1 PUSH2 0x4491 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4FD5 DUP6 DUP4 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x4FFB SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH32 0x47CD9DDA0E50CE30BCAAACD0488452B596221C07AC402A581CFAE4D3933CAC2B DUP7 PUSH2 0x5040 DUP2 DUP5 PUSH2 0x17E4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 DUP2 ADD DUP5 SWAP1 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x5086 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP3 DUP5 PUSH2 0x570F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x50CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x50E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x50F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x21 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x23 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x513C SWAP1 DUP3 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x23 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x24 SWAP1 MSTORE KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x518E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x23 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x518E SWAP1 DUP3 LT ISZERO PUSH1 0x33 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE DUP2 MLOAD PUSH32 0x64243679A443432E2293343B77D411FF6144370404618F00CA0D2025D9CA9882 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x81D11A23 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP10 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP9 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0x84 DUP3 ADD DUP8 SWAP1 MSTORE DUP6 ISZERO ISZERO PUSH1 0xA4 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0xC4 DUP4 ADD MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 PUSH4 0x1000000 SWAP1 DIV SWAP1 SWAP3 AND SWAP2 PUSH4 0x81D11A23 SWAP2 PUSH1 0xE4 DUP1 DUP3 ADD SWAP3 DUP7 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x525B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x526F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x527D DUP8 DUP8 PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x528B DUP10 DUP10 DUP10 DUP8 PUSH2 0x19BE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2B PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x52AC SWAP1 ISZERO ISZERO PUSH1 0x1F PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x52BE DUP7 DUP3 PUSH1 0x0 ADD SLOAD LT ISZERO PUSH1 0x20 PUSH2 0x45DE JUMP JUMPDEST PUSH2 0x52D0 DUP8 DUP3 PUSH1 0x1 ADD SLOAD LT ISZERO PUSH1 0x21 PUSH2 0x45DE JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x0 SWAP2 PUSH2 0x52ED SWAP2 PUSH2 0x17BE SWAP1 DUP12 PUSH2 0x4491 JUMP JUMPDEST PUSH1 0x4 DUP5 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x52FF SWAP1 DUP3 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x4 DUP5 ADD SSTORE PUSH2 0x530E DUP12 DUP3 PUSH2 0x5761 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x5320 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 PUSH2 0x597A JUMP JUMPDEST DUP6 SLOAD SWAP2 SWAP4 POP SWAP2 POP DUP10 EQ PUSH2 0x54C4 JUMPI PUSH2 0x5338 DUP13 DUP13 DUP11 PUSH2 0x361B JUMP JUMPDEST PUSH1 0x3 DUP6 ADD SSTORE DUP4 SLOAD PUSH2 0x5349 SWAP1 DUP11 PUSH2 0x459C JUMP JUMPDEST DUP1 DUP6 SSTORE PUSH1 0x1 DUP6 ADD SLOAD PUSH2 0x535B SWAP2 SWAP1 PUSH2 0x4999 JUMP JUMPDEST PUSH2 0x5369 DUP14 DUP14 DUP14 DUP12 PUSH1 0x1 PUSH2 0x3896 JUMP JUMPDEST POP POP DUP8 ISZERO PUSH2 0x5396 JUMPI PUSH2 0x538C DUP13 PUSH2 0x2146 DUP7 PUSH1 0x1 ADD SLOAD DUP7 PUSH2 0x459C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x5396 DUP13 DUP11 PUSH2 0x4ADC JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH2 0x53AB JUMPI PUSH2 0x53A6 DUP13 PUSH2 0x3F10 JUMP JUMPDEST PUSH2 0x53B4 JUMP JUMPDEST PUSH2 0x53B4 DUP13 PUSH2 0x2DFA JUMP JUMPDEST SWAP1 POP PUSH32 0x93D75D64D1F84FC6F430A64FC578BDD4C1E090E90EA2D51773E626D19DE56D30 DUP7 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP9 PUSH2 0x53E9 DUP13 DUP13 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP10 DUP11 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP9 DUP10 AND PUSH1 0x20 DUP12 ADD MSTORE SWAP7 DUP9 AND DUP10 DUP9 ADD MSTORE SWAP5 SWAP1 SWAP7 AND PUSH1 0x60 DUP9 ADD MSTORE PUSH1 0x80 DUP8 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xA0 DUP7 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x100 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH2 0x120 ADD SWAP1 LOG1 DUP5 SLOAD PUSH1 0x1 DUP7 ADD SLOAD PUSH1 0x2 DUP8 ADD SLOAD PUSH1 0x3 DUP9 ADD SLOAD PUSH1 0x4 DUP10 ADD SLOAD PUSH1 0x5 DUP11 ADD SLOAD PUSH1 0x40 DUP1 MLOAD DUP14 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP8 SWAP1 SWAP8 MSTORE DUP7 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x60 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP3 ADD DUP4 SWAP1 MSTORE MLOAD PUSH32 0x20853733B590DCE729D9F4628682EBD9A34D2354E72679E66F43A008FC03B773 SWAP2 DUP2 SWAP1 SUB PUSH2 0x100 ADD SWAP1 LOG1 POP PUSH2 0x5638 JUMP JUMPDEST DUP8 ISZERO PUSH2 0x54DE JUMPI PUSH2 0x54D4 DUP13 DUP5 PUSH2 0x4A5D JUMP JUMPDEST PUSH2 0x54DE DUP13 DUP11 PUSH2 0x4ADC JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH2 0x54F3 JUMPI PUSH2 0x54EE DUP13 PUSH2 0x3F10 JUMP JUMPDEST PUSH2 0x54FC JUMP JUMPDEST PUSH2 0x54FC DUP13 PUSH2 0x2DFA JUMP JUMPDEST SWAP1 POP PUSH32 0x93D75D64D1F84FC6F430A64FC578BDD4C1E090E90EA2D51773E626D19DE56D30 DUP7 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP9 PUSH2 0x5531 DUP13 DUP13 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP10 DUP11 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP9 DUP10 AND PUSH1 0x20 DUP12 ADD MSTORE SWAP7 DUP9 AND DUP10 DUP9 ADD MSTORE SWAP5 SWAP1 SWAP7 AND PUSH1 0x60 DUP9 ADD MSTORE PUSH1 0x80 DUP8 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xA0 DUP7 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x100 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH2 0x120 ADD SWAP1 LOG1 DUP5 SLOAD PUSH1 0x1 DUP7 ADD SLOAD PUSH1 0x2 DUP8 ADD SLOAD PUSH1 0x3 DUP9 ADD SLOAD PUSH1 0x4 DUP10 ADD SLOAD PUSH1 0x5 DUP11 ADD SLOAD PUSH1 0x40 DUP1 MLOAD DUP14 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP8 SWAP1 SWAP8 MSTORE DUP7 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x60 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE MLOAD PUSH32 0x73AF1D417D82C240FDB6D319B34AD884487C6BF2845D98980CC52AD9171CB455 SWAP2 DUP2 SWAP1 SUB PUSH1 0xE0 ADD SWAP1 LOG1 POP PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x2B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x2 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x3 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x5 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x6 ADD SSTORE JUMPDEST DUP8 PUSH2 0x5647 JUMPI PUSH2 0x5647 DUP12 DUP11 PUSH2 0x5816 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x5687 JUMPI DUP8 ISZERO PUSH2 0x5661 JUMPI PUSH2 0x5661 DUP13 PUSH2 0x216D DUP15 DUP6 PUSH2 0x3311 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x566D DUP14 DUP4 PUSH2 0x3311 JUMP JUMPDEST SWAP1 POP PUSH2 0x567A DUP14 DUP3 DUP11 PUSH2 0x5072 JUMP JUMPDEST SWAP6 POP PUSH2 0x24E6 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x27 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x25 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD LT ISZERO PUSH2 0x4706 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH26 0x2B30BAB63A1D103837B7B620B6B7BAB73A101E10313AB33332B9 PUSH1 0x31 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x383E SWAP1 DUP5 SWAP1 PUSH2 0x5B74 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH27 0x5661756C743A20696E73756666696369656E742072657365727665 PUSH1 0x28 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x26 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0x57BA SWAP2 DUP4 SWAP1 PUSH2 0x5920 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x26 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD SWAP2 DUP3 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 0x533CB5ED32BE6A90284E96B5747A1BFC2D38FDB5768A6B5F67FF7D62144ED67B SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 DUP3 GT ISZERO PUSH2 0x5856 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2D PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x39A2 JUMP JUMPDEST PUSH2 0x5860 DUP2 DUP4 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2D PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x590A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x58CF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x58B7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x58FC JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 DUP2 PUSH2 0x5916 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x5972 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 DUP2 MSTORE DUP4 MLOAD PUSH1 0x24 DUP5 ADD MSTORE DUP4 MLOAD SWAP1 SWAP3 DUP4 SWAP3 PUSH1 0x44 SWAP1 SWAP2 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 DUP4 ISZERO PUSH2 0x58CF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x58B7 JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x598B DUP10 DUP10 DUP10 DUP8 PUSH2 0x19BE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2B PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x3 DUP3 ADD SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 PUSH2 0x59B8 SWAP2 DUP14 SWAP2 DUP14 SWAP2 DUP14 SWAP2 DUP12 SWAP2 DUP14 SWAP2 PUSH2 0x481E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x59D9 DUP14 DUP8 PUSH1 0x0 ADD SLOAD DUP9 PUSH1 0x2 ADD SLOAD DUP14 DUP11 PUSH1 0x6 ADD SLOAD PUSH2 0x252A JUMP JUMPDEST DUP8 SLOAD SWAP2 SWAP6 POP DUP6 SWAP4 POP SWAP2 POP PUSH2 0x59F1 SWAP1 PUSH2 0x17BE DUP14 DUP5 PUSH2 0x4491 JUMP JUMPDEST SWAP3 POP POP POP PUSH1 0x0 DUP3 DUP1 ISZERO PUSH2 0x5A04 JUMPI POP PUSH1 0x0 DUP3 GT JUMPDEST ISZERO PUSH2 0x5A34 JUMPI POP PUSH1 0x5 DUP5 ADD DUP1 SLOAD DUP3 ADD SWAP1 SSTORE DUP1 DUP9 PUSH2 0x5A34 JUMPI PUSH1 0x0 PUSH2 0x5A26 DUP15 DUP5 PUSH2 0x3311 JUMP JUMPDEST SWAP1 POP PUSH2 0x5A32 DUP15 DUP3 PUSH2 0x4C73 JUMP JUMPDEST POP JUMPDEST DUP3 ISZERO DUP1 ISZERO PUSH2 0x5A42 JUMPI POP PUSH1 0x0 DUP3 GT JUMPDEST ISZERO PUSH2 0x5A86 JUMPI PUSH1 0x1 DUP6 ADD SLOAD PUSH2 0x5A56 SWAP1 DUP4 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 DUP7 ADD SSTORE DUP9 PUSH2 0x5A7A JUMPI PUSH1 0x0 PUSH2 0x5A6C DUP15 DUP5 PUSH2 0x3311 JUMP JUMPDEST SWAP1 POP PUSH2 0x5A78 DUP15 DUP3 PUSH2 0x4B5B JUMP JUMPDEST POP JUMPDEST PUSH1 0x5 DUP6 ADD DUP1 SLOAD DUP4 SWAP1 SUB SWAP1 SSTORE JUMPDEST DUP11 ISZERO PUSH2 0x5AAE JUMPI PUSH2 0x5A96 DUP2 DUP13 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x1 DUP7 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x5AA8 SWAP1 DUP13 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 DUP7 ADD SSTORE JUMPDEST DUP5 SLOAD DUP11 EQ ISZERO PUSH2 0x5AD1 JUMPI PUSH1 0x1 DUP6 ADD SLOAD PUSH2 0x5AC7 SWAP1 DUP3 SWAP1 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 ADD SSTORE SWAP1 POP JUMPDEST DUP1 DUP5 DUP2 GT ISZERO PUSH2 0x5AEB JUMPI PUSH2 0x5AE4 DUP3 DUP7 PUSH2 0x459C JUMP JUMPDEST SWAP1 POP PUSH2 0x5B1F JUMP JUMPDEST PUSH1 0x1 DUP7 ADD SLOAD PUSH2 0x5AFA SWAP1 DUP7 PUSH2 0x459C JUMP JUMPDEST PUSH1 0x1 DUP8 ADD SSTORE DUP10 ISZERO PUSH2 0x5B1F JUMPI PUSH1 0x0 PUSH2 0x5B11 DUP16 DUP8 PUSH2 0x3311 JUMP JUMPDEST SWAP1 POP PUSH2 0x5B1D DUP16 DUP3 PUSH2 0x4C73 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE DUP6 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE DUP1 DUP3 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0x3FF41BDDE87755B687AE83D0221A232B6BE51A803330ED9661C1B5D0105E0D8A SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 SWAP1 SWAP15 SWAP1 SWAP14 POP SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5BC9 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5C25 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x383E JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5BE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x383E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5EBE PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH2 0x1B0B DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH2 0x5C39 DUP6 PUSH2 0x5D40 JUMP JUMPDEST PUSH2 0x5C8A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x5CC9 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x5CAA JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5D2B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5D30 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x24E6 DUP3 DUP3 DUP7 PUSH2 0x5D46 JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x5D55 JUMPI POP DUP2 PUSH2 0x1DBF JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x5D65 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 DUP2 MSTORE DUP5 MLOAD PUSH1 0x24 DUP5 ADD MSTORE DUP5 MLOAD DUP6 SWAP4 SWAP2 SWAP3 DUP4 SWAP3 PUSH1 0x44 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 DUP4 ISZERO PUSH2 0x58CF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x58B7 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x5DED JUMPI DUP3 DUP1 ADD PUSH1 0xFF NOT DUP3 CALLDATALOAD AND OR DUP6 SSTORE PUSH2 0x5E1A JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x5E1A JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x5E1A JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x5DFF JUMP JUMPDEST POP PUSH2 0x5E26 SWAP3 SWAP2 POP PUSH2 0x5E67 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x5E26 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x5E68 JUMP INVALID MSTORE PUSH6 0x656E7472616E PUSH4 0x79477561 PUSH19 0x643A207265656E7472616E742063616C6C0053 PUSH2 0x6665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F77536166654552433230 GASPRICE KECCAK256 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x756363656564A164736F6C634300060C000A0000 ",
          "sourceMapi;:::-;;;;;;;;;;;;;;;;1082:71;;;:::i;9530:130::-;;;:::i;33016:307::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;33016:307:15;;;;;;;;:::i;1877:49::-;;;:::i;740:52::-;;;:::i;1625:27::-;;;:::i;:::-;;;;-1:-1:-1;;;;;1625:27:15;;;;;;;;;;;;;;2392:47;;;:::i;1773:41::-;;;:::i;2622:53::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;3637:56;;;;;;;;;;;;;;;;-1:-1:-1;3637:56:15;-1:-1:-1;;;;;3637:56:15;;:::i;5408:::-;;;;;;;;;;;;;;;;-1:-1:-1;5408:56:15;-1:-1:-1;;;;;5408:56:15;;:::i;9666:132::-;;;;;;;;;;;;;;;;-1:-1:-1;9666:132:15;;;;:::i;:::-;;15245:105;;;;;;;;;;;;;;;;-1:-1:-1;15245:105:15;-1:-1:-1;;;;;15245:105:15;;:::i;9318:206::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;9318:206:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;9318:206:15;;;;;;;;;;-1:-1:-1;9318:206:15;;-1:-1:-1;9318:206:15;-1:-1:-1;9318:206:15;:::i;32471:160::-;;;;;;;;;;;;;;;;-1:-1:-1;32471:160:15;-1:-1:-1;;;;;32471:160:15;;:::i;31828:303::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;31828:303:15;;;;;;;;:::i;34835:292::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;34835:292:15;;;;;;;;;;;;;;;;;;;;;;;;:::i;10292:132::-;;;;;;;;;;;;;;;;-1:-1:-1;10292:132:15;;;;:::i;2133:49::-;;;:::i;1343:41::-;;;:::i;1303:34::-;;;:::i;42955:288::-;;;;;;;;;;;;;;;;-1:-1:-1;42955:288:15;-1:-1:-1;;;;;42955:288:15;;:::i;13296:1081::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;13296:1081:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;2682:35::-;;;:::i;1390:45::-;;;:::i;11430:1329::-;;;;;;;;;;;;;;;;-1:-1:-1;11430:1329:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;32637:373::-;;;;;;;;;;;;;;;;-1:-1:-1;32637:373:15;;;-1:-1:-1;;;;;32637:373:15;;;;;;;;;;;;:::i;3179:54::-;;;;;;;;;;;;;;;;-1:-1:-1;3179:54:15;-1:-1:-1;;;;;3179:54:15;;:::i;10134:152::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;10134:152:15;;;;;;;;;;:::i;39587:400::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;39587:400:15;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;20845:3741;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;20845:3741:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1478:30::-;;;:::i;34022:807::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;34022:807:15;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4432:58;;;;;;;;;;;;;;;;-1:-1:-1;4432:58:15;-1:-1:-1;;;;;4432:58:15;;:::i;1020:50::-;;;:::i;1940:51::-;;;:::i;5300:46::-;;;;;;;;;;;;;;;;-1:-1:-1;5300:46:15;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36924:413;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;36924:413:15;;;;;;;;;;;;;;;;;;;;;;;;:::i;3369:58::-;;;;;;;;;;;;;;;;-1:-1:-1;3369:58:15;-1:-1:-1;;;;;3369:58:15;;:::i;2808:54::-;;;;;;;;;;;;;;;;-1:-1:-1;2808:54:15;-1:-1:-1;;;;;2808:54:15;;:::i;4037:56::-;;;;;;;;;;;;;;;;-1:-1:-1;4037:56:15;-1:-1:-1;;;;;4037:56:15;;:::i;39993:1075::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;39993:1075:15;;;;;;;;;;;;;;;;;;;;;;;;;:::i;16188:325::-;;;;;;;;;;;;;;;;-1:-1:-1;16188:325:15;-1:-1:-1;;;;;16188:325:15;;:::i;2724:78::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2724:78:15;;;;;;;;;;:::i;1659:45::-;;;:::i;5538:69::-;;;;;;;;;;;;;;;;-1:-1:-1;5538:69:15;-1:-1:-1;;;;;5538:69:15;;:::i;1442:29::-;;;:::i;15356:109::-;;;;;;;;;;;;;;;;-1:-1:-1;15356:109:15;-1:-1:-1;;;;;15356:109:15;;:::i;798:56::-;;;:::i;9045:127::-;;;;;;;;;;;;;;;;-1:-1:-1;9045:127:15;-1:-1:-1;;;;;9045:127:15;;:::i;17735:1391::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;17735:1391:15;;;;;;;;;;:::i;10809:119::-;;;;;;;;;;;;;;;;-1:-1:-1;10809:119:15;-1:-1:-1;;;;;10809:119:15;;:::i;8482:557::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;8482:557:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1551:33::-;;;:::i;1820:43::-;;;:::i;10430:148::-;;;;;;;;;;;;;;;;-1:-1:-1;10430:148:15;;;;:::i;16519:1210::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;16519:1210:15;;;;;;;;;;:::i;31639:183::-;;;;;;;;;;;;;;;;-1:-1:-1;31639:183:15;-1:-1:-1;;;;;31639:183:15;;:::i;24592:415::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;24592:415:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;11118:144::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;11118:144:15;;;;;;;;:::i;972:42::-;;;:::i;3108:65::-;;;;;;;;;;;;;;;;-1:-1:-1;3108:65:15;-1:-1:-1;;;;;3108:65:15;;:::i;12765:525::-;;;;;;;;;;;;;;;;-1:-1:-1;12765:525:15;;;;;;;;;;;;:::i;5471:61::-;;;;;;;;;;;;;;;;-1:-1:-1;5471:61:15;-1:-1:-1;;;;;5471:61:15;;:::i;3044:58::-;;;;;;;;;;;;;;;;-1:-1:-1;3044:58:15;-1:-1:-1;;;;;3044:58:15;;:::i;9178:134::-;;;;;;;;;;;;;;;;-1:-1:-1;9178:134:15;-1:-1:-1;;;;;9178:134:15;;:::i;2574:42::-;;;:::i;19132:1707::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;19132:1707:15;;;;;;;;;;;;;;;;;;;:::i;860:50::-;;;:::i;5613:64::-;;;;;;;;;;;;;;;;-1:-1:-1;5613:64:15;-1:-1:-1;;;;;5613:64:15;;:::i;2290:49::-;;;:::i;33542:207::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;33542:207:15;;;;;;;;:::i;38329:682::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;38329:682:15;;;;;;;;;;;;;:::i;2240:43::-;;;:::i;2005:47::-;;;:::i;33329:207::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;33329:207:15;;;;;;;;:::i;9804:142::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;9804:142:15;;;;;;;;;;:::i;36085:572::-;;;;;;;;;;;;;;;;-1:-1:-1;36085:572:15;-1:-1:-1;;;;;36085:572:15;;:::i;2493:34::-;;;:::i;3496:57::-;;;;;;;;;;;;;;;;-1:-1:-1;3496:57:15;-1:-1:-1;;;;;3496:57:15;;:::i;3775:59::-;;;;;;;;;;;;;;;;-1:-1:-1;3775:59:15;-1:-1:-1;;;;;3775:59:15;;:::i;1711:48::-;;;:::i;2533:34::-;;;:::i;32137:328::-;;;;;;;;;;;;;;;;-1:-1:-1;32137:328:15;-1:-1:-1;;;;;32137:328:15;;:::i;41074:214::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;41074:214:15;;;;;;;;;;;;;;;;;;;:::i;39017:564::-;;;;;;;;;;;;;;;;-1:-1:-1;39017:564:15;-1:-1:-1;;;;;39017:564:15;;:::i;4188:60::-;;;;;;;;;;;;;;;;-1:-1:-1;4188:60:15;-1:-1:-1;;;;;4188:60:15;;:::i;2345:41::-;;;:::i;5039:67::-;;;;;;;;;;;;;;;;-1:-1:-1;5039:67:15;-1:-1:-1;;;;;5039:67:15;;:::i;42662:287::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;42662:287:15;;;;;;;;;;;;;;;;;;;;;;;;;:::i;15895:167::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;15895:167:15;;;;;;;;;;;;;;;;;:::i;10717:86::-;;;;;;;;;;;;;;;;-1:-1:-1;10717:86:15;-1:-1:-1;;;;;10717:86:15;;:::i;10584:127::-;;;;;;;;;;;;;;;;-1:-1:-1;10584:127:15;;:::i;10934:178::-;;;;;;;;;;;;;;;;-1:-1:-1;10934:178:15;;:::i;31173:272::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;31173:272:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;15471:347;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;15471:347:15;;;;;;;;:::i;5189:61::-;;;;;;;;;;;;;;;;-1:-1:-1;5189:61:15;-1:-1:-1;;;;;5189:61:15;;:::i;2197:37::-;;;:::i;41294:298::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;41294:298:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;2979:59::-;;;;;;;;;;;;;;;;-1:-1:-1;2979:59:15;-1:-1:-1;;;;;2979:59:15;;:::i;3239:57::-;;;;;;;;;;;;;;;;-1:-1:-1;3239:57:15;-1:-1:-1;;;;;3239:57:15;;:::i;37505:656::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;37505:656:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;2445:41::-;;;:::i;28383:2735::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;28383:2735:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;2066:52::-;;;:::i;31451:182::-;;;;;;;;;;;;;;;;-1:-1:-1;31451:182:15;-1:-1:-1;;;;;31451:182:15;;:::i;2926:46::-;;;;;;;;;;;;;;;;-1:-1:-1;2926:46:15;;:::i;14383:541::-;;;;;;;;;;;;;;;;-1:-1:-1;14383:541:15;-1:-1:-1;;;;;14383:541:15;;:::i;11268:156::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;11268:156:15;;;;;;;;:::i;4898:58::-;;;;;;;;;;;;;;;;-1:-1:-1;4898:58:15;-1:-1:-1;;;;;4898:58:15;;:::i;9952:176::-;;;;;;;;;;;;;;;;-1:-1:-1;9952:176:15;;;;:::i;14930:309::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;14930:309:15;;;;;;;;;;:::i;2868:51::-;;;;;;;;;;;;;;;;-1:-1:-1;2868:51:15;-1:-1:-1;;;;;2868:51:15;;:::i;1591:28::-;;;:::i;1515:30::-;;;:::i;33755:261::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;33755:261:15;;;;;;;;;;;;;:::i;35133:946::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;35133:946:15;;;;;;;;;;:::i;1170:59::-;;;:::i;41598:264::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;41598:264:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;5684:41::-;;;;;;;;;;;;;;;;-1:-1:-1;5684:41:15;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36663:255;-1:-1:-1;;;;;36764:19:15;;36724:7;36764:19;;;:11;:19;;;;;;36797:15;36793:34;;36823:1;36816:8;;;;;36793:34;-1:-1:-1;;;;;36844:23:15;;;;;;:15;:23;;;;;;:67;;36900:10;;36844:51;;847:7;36844:27;:51::i;:::-;:55;;:67::i;:::-;36837:74;;;36663:255;;;;:::o;1082:71::-;-1:-1:-1;;;1082:71:15;:::o;9530:130::-;9626:20;:27;9530:130;:::o;33016:307::-;33107:7;33130:17;33126:36;;-1:-1:-1;33158:1:15;33151:8;;33126:36;33171:13;33187:19;33199:6;33187:11;:19::i;:::-;-1:-1:-1;;;;;33235:21:15;;33216:16;33235:21;;;:13;:21;;;;;;33171:35;;-1:-1:-1;33273:43:15;33301:2;:14;;;33273:23;:12;33171:35;33273:16;:23::i;:43::-;33266:50;;;;33016:307;;;;;:::o;1877:49::-;;;;:::o;740:52::-;787:5;740:52;:::o;1625:27::-;;;-1:-1:-1;;;;;1625:27:15;;:::o;2392:47::-;;;;:::o;1773:41::-;;;;:::o;2622:53::-;;;;;;;;;:::o;3637:56::-;;;;;;;;;;;;;:::o;5408:::-;;;;;;;;;;;;;:::o;9666:132::-;9741:10;:8;:10::i;:::-;9761:13;:30;;;;;;;-1:-1:-1;;9761:30:15;;;;;;;;;9666:132::o;15245:105::-;15316:10;15300:27;;;;:15;:27;;;;;;;;-1:-1:-1;;;;;15300:36:15;;;;;;;;;;:43;;-1:-1:-1;;15300:43:15;15339:4;15300:43;;;15245:105::o;9318:206::-;9430:15;;-1:-1:-1;;;;;9430:15:15;9416:10;:29;9408:72;;;;;-1:-1:-1;;;9408:72:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;9490:18;;;;:6;:18;;;;;:27;;9511:6;;9490:27;:::i;:::-;;9318:206;;;:::o;32471:160::-;32544:7;32570:54;32584:6;32592:31;32616:6;32592:23;:31::i;:::-;32570:13;:54::i;31828:303::-;31924:7;31943:13;31959:19;31971:6;31959:11;:19::i;:::-;31943:35;-1:-1:-1;31988:24:15;32015:43;31943:35;32015:32;:11;-1:-1:-1;;;32015:15:15;:32::i;:43::-;32111:4;;31988:70;;-1:-1:-1;32075:49:15;;31988:70;;-1:-1:-1;;;;;32111:4:15;32117:6;32075:17;:49::i;34835:292::-;34995:124;;;-1:-1:-1;;;;;;34995:124:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;34985:135;;;;;;34835:292::o;10292:132::-;10367:10;:8;:10::i;:::-;10387:13;:30;;;;;;;-1:-1:-1;;10387:30:15;;;;;;;;;10292:132::o;2133:49::-;;;;:::o;1343:41::-;;;;;;;;;:::o;1303:34::-;;;;;;:::o;42955:288::-;43030:7;43049:14;43073:4;;;;;;;;;-1:-1:-1;;;;;43073:4:15;-1:-1:-1;;;;;43066:24:15;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;43066:26:15;;-1:-1:-1;43106:11:15;43102:30;;43128:1;43121:8;;;;;43102:30;-1:-1:-1;;;;;43158:20:15;;43141:14;43158:20;;;:12;:20;;;;;;43218:17;;43195:41;;:18;43158:20;43206:6;43195:10;:18::i;:41::-;43188:48;42955:288;-1:-1:-1;;;;42955:288:15:o;13296:1081::-;13554:10;:8;:10::i;:::-;-1:-1:-1;;;;;13631:25:15;;;;;;:17;:25;;;;;;;;13626:156;;13696:21;;:28;;13722:1;13696:25;:28::i;:::-;13672:21;:52;13738:20;:33;;;;;;;-1:-1:-1;13738:33:15;;;;;;;;-1:-1:-1;;;;;;13738:33:15;-1:-1:-1;;;;;13738:33:15;;;;;13626:156;13821:17;;-1:-1:-1;;;;;13892:20:15;;13792:26;13892:20;;;:12;:20;;;;;;13869:44;;13821:17;;13869:22;:44::i;:::-;-1:-1:-1;;;;;13924:25:15;;;;;;:17;:25;;;;;;;;:32;;13952:4;-1:-1:-1;;13924:32:15;;;;;;;13966:13;:21;;;;;:38;;;14014:12;:20;;;;;:35;;;14059:20;:28;;;;;:44;;;14113:14;:22;;;;;:39;;;14162:12;:20;;;;;:32;;;;;;;;;;14204:23;;;;;;:38;;;;;;;;;;;13848:65;-1:-1:-1;14273:36:15;13848:65;14014:35;14273:22;:36::i;:::-;14253:17;:56;14351:19;14363:6;14351:11;:19::i;:::-;;13296:1081;;;;;;;;:::o;2682:35::-;;;;:::o;1390:45::-;;;;;;;;;:::o;11430:1329::-;11811:10;:8;:10::i;:::-;11831:53;1067:3;11841:15;:39;;11882:1;11831:9;:53::i;:::-;11894:59;1067:3;11904:21;:45;;11951:1;11894:9;:59::i;:::-;11963:61;1067:3;11973:23;:47;;12022:1;11963:9;:61::i;:::-;12034:57;1067:3;12044:19;:43;;12089:1;12034:9;:57::i;:::-;12101:63;1067:3;12111:25;:49;;12162:1;12101:9;:63::i;:::-;12174:59;1067:3;12184:21;:45;;12231:1;12174:9;:59::i;:::-;12243;-1:-1:-1;;;12253:45:15;;;12300:1;12243:9;:59::i;:::-;12312:14;:32;;;;12354:20;:44;;;;12408:22;:48;;;;12466:18;:40;;;;12516:24;:52;12578:20;:44;12632:17;:38;12680:13;:30;12720:14;:32;;-1:-1:-1;;12720:32:15;;;;;;;;;;11430:1329::o;32637:373::-;32794:4;;32740:7;;;;-1:-1:-1;;;;;32781:17:15;;;32794:4;;32781:17;:60;;-1:-1:-1;;;;;32817:24:15;;;;;;:13;:24;;;;;;32781:60;;;1012:2;32781:60;32886:4;;32759:82;;-1:-1:-1;32851:19:15;;-1:-1:-1;;;;;32873:17:15;;;32886:4;;32873:17;:60;;-1:-1:-1;;;;;32909:24:15;;;;;;:13;:24;;;;;;32873:60;;;1012:2;32873:60;32851:82;;32950:53;32991:11;32985:2;:17;32950:30;32968:11;32962:2;:17;32950:7;:11;;:30;;;;:::i;:53::-;32943:60;;;;32637:373;;;;;;:::o;3179:54::-;;;;;;;;;;;;;;;:::o;10134:152::-;10222:10;:8;:10::i;:::-;-1:-1:-1;;;;;10242:25:15;;;;;;;;:12;:25;;;;;:37;;-1:-1:-1;;10242:37:15;;;;;;;;;;10134:152::o;39587:400::-;39713:4;39719:7;39738:11;39752:64;39767:8;39777:16;39795:11;39808:7;39752:14;:64::i;:::-;39738:78;;39826:24;;:::i;:::-;-1:-1:-1;39853:14:15;;;;:9;:14;;;;;;;;;39826:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;39884:96;;39893:11;;39826:41;;;39944:7;;39884:8;:96::i;:::-;39877:103;;;;;;39587:400;;;;;;;:::o;20845:3741::-;1671:1:47;2260:7;;:19;;2252:63;;;;;-1:-1:-1;;;2252:63:47;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2252:63:47;;;;;;;;;;;;;;;1671:1;2390:7;:18;21021:17:15::1;::::0;21011:32:::1;::::0;21021:17;;::::1;;;21040:2;21011:9;:32::i;:::-;21053:19;:17;:19::i;:::-;21082:25;21098:8;21082:15;:25::i;:::-;21117:55;21133:16;21151:11;21164:7;21117:15;:55::i;:::-;21182:10;::::0;:97:::1;::::0;;-1:-1:-1;;;21182:97:15;;-1:-1:-1;;;;;21182:97:15;;::::1;;::::0;::::1;::::0;;;::::1;::::0;;;;;;::::1;::::0;;;;;;;;;;;::::1;;::::0;;;;;;:10;;;::::1;::::0;;::::1;::::0;:35:::1;::::0;:97;;;;;-1:-1:-1;;21182:97:15;;;;;;;;:10;:97;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;21290:58;21318:16;21336:11;21290:27;:58::i;:::-;21359:11;21373:64;21388:8;21398:16;21416:11;21429:7;21373:14;:64::i;:::-;21447:25;21475:14:::0;;;:9:::1;:14;::::0;;;;21359:78;;-1:-1:-1;21516:7:15;:61:::1;;21553:24;21565:11;21553;:24::i;:::-;21516:61;;;21526:24;21538:11;21526;:24::i;:::-;21592:13:::0;;21500:77;;-1:-1:-1;21588:78:15::1;;21626:21;::::0;::::1;:29:::0;;;21588:78:::1;21680:13:::0;;:17;;;;:35:::1;;;21714:1;21701:10;:14;21680:35;21676:216;;;21755:126;21775:11;21788:8;:13;;;21803:8;:21;;;21826:7;21835:5;21842:10;21854:8;:26;;;21755:19;:126::i;:::-;21731:21;::::0;::::1;:150:::0;21676:216:::1;21902:11;21916:122;21935:8;21945:16;21963:11;21976:7;21985:10;21997:8;:13;;;22012:8;:25;;;21916:18;:122::i;:::-;21902:136;;22048:23;22074:29;22086:16;22074:11;:29::i;:::-;22048:55;;22113:26;22142:48;22156:16;22174:15;22142:13;:48::i;:::-;22223:19;::::0;::::1;::::0;22113:77;;-1:-1:-1;22223:43:15::1;::::0;22113:77;22223:23:::1;:43::i;:::-;22201:19;::::0;::::1;:65:::0;;;22276:41:::1;::::0;22286:26;-1:-1:-1;22286:26:15::1;22314:2;22276:9;:41::i;:::-;22350:19;::::0;::::1;::::0;:28:::1;::::0;22374:3;22350:23:::1;:28::i;:::-;22328:19;::::0;::::1;:50:::0;22416:59:::1;22436:16:::0;22454:11;22467:7;22416:19:::1;:59::i;:::-;22388:25;::::0;::::1;:87:::0;22501:13;;:29:::1;::::0;22519:10;22501:17:::1;:29::i;:::-;22485:45:::0;;;22569:15:::1;22540:26;::::0;::::1;:44:::0;22595:32:::1;::::0;22605:17;;22624:2:::1;22595:9;:32::i;:::-;22637:53;22655:8;:13;;;22670:8;:19;;;22637:17;:53::i;:::-;22700:75;22720:8;22730:16;22748:11;22761:7;22770:4;22700:19;:75::i;:::-;;;22843:20;22866:43;22880:16;22898:10;22866:13;:43::i;:::-;22944:22;::::0;::::1;::::0;22843:66;;-1:-1:-1;22944:40:15::1;::::0;22843:66;22944:26:::1;:40::i;:::-;22919:22;::::0;::::1;:65:::0;22994:55:::1;23018:16:::0;23036:12;22994:23:::1;:55::i;:::-;23064:7;23060:1216;;;23390:61;23413:16:::0;23431:19:::1;:10:::0;23446:3;23431:14:::1;:19::i;:::-;23390:22;:61::i;:::-;23465:60;23488:16;23506:18;23465:22;:60::i;:::-;23605:54;23625:16;23643:15;23605:19;:54::i;:::-;23837:75;23857:16;23875:36;23889:16;23907:3;23875:13;:36::i;:::-;23837:19;:75::i;:::-;23060:1216;;;-1:-1:-1::0;;;;;23947:29:15;::::1;;::::0;;;:16:::1;:29;::::0;;;;;23943:259:::1;;-1:-1:-1::0;;;;;24001:37:15;::::1;;::::0;;;:24:::1;:37;::::0;;;;:45;;;23943:259:::1;;;24125:62;24156:11;24169:5;24176:10;24125:30;:62::i;:::-;-1:-1:-1::0;;;;;24085:37:15;::::1;;::::0;;;:24:::1;:37;::::0;;;;:102;23943:259:::1;24216:49;24241:11;24254:10;24216:24;:49::i;:::-;24291:115;::::0;;;;;-1:-1:-1;;;;;24291:115:15;;::::1;;::::0;::::1;::::0;;;::::1;::::0;;;;;::::1;::::0;;;;;;;;;;;;;;;;;::::1;;::::0;;;;;;;;;;;;;;;;;;::::1;::::0;;;;;;;::::1;24441:13:::0;;24456:19:::1;::::0;::::1;::::0;24477:21:::1;::::0;::::1;::::0;24500:25:::1;::::0;::::1;::::0;24527:22:::1;::::0;::::1;::::0;24551:20:::1;::::0;::::1;::::0;24421:158:::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::1;::::0;;;;;;;::::1;-1:-1:-1::0;;1628:1:47;2563:7;:22;-1:-1:-1;;;;;;;;;;20845:3741:15:o;1478:30::-;;;-1:-1:-1;;;;;1478:30:15;;:::o;34022:807::-;34152:7;34161;34170;34179;34188;34197;34206:4;34212:7;34231:11;34245:64;34260:8;34270:16;34288:11;34301:7;34245:14;:64::i;:::-;34231:78;;34319:24;;:::i;:::-;34346:9;:14;34356:3;34346:14;;;;;;;;;;;34319:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;34370:19;34415:1;34392:8;:20;;;:24;:89;;34460:8;:20;;;34459:21;;34392:89;;;34427:8;:20;;;34392:89;34370:111;;34512:8;:13;;;34544:8;:19;;;34582:8;:21;;;34622:8;:25;;;34666:8;:22;;;34707:11;34761:1;34737:8;:20;;;:25;;34781:8;:26;;;34491:331;;;;;;;;;;;;;;;;;;;34022:807;;;;;;;;;;;;;:::o;4432:58::-;;;;;;;;;;;;;:::o;1020:50::-;1067:3;1020:50;:::o;1940:51::-;;;;:::o;5300:46::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;36924:413::-;37053:7;37072:11;37086:64;37101:8;37111:16;37129:11;37142:7;37086:14;:64::i;:::-;37072:78;;37160:24;;:::i;:::-;-1:-1:-1;37187:14:15;;;;:9;:14;;;;;;;;;37160:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;37211:38;;37221:23;;37246:2;37211:9;:38::i;:::-;37310:19;;;;37266:13;;:64;;37310:19;37266:39;;787:5;37266:17;:39::i;:64::-;37259:71;36924:413;-1:-1:-1;;;;;;;36924:413:15:o;3369:58::-;;;;;;;;;;;;;:::o;2808:54::-;;;;;;;;;;;;;;;:::o;4037:56::-;;;;;;;;;;;;;:::o;39993:1075::-;40142:4;40148:7;40167:32;40193:1;40177:13;:17;40196:2;40167:9;:32::i;:::-;40209:13;40225:7;:61;;40262:24;40274:11;40262;:24::i;:::-;40225:61;;;40235:24;40247:11;40235;:24::i;:::-;40209:77;;40296:18;40333:5;40317:13;:21;:75;;40368:24;:5;40378:13;40368:9;:24::i;:::-;40317:75;;;40341:24;:13;40359:5;40341:17;:24::i;:::-;40296:96;-1:-1:-1;40402:13:15;40418:40;40444:13;40418:21;:5;40296:96;40418:9;:21::i;:40::-;40402:56;;40469:14;40498:7;40494:135;;;-1:-1:-1;40533:21:15;;;40494:135;;;-1:-1:-1;40597:21:15;;;40494:135;40799:14;40834:37;40857:13;;40834:18;:22;;:37;;;;:::i;:::-;40816:15;:55;:95;;-1:-1:-1;;;;;40878:33:15;;;;;;:20;:33;;;;;;40816:95;;;40874:1;40816:95;40799:112;;40925:9;:65;;;;-1:-1:-1;40973:17:15;:5;40983:6;40973:9;:17::i;:::-;40938:31;:5;787;40938:9;:31::i;:::-;:52;;40925:65;40921:105;;;41014:1;41006:9;;40921:105;-1:-1:-1;41044:9:15;41055:5;;-1:-1:-1;39993:1075:15;-1:-1:-1;;;;;;;;39993:1075:15:o;16188:325::-;1671:1:47;2260:7;;:19;;2252:63;;;;;-1:-1:-1;;;2252:63:47;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2252:63:47;;;;;;;;;;;;;;;1671:1;2390:7;:18;;;-1:-1:-1;;;;;16282:25:15;::::1;::::0;;:17:::1;:25;::::0;;;;;16272:40:::1;::::0;16282:25:::1;;16309:2;16272:9;:40::i;:::-;16322:19;16344;16356:6;16344:11;:19::i;:::-;16322:41;;16373:30;16397:1;16383:11;:15;16400:2;16373:9;:30::i;:::-;16413:40;16433:6;16441:11;16413:19;:40::i;:::-;16468:38;::::0;;-1:-1:-1;;;;;16468:38:15;::::1;::::0;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;;;;;;;;;::::1;-1:-1:-1::0;;1628:1:47;2563:7;:22;16188:325:15:o;2724:78::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1659:45::-;;;;:::o;5538:69::-;;;;;;;;;;;;;:::o;1442:29::-;;;;;;-1:-1:-1;;;;;1442:29:15;;:::o;15356:109::-;15430:10;15453:5;15414:27;;;:15;:27;;;;;;;;-1:-1:-1;;;;;15414:36:15;;;;;;;;;;:44;;-1:-1:-1;;15414:44:15;;;15356:109::o;798:56::-;847:7;798:56;:::o;9045:127::-;9121:10;:8;:10::i;:::-;9141;:24;;-1:-1:-1;;;;;9141:24:15;;;;;-1:-1:-1;;;;;;9141:24:15;;;;;;;;;9045:127::o;17735:1391::-;17828:7;1671:1:47;2260:7;;:19;;2252:63;;;;;-1:-1:-1;;;2252:63:47;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2252:63:47;;;;;;;;;;;;;;;1671:1;2390:7;:18;17847::15::1;:16;:18::i;:::-;-1:-1:-1::0;;;;;17885:25:15;::::1;;::::0;;;:17:::1;:25;::::0;;;;;17875:40:::1;::::0;17885:25:::1;;17912:2;17875:9;:40::i;:::-;17925:14;:21:::0;;-1:-1:-1;;17925:21:15::1;;;::::0;;17990:4:::1;::::0;17925:21;;17978:17:::1;::::0;-1:-1:-1;;;;;17990:4:15::1;17978:11;:17::i;:::-;17957:38;;18005:29;18028:1;18015:10;:14;18031:2;18005:9;:29::i;:::-;18045:43;18073:6;18081;18045:27;:43::i;:::-;18099:24;18126:39;18146:6;18154:10;18126:19;:39::i;:::-;18099:66;;18175:35;18204:1;18185:16;:20;18207:2;18175:9;:35::i;:::-;18221:39;18241:6;18249:10;18221:19;:39::i;:::-;18270:45;18290:6;18298:16;18270:19;:45::i;:::-;18332:4;::::0;18326:43:::1;::::0;;-1:-1:-1;;;18326:43:15;;18351:4:::1;18326:43;::::0;::::1;::::0;;;;;;;;;-1:-1:-1;;;;;18332:4:15;;::::1;::::0;18326:16:::1;::::0;:43;;;;;18332:4:::1;::::0;18326:43;;;;;;;;18332:4;;18326:43;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;18702:4:15::1;::::0;18682:25:::1;::::0;-1:-1:-1;;;;;;18702:4:15::1;::::0;-1:-1:-1;18682:19:15::1;:25::i;:::-;18743:10;::::0;:56:::1;::::0;;-1:-1:-1;;;18743:56:15;;-1:-1:-1;;;;;18743:56:15;;::::1;;::::0;::::1;::::0;;;;;;;;;-1:-1:-1;;18743:10:15;;::::1;::::0;;::::1;::::0;:36:::1;::::0;:56;;;;;::::1;::::0;;;;;;;;;:10;:56;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;18743:56:15;;-1:-1:-1;18809:17:15::1;18829:58;18846:6:::0;18854:16;18743:56;18829:16:::1;:58::i;:::-;18809:78;;18897:28;18919:1;18907:9;:13;18922:2;18897:9;:28::i;:::-;18936:42;18949:6;18957:9;18968;18936:12;:42::i;:::-;18994:66;::::0;;-1:-1:-1;;;;;18994:66:15;;::::1;::::0;;;::::1;;::::0;::::1;::::0;;;;;;;;;;;;;;;;;;;;;::::1;::::0;;;;;;;::::1;19071:14;:22:::0;;-1:-1:-1;;19071:22:15::1;::::0;;-1:-1:-1;;2563:22:47;19110:9:15;17735:1391;-1:-1:-1;;;;;;17735:1391:15:o;10809:119::-;10879:10;:8;:10::i;:::-;10899:9;:22;;-1:-1:-1;;;;;;10899:22:15;-1:-1:-1;;;;;10899:22:15;;;;;;;;;;10809:119::o;8482:557::-;8717:10;:8;:10::i;:::-;8748:13;;;8737:28;;8748:13;;;;8747:14;;8737:9;:28::i;:::-;8791:4;8775:20;;-1:-1:-1;;8775:20:15;;;;;8806:6;:16;;-1:-1:-1;;;;;;8806:16:15;;;-1:-1:-1;;;;;8806:16:15;;;;;;;8832:4;:12;;;;;;;;;;;;;;8854:9;:22;;;;;;;;;;;;;;;;8886:17;:38;;;;8934:17;:38;8982:23;:50;8482:557::o;1551:33::-;;;-1:-1:-1;;;;;1551:33:15;;:::o;1820:43::-;;;;:::o;10430:148::-;10513:10;:8;:10::i;:::-;10533:17;:38;;;;;;;-1:-1:-1;;10533:38:15;;;;;;;;;10430:148::o;16519:1210::-;16611:7;1671:1:47;2260:7;;:19;;2252:63;;;;;-1:-1:-1;;;2252:63:47;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2252:63:47;;;;;;;;;;;;;;;1671:1;2390:7;:18;16630::15::1;:16;:18::i;:::-;-1:-1:-1::0;;;;;16668:25:15;::::1;;::::0;;;:17:::1;:25;::::0;;;;;16658:40:::1;::::0;16668:25:::1;;16695:2;16658:9;:40::i;:::-;16708:14;:21:::0;;-1:-1:-1;;16708:21:15::1;;;::::0;;;16762:19:::1;16774:6:::0;16762:11:::1;:19::i;:::-;16740:41;;16791:30;16815:1;16801:11;:15;16818:2;16791:9;:30::i;:::-;16832:43;16860:6;16868;16832:27;:43::i;:::-;16886:13;16902:19;16914:6;16902:11;:19::i;:::-;16886:35:::0;-1:-1:-1;16932:18:15::1;16953:43;-1:-1:-1::0;;;16953:22:15::1;:11:::0;16886:35;16953:15:::1;:22::i;:43::-;17057:4;::::0;16932:64;;-1:-1:-1;17019:43:15::1;::::0;16932:64;;17049:6;;-1:-1:-1;;;;;17057:4:15::1;17019:17;:43::i;:::-;17006:56;;17072:29;17095:1;17082:10;:14;17098:2;17072:9;:29::i;:::-;17137:10;::::0;:55:::1;::::0;;-1:-1:-1;;;17137:55:15;;-1:-1:-1;;;;;17137:55:15;;::::1;;::::0;::::1;::::0;;;;;;;;;-1:-1:-1;;17137:10:15;;::::1;::::0;;::::1;::::0;:35:::1;::::0;:55;;;;;::::1;::::0;;;;;;;;;:10;:55;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;17137:55:15;;-1:-1:-1;17202:23:15::1;17228:53;17245:6:::0;17253:11;17137:55;17228:16:::1;:53::i;:::-;17202:79:::0;-1:-1:-1;17291:18:15::1;17312:47;-1:-1:-1::0;;;17312:26:15::1;17202:79:::0;17332:5;17312:19:::1;:26::i;:47::-;17420:4;::::0;17291:68;;-1:-1:-1;17382:43:15::1;::::0;17291:68;;17412:6;;-1:-1:-1;;;;;17420:4:15::1;17382:17;:43::i;:::-;17369:56;;17436:39;17456:6;17464:10;17436:19;:39::i;:::-;17485:44;17505:6;17513:15;17485:19;:44::i;:::-;17546:4;::::0;17540:39:::1;::::0;;-1:-1:-1;;;17540:39:15;;-1:-1:-1;;;;;17540:39:15;;::::1;;::::0;::::1;::::0;;;;;;;;;17546:4;;;::::1;::::0;17540:16:::1;::::0;:39;;;;;17546:4:::1;::::0;17540:39;;;;;;;17546:4;;17540:39;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;17595:67:15::1;::::0;;-1:-1:-1;;;;;17595:67:15;;::::1;::::0;;;::::1;;::::0;::::1;::::0;;;;;;;;;;;;;;;;;;;;;::::1;::::0;-1:-1:-1;17595:67:15;;;;;;;-1:-1:-1;17595:67:15::1;17673:14;:22:::0;;-1:-1:-1;;17673:22:15::1;::::0;;-1:-1:-1;;2563:22:47;17712:10:15;16519:1210;-1:-1:-1;;;;;;;;16519:1210:15:o;31639:183::-;31748:9;;;31783:15;;31732:83;;;-1:-1:-1;;;31732:83:15;;-1:-1:-1;;;;;31732:83:15;;;;;;;;;;31706:7;31732:83;;;;;;31783:15;;;;31732:83;;;;;;31748:9;31800:14;;;;;;31732:83;;;;;;;;31706:7;;31748:9;;;;31732:35;;:83;;;;;;;;;;;;;;31748:9;31732:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;31732:83:15;;31639:183;-1:-1:-1;;31639:183:15:o;24592:415::-;24802:7;1671:1:47;2260:7;;:19;;2252:63;;;;;-1:-1:-1;;;2252:63:47;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2252:63:47;;;;;;;;;;;;;;;1671:1;2390:7;:18;24821:19:15::1;:17;:19::i;:::-;24850:25;24866:8;24850:15;:25::i;:::-;24892:108;24910:8;24920:16;24938:11;24951:16;24969:10;24981:7;24990:9;24892:17;:108::i;:::-;1628:1:47::0;2563:7;:22;24885:115:15;24592:415;-1:-1:-1;;;;;;;;24592:415:15:o;11118:144::-;11204:10;:8;:10::i;:::-;-1:-1:-1;;;;;11224:21:15;;;;;;;:13;:21;;;;;:31;11118:144::o;972:42::-;1012:2;972:42;:::o;3108:65::-;;;;;;;;;;;;;:::o;12765:525::-;12905:10;:8;:10::i;:::-;12925:60;1222:7;12935:16;:45;;12982:2;12925:9;:60::i;:::-;12995;1285:5;13005:18;:45;;13052:2;12995:9;:60::i;:::-;13065:66;1285:5;13075:24;:51;;13128:2;13065:9;:66::i;:::-;13141:15;:34;;;;13185:17;:38;13233:23;:50;12765:525::o;5471:61::-;;;;;;;;;;;;;:::o;3044:58::-;;;;;;;;;;;;;:::o;9178:134::-;9251:10;:8;:10::i;:::-;9271:15;:34;;-1:-1:-1;;;;;;9271:34:15;-1:-1:-1;;;;;9271:34:15;;;;;;;;;;9178:134::o;2574:42::-;;;;;;;;;:::o;19132:1707::-;19242:7;1671:1:47;2260:7;;:19;;2252:63;;;;;-1:-1:-1;;;2252:63:47;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2252:63:47;;;;;;;;;;;;;;;1671:1;2390:7;:18;19271:13:15::1;::::0;19261:28:::1;::::0;19271:13:::1;::::0;::::1;;;19286:2;19261:9;:28::i;:::-;-1:-1:-1::0;;;;;19309:27:15;::::1;;::::0;;;:17:::1;:27;::::0;;;;;19299:42:::1;::::0;19309:27:::1;;19338:2;19299:9;:42::i;:::-;-1:-1:-1::0;;;;;19361:28:15;::::1;;::::0;;;:17:::1;:28;::::0;;;;;19351:43:::1;::::0;19361:28:::1;;19391:2;19351:9;:43::i;:::-;19404:36;19426:9;-1:-1:-1::0;;;;;19414:21:15::1;:8;-1:-1:-1::0;;;;;19414:21:15::1;;;19437:2;19404:9;:36::i;:::-;19451:14;:21:::0;;-1:-1:-1;;19451:21:15::1;;;::::0;;19483:47:::1;19511:8:::0;;19483:27:::1;:47::i;:::-;19540:49;19568:9;19579;19540:27;:49::i;:::-;19600:16;19619:21;19631:8;19619:11;:21::i;:::-;19600:40;;19650:27;19671:1;19660:8;:12;19674:2;19650:9;:27::i;:::-;19688:15;19706:21;19718:8;19706:11;:21::i;:::-;19688:39;;19737:16;19756:22;19768:9;19756:11;:22::i;:::-;19737:41:::0;-1:-1:-1;19789:17:15::1;19809:35;19737:41:::0;19809:21:::1;:8:::0;19822:7;19809:12:::1;:21::i;:35::-;19789:55;;19866:49;19884:9;19895:8;19905:9;19866:17;:49::i;:::-;19854:61:::0;-1:-1:-1;20017:18:15::1;20038:42;-1:-1:-1::0;;;20038:21:15::1;:8:::0;20051:7;20038:12:::1;:21::i;:42::-;20143:4;::::0;20017:63;;-1:-1:-1;20103:45:15::1;::::0;20017:63;;20133:8;;-1:-1:-1;;;;;20143:4:15::1;20103:17;:45::i;:::-;20184:10;::::0;:65:::1;::::0;;-1:-1:-1;;;20184:65:15;;-1:-1:-1;;;;;20184:65:15;;::::1;;::::0;::::1;::::0;;;::::1;::::0;;;;;;;;;;;;;;-1:-1:-1;;;20184:10:15;;;::::1;::::0;;::::1;::::0;:32:::1;::::0;:65;;;;;::::1;::::0;;;;;;;;;:10;:65;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;20184:65:15;;-1:-1:-1;20259:26:15::1;20288:54;20305:9:::0;20316;20184:65;20288:16:::1;:54::i;:::-;20259:83;;20353:41;20373:8;20383:10;20353:19;:41::i;:::-;20404:42;20424:9;20435:10;20404:19;:42::i;:::-;20457:39;20477:8;20487;20457:19;:39::i;:::-;20506:41;20526:9;20537;20506:19;:41::i;:::-;20558:32;20580:9;20558:21;:32::i;:::-;20601:54;20614:9;20625:18;20645:9;20601:12;:54::i;:::-;20671:93;::::0;;-1:-1:-1;;;;;20671:93:15;;::::1;::::0;;;;::::1;;::::0;::::1;::::0;;::::1;::::0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::1;::::0;;;;;;;::::1;20775:14;:22:::0;;-1:-1:-1;;20775:22:15::1;::::0;;-1:-1:-1;;2563:22:47;20814:18:15;19132:1707;-1:-1:-1;;;;;;;;;;19132:1707:15:o;860:50::-;-1:-1:-1;;;860:50:15;:::o;5613:64::-;;;;;;;;;;;;;:::o;2290:49::-;;;;:::o;33542:207::-;33622:7;33645:15;33641:34;;-1:-1:-1;33671:1:15;33664:8;;33641:34;33691:51;33702:6;33710:10;33722:19;33734:6;33722:11;:19::i;:::-;33691:10;:51::i;38329:682::-;-1:-1:-1;;;;;38485:29:15;;38451:7;38485:29;;;:16;:29;;;;;;;;;38547:24;:37;;;;;;38451:7;38615:25;;;:87;;38674:28;:10;38689:12;38674:14;:28::i;:::-;38615:87;;;38643:28;:12;38660:10;38643:16;:28::i;:::-;38594:108;-1:-1:-1;38712:13:15;38728:38;38753:12;38728:20;:4;38594:108;38728:8;:20::i;:38::-;38712:54;-1:-1:-1;38793:25:15;;;38776:14;38848:20;:4;38857:10;38848:8;:20::i;:::-;38829:39;;38878:15;38896:9;:53;;38930:19;:8;38943:5;38930:12;:19::i;:::-;38896:53;;;38908:19;:8;38921:5;38908:12;:19::i;:::-;38878:71;-1:-1:-1;38967:37:15;38878:71;38967:24;:10;38982:8;38967:14;:24::i;:37::-;38960:44;38329:682;-1:-1:-1;;;;;;;;;;;38329:682:15:o;2240:43::-;;;;;;:::o;2005:47::-;;;;:::o;33329:207::-;33409:7;33432:15;33428:34;;-1:-1:-1;33458:1:15;33451:8;;33428:34;33478:51;33489:6;33497:10;33509:19;33521:6;33509:11;:19::i;9804:142::-;9887:10;:8;:10::i;:::-;-1:-1:-1;;;;;9907:19:15;;;;;;;;:9;:19;;;;;:32;;-1:-1:-1;;9907:32:15;;;;;;;;;;9804:142::o;36085:572::-;36211:15;;-1:-1:-1;;;;;36182:24:15;;36159:7;36182:24;;;:16;:24;;;;;;36159:7;;36230:15;;36182:45;;:28;:45::i;:::-;:63;36178:82;;;-1:-1:-1;36256:1:15;36249:8;;36178:82;36340:15;;-1:-1:-1;;;;;36310:24:15;;36270:17;36310:24;;;:16;:24;;;;;;36270:17;;36290:66;;:45;;:15;;:19;:45::i;:66::-;-1:-1:-1;;;;;36387:19:15;;36366:18;36387:19;;;:11;:19;;;;;;36270:86;;-1:-1:-1;36420:15:15;36416:34;;36446:1;36439:8;;;;;;36416:34;-1:-1:-1;;;;;36489:20:15;;36460:26;36489:20;;;:12;:20;;;;;;;;:66;;36538:17;;36489:66;;;36512:23;;36489:66;-1:-1:-1;;;;;36595:23:15;;;;;;:15;:23;;;;;;36460:95;;-1:-1:-1;36572:78:15;;36639:10;;36572:62;;36624:9;;36572:47;;36460:95;;36572:22;:47::i;:::-;:51;;:62::i;:78::-;36565:85;36085:572;-1:-1:-1;;;;;36085:572:15:o;2493:34::-;;;;;;:::o;3496:57::-;;;;;;;;;;;;;:::o;3775:59::-;;;;;;;;;;;;;:::o;1711:48::-;;;;:::o;2533:34::-;;;;;;;;;:::o;32137:328::-;-1:-1:-1;;;;;32230:20:15;;32207:7;32230:20;;;:12;:20;;;;;;;;32226:77;;;-1:-1:-1;;;;;;32273:19:15;;;;;;:11;:19;;;;;;32266:26;;32226:77;-1:-1:-1;;;;;32355:21:15;;32312:18;32355:21;;;:13;:21;;;;;;32333:44;;32347:6;;32333:13;:44::i;:::-;-1:-1:-1;;;;;32434:23:15;;;;;;:15;:23;;;;;;;;;32409:11;:19;;;;;;;32312:65;;-1:-1:-1;32394:64:15;;:35;;32312:65;;32394:14;:35::i;:::-;:39;;:64::i;41074:214::-;41211:10;;:70;;;-1:-1:-1;;;41211:70:15;;-1:-1:-1;;;;;41211:70:15;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;41211:10:15;;;;;;;:30;;:70;;;;;;;;;;;;;;;:10;:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;41211:70:15;;41074:214;-1:-1:-1;;;;41074:214:15:o;39017:564::-;-1:-1:-1;;;;;39123:24:15;;39083:4;39123:24;;;:16;:24;;;;;;39083:4;;39161:9;39157:37;;39182:5;39189:1;39174:17;;;;;;;39157:37;39204:17;39224:19;39236:6;39224:11;:19::i;:::-;-1:-1:-1;;;;;39276:32:15;;39253:20;39276:32;;;:24;:32;;;;;;39204:39;;-1:-1:-1;39339:24:15;;;:84;;39396:27;:9;39410:12;39396:13;:27::i;:::-;39339:84;;;39366:27;:12;39383:9;39366:16;:27::i;:::-;39318:105;-1:-1:-1;39433:13:15;39449:38;39474:12;39449:20;:4;39318:105;39449:8;:20::i;:38::-;39514:24;;;;;-1:-1:-1;39433:54:15;;-1:-1:-1;;;;39017:564:15;;;;:::o;4188:60::-;;;;;;;;;;;;;:::o;2345:41::-;;;;:::o;5039:67::-;;;;;;;;;;;;;:::o;42662:287::-;42848:10;;:94;;;-1:-1:-1;;;42848:94:15;;-1:-1:-1;;;;;42848:94:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;42848:10:15;;;;;;;:28;;:94;;;;;;;;;;;;;;;:10;:94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;42848:94:15;;42662:287;-1:-1:-1;;;;;;42662:287:15:o;15895:167::-;15988:10;:8;:10::i;:::-;16008:47;-1:-1:-1;;;;;16008:27:15;;16036:9;16047:7;16008:27;:47::i;:::-;15895:167;;;:::o;10717:86::-;10766:10;:8;:10::i;:::-;10786:3;:10;;-1:-1:-1;;;;;;10786:10:15;-1:-1:-1;;;;;10786:10:15;;;;;;;;;;10717:86::o;10584:127::-;10658:10;:8;:10::i;:::-;10678:11;:26;10584:127::o;10934:178::-;11008:10;:8;:10::i;:::-;11028:41;955:5;11038:12;:27;11067:1;11028:9;:41::i;:::-;11079:11;:26;10934:178::o;31173:272::-;31350:10;;:88;;;-1:-1:-1;;;31350:88:15;;-1:-1:-1;;;;;31350:88:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;31350:10:15;;;;;;;;:30;;:88;;;;;;;;;;;;:10;:88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;31350:88:15;;;;;;;;;;;-1:-1:-1;31173:272:15;-1:-1:-1;;;;;;31173:272:15:o;15471:347::-;15555:10;:8;:10::i;:::-;-1:-1:-1;;;;;15597:19:15;;15576:18;15597:19;;;:11;:19;;;;;;15630:20;;;15626:123;;;15666:52;15686:6;15694:23;:7;15706:10;15694:11;:23::i;:::-;15666:19;:52::i;:::-;15732:7;;;15626:123;15759:52;15779:6;15787:23;:10;15802:7;15787:14;:23::i;:::-;15759:19;:52::i;15471:347::-;;;:::o;5189:61::-;;;;;;;;;;;;;:::o;2197:37::-;;;;:::o;41294:298::-;41485:10;;:100;;;-1:-1:-1;;;41485:100:15;;-1:-1:-1;;;;;41485:100:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;41485:10:15;;;;;;;:24;;:100;;;;;;;;;;;;;;;:10;:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;41485:100:15;;41294:298;-1:-1:-1;;;;;;;41294:298:15:o;2979:59::-;;;;;;;;;;;;;;;:::o;3239:57::-;;;;;;;;;;;;;;;:::o;37505:656::-;37696:7;37716:14;37732:13;37749:72;37758:11;37771:5;37778:13;37793:7;37802:18;37749:8;:72::i;:::-;37715:106;;-1:-1:-1;37715:106:15;-1:-1:-1;37831:16:15;37850:21;:5;37860:10;37850:9;:21::i;:::-;37831:40;;37881:15;37910:7;37906:195;;;37943:9;:53;;37977:19;:8;37990:5;37977:12;:19::i;:::-;37943:53;;;37955:19;:8;37968:5;37955:12;:19::i;:::-;37933:63;;37906:195;;;38037:9;:53;;38071:19;:8;38084:5;38071:12;:19::i;:::-;38037:53;;;38049:19;:8;38062:5;38049:12;:19::i;:::-;38027:63;;37906:195;38117:37;38146:7;38117:24;:10;38132:8;38117:14;:24::i;:37::-;38110:44;37505:656;-1:-1:-1;;;;;;;;;;;;37505:656:15:o;2445:41::-;;;;:::o;28383:2735::-;1671:1:47;2260:7;;:19;;2252:63;;;;;-1:-1:-1;;;2252:63:47;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2252:63:47;;;;;;;;;;;;;;;1671:1;2390:7;:18;28556:24:15::1;::::0;;;::::1;;;28552:94;;;28619:10;28606:24;::::0;;;:12:::1;:24;::::0;;;;;28596:39:::1;::::0;28606:24:::1;;28632:2;28596:9;:39::i;:::-;28732:15;:23:::0;;-1:-1:-1;;28732:23:15::1;::::0;;28766:58:::1;28794:16:::0;28812:11;28766:27:::1;:58::i;:::-;28835:11;28849:64;28864:8;28874:16;28892:11;28905:7;28849:14;:64::i;:::-;28835:78;;28923:24;;:::i;:::-;-1:-1:-1::0;28950:14:15::1;::::0;;;:9:::1;:14;::::0;;;;;;;;28923:41;;::::1;::::0;::::1;::::0;;;;;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;;;::::1;::::0;::::1;::::0;;;;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;;::::0;;;;;28974:32:::1;::::0;28984:17;;29003:2:::1;28974:9;:32::i;:::-;29018:24;29044:18:::0;29066:76:::1;29086:8;29096:16;29114:11;29127:7;29136:5;29066:19;:76::i;:::-;29017:125;;;;29152:36;29162:16;29182:1;29162:21;;29185:2;29152:9;:36::i;:::-;29202:16;29222:1;29202:21;29198:325;;;29361:95;29379:8;29389:16;29407:11;29420:1;29423:8;:13;;;29438:7;29447:8;29361:17;:95::i;:::-;-1:-1:-1::0;;29470:15:15::1;:22:::0;;-1:-1:-1;;29470:22:15::1;29488:4;29470:22;::::0;;-1:-1:-1;29506:7:15::1;::::0;-1:-1:-1;;29506:7:15::1;29198:325;29533:17;29553:43;29567:16;29585:10;29553:13;:43::i;:::-;-1:-1:-1::0;;;;;29638:29:15;::::1;;::::0;;;:11:::1;:29;::::0;;;;;29533:63;;-1:-1:-1;29638:44:15::1;::::0;29533:63;29638:33:::1;:44::i;:::-;-1:-1:-1::0;;;;;29606:29:15;::::1;;::::0;;;:11:::1;:29;::::0;;;;;;;;:76;;;;29697:58;;;;;;;::::1;::::0;;;;;;;;;;;::::1;::::0;;;;;;;::::1;29766:65;29790:16;29808:8;:22;;;29766:23;:65::i;:::-;29845:7;29841:214;;;29927:19;::::0;::::1;::::0;29909:13;;29868:80:::1;::::0;29891:16;;29909:38:::1;::::0;:17:::1;:38::i;:::-;29868:22;:80::i;:::-;29962:82;29982:16;30000:43;30014:16;30032:10;30000:13;:43::i;29962:82::-;30065:17;30085:7;:61;;30122:24;30134:11;30122;:24::i;:::-;30085:61;;;30095:24;30107:11;30095;:24::i;:::-;30065:81;;30161:165;30179:3;30184:8;30194:16;30212:11;30225:7;30234:8;:13;;;30249:8;:19;;;30270:8;:22;;;30294:8;:20;;;30316:9;30161:165;;;;;;;;;-1:-1:-1::0;;;;;30161:165:15::1;;;;;;-1:-1:-1::0;;;;;30161:165:15::1;;;;;;-1:-1:-1::0;;;;;30161:165:15::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30342:7;30341:8;:44;;;;;30366:8;:19;;;30353:10;:32;30341:44;30337:245;;;30431:19;::::0;::::1;::::0;30401:27:::1;::::0;30431:35:::1;::::0;30455:10;30431:23:::1;:35::i;:::-;30401:65;;30480:91;30500:16;30518:52;30532:16;30550:19;30518:13;:52::i;:::-;30480:19;:91::i;:::-;30337:245;;30597:7;30592:91;;30620:52;30645:11;30658:8;:13;;;30620:24;:52::i;:::-;30700:14;::::0;;;:9:::1;:14;::::0;;;;30693:21;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;;::::0;30953:17:::1;::::0;30883:89:::1;::::0;30903:16;;30921:50:::1;::::0;30903:16;;30921:13:::1;:50::i;30883:89::-;30982:96;30995:16;31013:50;31027:16;31045:17;;31013:13;:50::i;:::-;31065:12;30982;:96::i;:::-;-1:-1:-1::0;;31089:15:15::1;:22:::0;;-1:-1:-1;;31089:22:15::1;31107:4;31089:22;::::0;;-1:-1:-1;;;;2419:1:47::1;-1:-1:-1::0;;1628:1:47;2563:7;:22;-1:-1:-1;;;28383:2735:15:o;2066:52::-;;;;:::o;31451:182::-;31560:9;;;31594:15;;31544:82;;;-1:-1:-1;;;31544:82:15;;-1:-1:-1;;;;;31544:82:15;;;;;;;;;;31560:9;31544:82;;;;31594:15;;;;31544:82;;;;;;31560:9;31611:14;;;;;;31544:82;;;;;;;31518:7;;31560:9;;;;31544:35;;:82;;;;;;;;;;;;;;;31560:9;31544:82;;;;;;;;;;2926:46;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2926:46:15;;-1:-1:-1;2926:46:15;:::o;14383:541::-;14444:10;:8;:10::i;:::-;-1:-1:-1;;;;;14474:25:15;;;;;;:17;:25;;;;;;14464:40;;14474:25;;14501:2;14464:9;:40::i;:::-;-1:-1:-1;;;;;14556:20:15;;;;;;:12;:20;;;;;;14534:17;;:43;;:21;:43::i;:::-;14514:17;:63;-1:-1:-1;;;;;14594:25:15;;;;;;:17;:25;;;;;;;;14587:32;;-1:-1:-1;;14587:32:15;;;;;;14636:13;:21;;;;;14629:28;;;14674:12;:20;;;;;14667:27;;;14711:20;:28;;;;;14704:35;;;14756:14;:22;;;;;14749:29;;;14795:12;:20;;;;;14788:27;;;;;;14832:23;;;;;;14825:30;;;;;;;14889:21;;:28;;14587:32;14889:25;:28::i;:::-;14865:21;:52;-1:-1:-1;14383:541:15:o;11268:156::-;11360:10;:8;:10::i;:::-;-1:-1:-1;;;;;11380:27:15;;;;;;;:19;:27;;;;;:37;11268:156::o;4898:58::-;;;;;;;;;;;;;:::o;9952:176::-;10049:10;:8;:10::i;:::-;10069:24;:52;;;;;;;-1:-1:-1;;10069:52:15;;;;;;;;;9952:176::o;14930:309::-;15014:7;15033:10;:8;:10::i;:::-;-1:-1:-1;;;;;15070:19:15;;15053:14;15070:19;;;:11;:19;;;;;;15102:11;15099:29;;15124:1;15117:8;;;;;15099:29;-1:-1:-1;;;;;15137:19:15;;15159:1;15137:19;;;:11;:19;;;;;:23;15170:39;15149:6;15191;15199:9;15170:12;:39::i;2868:51::-;;;;;;;;;;;;;;;:::o;1591:28::-;;;-1:-1:-1;;;;;1591:28:15;;:::o;1515:30::-;;;-1:-1:-1;;;;;1515:30:15;;:::o;33755:261::-;33848:7;33871:15;33867:34;;-1:-1:-1;33897:1:15;33890:8;;33867:34;-1:-1:-1;;;;;33929:21:15;;33910:16;33929:21;;;:13;:21;;;;;;33967:42;34002:6;33967:30;:10;33982:2;:14;;;33967;:30::i;35133:946::-;35254:10;;:69;;;-1:-1:-1;;;35254:69:15;;-1:-1:-1;;;;;35254:69:15;;;;;;;;;;;;;;;;-1:-1:-1;;35254:10:15;;;;;;;:38;;:69;;;;;;;;;;;;;;;-1:-1:-1;35254:10:15;:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;35254:69:15;;-1:-1:-1;35254:69:15;35333:50;;35366:7;;;35333:50;-1:-1:-1;;;;;35397:34:15;;;;;;:16;:34;;;;;;35393:184;;35530:15;;35489:57;;:36;:15;35530;35489:19;:36::i;:57::-;-1:-1:-1;;;;;35452:34:15;;;;;;:16;:34;;;;;:94;-1:-1:-1;35560:7:15;;35393:184;35630:15;;-1:-1:-1;;;;;35591:34:15;;;;;;:16;:34;;;;;;35649:15;;35591:55;;:34;:38;:55::i;:::-;:73;35587:110;;;35680:7;;;35587:110;35707:19;35729:36;35748:16;35729:18;:36::i;:::-;-1:-1:-1;;;;;35818:40:15;;;;;;:22;:40;;;;;;35707:58;;-1:-1:-1;35818:57:15;;35707:58;35818:44;:57::i;:::-;-1:-1:-1;;;;;35775:40:15;;;;;;:22;:40;;;;;:100;35963:15;;35922:57;;:36;:15;35963;35922:19;:36::i;:57::-;-1:-1:-1;;;;;35885:34:15;;;;;;:16;:34;;;;;;;;:94;;;;36031:22;:40;;;;;;;35995:77;;;;;;;;;;;;;;;;;;;;;;35133:946;;;;:::o;1170:59::-;1222:7;1170:59;:::o;41598:264::-;41768:10;;:87;;;-1:-1:-1;;;41768:87:15;;-1:-1:-1;;;;;41768:87:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;41768:10:15;;;;;;;:25;;:87;;;;;;;;;;;;;;;:10;:87;;;;;;;;;;5684:41;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5684:41:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2180:459:35:-;2238:7;2479:6;2475:45;;-1:-1:-1;2508:1:35;2501:8;;2475:45;2542:5;;;2546:1;2542;:5;:1;2565:5;;;;;:10;2557:56;;;;-1:-1:-1;;;2557:56:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3101:130;3159:7;3185:39;3189:1;3192;3185:39;;;;;;;;;;;;;-1:-1:-1;;;3185:39:35;;;:3;:39::i;52816:82:15:-;52883:3;;52859:32;;-1:-1:-1;;;;;52883:3:15;52869:10;:17;52888:2;52859:9;:32::i;:::-;52816:82::o;874:176:35:-;932:7;963:5;;;986:6;;;;978:46;;;;;-1:-1:-1;;;978:46:35;;;;;;;;;;;;-1:-1:-1;;;978:46:35;;;;;;;;;;;;;;1321:134;1379:7;1405:43;1409:1;1412;1405:43;;;;;;;;;;;;;;;;;:3;:43::i;53377:125:15:-;53476:18;;;;:6;:18;;;;;53464:10;53456:39;;;;-1:-1:-1;;;53456:39:15;;;;;;;;;;;;-1:-1:-1;;53456:39:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;53229:142;53285:11;;53281:33;;53305:7;;53281:33;53323:41;53348:11;;53333;:26;;53361:2;53323:9;:41::i;46693:219::-;46763:10;-1:-1:-1;;;;;46763:22:15;;;46759:39;;;46789:7;;46759:39;46825:6;;-1:-1:-1;;;;;46825:6:15;46811:10;:20;46807:37;;;46835:7;;46807:37;-1:-1:-1;;;;;46863:25:15;;;;;;:15;:25;;;;;;;;46889:10;46863:37;;;;;;;;46853:52;;46863:37;;46902:2;46853:9;:52::i;:::-;46693:219;:::o;46918:563::-;47031:7;47027:228;;;47054:46;47084:11;-1:-1:-1;;;;;47064:31:15;:16;-1:-1:-1;;;;;47064:31:15;;47097:2;47054:9;:46::i;:::-;-1:-1:-1;;;;;47124:35:15;;;;;;:17;:35;;;;;;47114:50;;47124:35;;47161:2;47114:9;:50::i;:::-;-1:-1:-1;;;;;47189:30:15;;;;;;:12;:30;;;;;;47178:46;;47189:30;;47188:31;47221:2;47178:9;:46::i;:::-;47238:7;;47027:228;-1:-1:-1;;;;;47275:35:15;;;;;;:17;:35;;;;;;47265:50;;47275:35;;47312:2;47265:9;:50::i;:::-;-1:-1:-1;;;;;47335:30:15;;;;;;:12;:30;;;;;;47325:45;;47335:30;;47367:2;47325:9;:45::i;:::-;-1:-1:-1;;;;;47391:25:15;;;;;;:12;:25;;;;;;47380:41;;47391:25;;47390:26;47418:2;47380:9;:41::i;:::-;-1:-1:-1;;;;;47441:28:15;;;;;;:15;:28;;;;;;47431:43;;47441:28;;47471:2;47431:9;:43::i;47962:716::-;48148:7;48167:14;48184:76;48199:8;48209:16;48227:11;48240:7;48249:10;48184:14;:76::i;:::-;48167:93;;48271:18;48292:89;48306:8;48316:16;48334:11;48347:7;48356:5;48363:17;48292:13;:89::i;:::-;48271:110;-1:-1:-1;48400:22:15;:6;48271:110;48400:10;:22::i;:::-;48391:31;;48433:17;48453:39;48467:16;48485:6;48453:13;:39::i;:::-;-1:-1:-1;;;;;48534:29:15;;;;;;:11;:29;;;;;;48433:59;;-1:-1:-1;48534:44:15;;48433:59;48534:33;:44::i;:::-;-1:-1:-1;;;;;48502:29:15;;;;;;:11;:29;;;;;;;;;:76;;;;48594:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;48665:6:15;;47962:716;-1:-1:-1;;;;;;;;;47962:716:15:o;48684:285::-;-1:-1:-1;;;;;48779:21:15;;48738:7;48779:21;;;:13;:21;;;;;;;;;48832:39;;-1:-1:-1;;;48832:39:15;;48865:4;48832:39;;;;;;48738:7;;48779:21;;48738:7;;48779:21;;48832:24;;:39;;;;;48779:21;;48832:39;;;;;48779:21;48832:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;48832:39:15;-1:-1:-1;;;;;48881:21:15;;;;;;:13;48832:39;48881:21;;;;:35;;;48832:39;-1:-1:-1;48934:28:15;48832:39;48950:11;48934:15;:28::i;46458:229::-;46548:10;46544:92;;46574:31;46584:16;;46602:2;46574:9;:31::i;:::-;46619:7;;46544:92;46645:35;46664:11;46655:5;:20;;46677:2;46645:9;:35::i;51131:278::-;-1:-1:-1;;;;;51241:23:15;;;;;;:15;:23;;;;;;:36;;51269:7;51241:27;:36::i;:::-;-1:-1:-1;;;;;51215:23:15;;;;;;:15;:23;;;;;;;;:62;;;51324:11;:19;;;;;;51297:23;;51287:61;;51297:46;;51345:2;51287:9;:61::i;:::-;51363:39;;;-1:-1:-1;;;;;51363:39:15;;;;;;;;;;;;;;;;;;;;;;;51131:278;;:::o;51659:210::-;-1:-1:-1;;;;;51769:21:15;;;;;;:13;:21;;;;;;:37;;51795:10;51769:25;:37::i;:::-;-1:-1:-1;;;;;51745:21:15;;;;;;:13;:21;;;;;;;;;:61;;;;51821:41;;;;;;;;;;;;;;;;;;;;;;;;51659:210;;:::o;51875:::-;-1:-1:-1;;;;;51985:21:15;;;;;;:13;:21;;;;;;:37;;52011:10;51985:25;:37::i;:::-;-1:-1:-1;;;;;51961:21:15;;;;;;:13;:21;;;;;;;;;:61;;;;52037:41;;;;;;;;;;;;;;;;;;;;;;;;51875:210;;:::o;49382:313::-;-1:-1:-1;;;;;49484:19:15;;;;;;:11;:19;;;;;;:32;;49508:7;49484:23;:32::i;:::-;-1:-1:-1;;;;;49462:19:15;;;;;;:11;:19;;;;;;;;:54;;;;49544:39;;-1:-1:-1;;;49544:39:15;;49577:4;49544:39;;;;;;49462:19;;49544:24;;:39;;;;;49462:19;49544:39;;;;;49462:19;49544:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;49544:39:15;-1:-1:-1;;;;;49603:19:15;;;;;;:11;49544:39;49603:19;;;;;49544:39;;-1:-1:-1;49593:45:15;;49603:30;-1:-1:-1;49603:30:15;49635:2;49593:9;:45::i;:::-;49653:35;;;-1:-1:-1;;;;;49653:35:15;;;;;;;;;;;;;;;;;;;;;;;49382:313;;;:::o;49701:292::-;49803:62;;;;;;;;;;;-1:-1:-1;;;49803:62:15;;;;;;;;-1:-1:-1;;;;;49803:19:15;;-1:-1:-1;49803:19:15;;;:11;:19;;;;;;;;:62;;49827:7;;49803:23;:62::i;:::-;-1:-1:-1;;;;;49781:19:15;;;;;;:11;:19;;;;;;;;:84;;;49885:15;:23;;;;;;49875:61;;-1:-1:-1;49885:46:15;49933:2;49875:9;:61::i;:::-;49951:35;;;-1:-1:-1;;;;;49951:35:15;;;;;;;;;;;;;;;;;;;;;;;49701:292;;:::o;52091:338::-;-1:-1:-1;;;;;52203:24:15;;;;;;:16;:24;;;;;;:37;;52232:7;52203:28;:37::i;:::-;-1:-1:-1;;;;;52176:24:15;;;;;;:16;:24;;;;;;;;:64;;;;52269:19;:27;;;;52310:12;;52306:117;;-1:-1:-1;;;;;52346:24:15;;;;;;:16;:24;;;;;;:35;-1:-1:-1;52346:35:15;52338:74;;;;;-1:-1:-1;;;52338:74:15;;;;;;;;;;;;-1:-1:-1;;;52338:74:15;;;;;;;;;;;;;;52995:137;53050:13;;;;;;;53046:80;;;53099:10;53089:21;;;;:9;:21;;;;;;53079:36;;53089:21;;53112:2;53079:9;:36::i;50553:572::-;-1:-1:-1;;;;;50649:19:15;;50633:13;50649:19;;;:11;:19;;;;;;50881:16;;;50877:142;;-1:-1:-1;;;;;50913:19:15;;50935:1;50913:19;;;:11;:19;;;;;;;;:23;;;;50955:33;;;;;;;;;;;;;;;;;;;;;;51002:7;;;50877:142;51050:18;:5;51060:7;51050:9;:18::i;:::-;-1:-1:-1;;;;;51028:19:15;;;;;;:11;:19;;;;;;;;;:40;;;;51083:35;;;;;;;;;;;;;;;;;;;;;;;;50553:572;;;:::o;49200:176::-;49263:19;49292:6;-1:-1:-1;;;;;49285:24:15;;49318:4;49285:39;;;;;;;;;;;;;-1:-1:-1;;;;;49285:39:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;49285:39:15;-1:-1:-1;;;;;49334:21:15;;;;;;;:13;49285:39;49334:21;;;;:35;;;;-1:-1:-1;49200:176:15:o;47487:469::-;47588:7;;47632:80;787:5;47632:54;47644:41;787:5;47669:15;47644:24;:41::i;:::-;47632:7;;:11;:54::i;:80::-;47607:105;-1:-1:-1;47722:17:15;47742:27;:7;47607:105;47742:11;:27::i;:::-;-1:-1:-1;;;;;47801:19:15;;;;;;:11;:19;;;;;;47722:47;;-1:-1:-1;47801:34:15;;47722:47;47801:23;:34::i;:::-;-1:-1:-1;;;;;47779:19:15;;;;;;:11;:19;;;;;:56;47850:68;47791:6;47874:32;47791:6;47896:9;47874:13;:32::i;:::-;47850:68;;;-1:-1:-1;;;;;47850:68:15;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;47935:14:15;47487:469;-1:-1:-1;;;;47487:469:15:o;48975:219::-;49067:47;-1:-1:-1;;;;;49067:27:15;;49095:9;49106:7;49067:27;:47::i;:::-;49148:39;;;-1:-1:-1;;;49148:39:15;;49181:4;49148:39;;;;;;-1:-1:-1;;;;;49148:24:15;;;;;:39;;;;;;;;;;;;;;:24;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;49148:39:15;-1:-1:-1;;;;;49124:21:15;;;;;;;:13;49148:39;49124:21;;;;:63;;;;-1:-1:-1;;48975:219:15:o;50191:356::-;-1:-1:-1;;;;;50293:19:15;;;;;;:11;:19;;;;;;:32;;50317:7;50293:23;:32::i;:::-;-1:-1:-1;;;;;50271:19:15;;;;;;:11;:19;;;;;;;;:54;;;;50359:14;:22;;;;50395:18;;50391:100;;-1:-1:-1;;;;;50439:19:15;;;;;;:11;:19;;;;;;50429:51;;50439:36;-1:-1:-1;50439:36:15;50477:2;50429:9;:51::i;:::-;50505:35;;;-1:-1:-1;;;;;50505:35:15;;;;;;;;;;;;;;;;;;;;;;;50191:356;;;:::o;25013:3364::-;25220:10;;:126;;;-1:-1:-1;;;25220:126:15;;-1:-1:-1;;;;;25220:126:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;25220:10:15;;;;;;;:35;;:126;;;;;-1:-1:-1;;25220:126:15;;;;;;;;:10;:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25356:58;25384:16;25402:11;25356:27;:58::i;:::-;25425:11;25439:64;25454:8;25464:16;25482:11;25495:7;25439:14;:64::i;:::-;25513:25;25541:14;;;:9;:14;;;;;25575:13;;25425:78;;-1:-1:-1;25541:14:15;25565:32;;25575:17;;25594:2;25565:9;:32::i;:::-;25607:42;25634:10;25617:8;:13;;;:27;;25646:2;25607:9;:42::i;:::-;25659:54;25692:16;25669:8;:19;;;:39;;25710:2;25659:9;:54::i;:::-;25745:19;;;;25908:13;;25865:22;;;;25724:18;;25865:57;;:38;;25892:10;25865:26;:38::i;:57::-;25957:22;;;;25842:80;;-1:-1:-1;25957:40:15;;25842:80;25957:26;:40::i;:::-;25932:22;;;:65;26007:55;26031:16;26049:12;26007:23;:55::i;:::-;25013:3364;26084:14;26100:22;26126:97;26144:8;26154:16;26172:11;26185:16;26203:10;26215:7;26126:17;:97::i;:::-;26238:13;;26083:140;;-1:-1:-1;26083:140:15;-1:-1:-1;26238:27:15;;26234:1642;;26309:59;26329:16;26347:11;26360:7;26309:19;:59::i;:::-;26281:25;;;:87;26398:13;;:29;;26416:10;26398:17;:29::i;:::-;26382:45;;;26475:19;;;;26442:53;;26382:45;26442:17;:53::i;:::-;26509:75;26529:8;26539:16;26557:11;26570:7;26579:4;26509:19;:75::i;:::-;;;26603:7;26599:193;;;26630:77;26653:16;26671:35;26686:8;:19;;;26671:10;:14;;:35;;;;:::i;26630:77::-;26725:52;26748:16;26766:10;26725:22;:52::i;:::-;26806:13;26822:7;:61;;26859:24;26871:11;26859;:24::i;:::-;26822:61;;;26832:24;26844:11;26832;:24::i;:::-;26806:77;-1:-1:-1;26902:136:15;26919:3;26924:8;26934:16;26952:11;26965:16;26983:10;26995:7;26806:77;27011:26;:6;27022:14;27011:10;:26::i;:::-;26902:136;;;;;;-1:-1:-1;;;;;26902:136:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27077:13;;27092:19;;;;27113:21;;;;27136:25;;;;27163:22;;;;27187:20;;;;27057:158;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26234:1642;;;;27250:7;27246:168;;;27277:52;27300:16;27318:10;27277:22;:52::i;:::-;27347;27370:16;27388:10;27347:22;:52::i;:::-;27428:13;27444:7;:61;;27481:24;27493:11;27481;:24::i;:::-;27444:61;;;27454:24;27466:11;27454;:24::i;:::-;27428:77;-1:-1:-1;27524:136:15;27541:3;27546:8;27556:16;27574:11;27587:16;27605:10;27617:7;27428:77;27633:26;:6;27644:14;27633:10;:26::i;:::-;27524:136;;;;;;-1:-1:-1;;;;;27524:136:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27698:13;;27713:19;;;;27734:21;;;;27757:25;;;;27784:22;;;;27808:20;;;;27679:150;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;27851:14:15;;;;:9;:14;;;;;27844:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26234:1642;27891:7;27886:88;;27914:49;27939:11;27952:10;27914:24;:49::i;:::-;27988:10;;27984:368;;28018:7;28014:124;;;28045:78;28065:16;28083:39;28097:16;28115:6;28083:13;:39::i;28045:78::-;28151:26;28180:47;28194:16;28212:14;28180:13;:47::i;:::-;28151:76;;28241:61;28254:16;28272:18;28292:9;28241:12;:61::i;:::-;28323:18;-1:-1:-1;28316:25:15;;-1:-1:-1;;;;;28316:25:15;27984:368;-1:-1:-1;28369:1:15;;25013:3364;-1:-1:-1;;;;;;;;;;;;25013:3364:15:o;49999:186::-;-1:-1:-1;;;;;50095:21:15;;;;;;:13;:21;;;;;;;;;50073:11;:19;;;;;;;:43;50069:110;;;50132:36;;;-1:-1:-1;;;50132:36:15;;;;;;;;;;;;-1:-1:-1;;;50132:36:15;;;;;;;;;;;;;;690:175:43;799:58;;;-1:-1:-1;;;;;799:58:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;799:58:43;-1:-1:-1;;;799:58:43;;;772:86;;792:5;;772:19;:86::i;51415:238:15:-;51525:67;;;;;;;;;;;-1:-1:-1;;;51525:67:15;;;;;;;;-1:-1:-1;;;;;51525:23:15;;-1:-1:-1;51525:23:15;;;:15;:23;;;;;;;;:67;;51553:7;;51525:27;:67::i;:::-;-1:-1:-1;;;;;51499:23:15;;;;;;:15;:23;;;;;;;;;:93;;;;51607:39;;;;;;;;;;;;;;;;;;;;;;;;51415:238;;:::o;52435:284::-;-1:-1:-1;;;;;52535:24:15;;52520:12;52535:24;;;:16;:24;;;;;;52573:14;;;52569:89;;;-1:-1:-1;;;;;;52601:24:15;;52628:1;52601:24;;;:16;:24;;;;;:28;52641:7;;52569:89;52695:17;:4;52704:7;52695:8;:17::i;:::-;-1:-1:-1;;;;;52668:24:15;;;;;;:16;:24;;;;;:44;-1:-1:-1;52435:284:15;;:::o;3713:272:35:-;3799:7;3833:12;3826:5;3818:28;;;;-1:-1:-1;;;3818:28:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3856:9;3872:1;3868;:5;;;;;;;3713:272;-1:-1:-1;;;;;3713:272:35:o;1746:187::-;1832:7;1867:12;1859:6;;;;1851:29;;;;-1:-1:-1;;;1851:29:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1902:5:35;;;1746:187::o;43249:3203:15:-;43418:7;43427;43446:11;43460:64;43475:8;43485:16;43503:11;43516:7;43460:14;:64::i;:::-;43534:25;43562:14;;;:9;:14;;;;;43682:13;;43697:25;;;;43446:78;;-1:-1:-1;43562:14:15;;43601:122;;43620:8;;43630:16;;43648:11;;43661:7;;43670:10;;43601:18;:122::i;:::-;43587:136;;43733:14;43757:21;43858:15;43875:13;43892:96;43901:11;43914:8;:13;;;43929:8;:21;;;43952:7;43961:8;:26;;;43892:8;:96::i;:::-;44118:13;;43857:131;;-1:-1:-1;43857:131:15;;-1:-1:-1;43857:131:15;-1:-1:-1;44092:40:15;;:21;:10;43857:131;44092:14;:21::i;:40::-;44076:56;;43249:3203;;44153:14;44213:9;:30;;;;;44242:1;44226:13;:17;44213:30;44209:442;;;-1:-1:-1;44318:20:15;;;;;:44;;44295:67;;44268:13;44463:7;44458:183;;44490:19;44512:46;44526:16;44544:13;44512;:46::i;:::-;44490:68;;44576:50;44596:16;44614:11;44576:19;:50::i;:::-;44458:183;;44666:9;44665:10;:31;;;;;44695:1;44679:13;:17;44665:31;44661:635;;;44734:19;;;;:38;;44758:13;44734:23;:38::i;:::-;44712:19;;;:60;45026:7;45021:183;;45053:19;45075:46;45089:16;45107:13;45075;:46::i;:::-;45053:68;;45139:50;45159:16;45177:11;45139:19;:50::i;:::-;45021:183;;45241:20;;;;;:44;;;45218:67;;44661:635;45415:20;;45411:165;;45460:28;:6;45471:16;45460:10;:28::i;:::-;45524:19;;;;45451:37;;-1:-1:-1;45524:41:15;;45548:16;45524:23;:41::i;:::-;45502:19;;;:63;45411:165;45676:13;;:27;;45672:135;;;45739:19;;;;45728:31;;:6;;:10;:31::i;:::-;45795:1;45773:19;;;:23;45719:40;-1:-1:-1;45672:135:15;45995:6;46015:12;;;46011:337;;;46060:15;:6;46071:3;46060:10;:15::i;:::-;46043:32;;46011:337;;;46128:19;;;;:28;;46152:3;46128:23;:28::i;:::-;46106:19;;;:50;46170:168;;;;46201:17;46221:36;46235:16;46253:3;46221:13;:36::i;:::-;46201:56;;46275:48;46295:16;46313:9;46275:19;:48::i;:::-;46170:168;;46363:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;46422:6;;;;-1:-1:-1;43249:3203:15;-1:-1:-1;;;;;;;;;;;;43249:3203:15:o;2953:751:43:-;3372:23;3398:69;3426:4;3398:69;;;;;;;;;;;;;;;;;3406:5;-1:-1:-1;;;;;3398:27:43;;;:69;;;;;:::i;:::-;3481:17;;3372:95;;-1:-1:-1;3481:21:43;3477:221;;3621:10;3610:30;;;;;;;;;;;;;;;-1:-1:-1;3610:30:43;3602:85;;;;-1:-1:-1;;;3602:85:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3573:193:44;3676:12;3707:52;3729:6;3737:4;3743:1;3746:12;3676;4850:18;4861:6;4850:10;:18::i;:::-;4842:60;;;;;-1:-1:-1;;;4842:60:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;4973:12;4987:23;5014:6;-1:-1:-1;;;;;5014:11:44;5034:5;5042:4;5014:33;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5014:33:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4972:75;;;;5064:52;5082:7;5091:10;5103:12;5064:17;:52::i;718:413::-;1078:20;1116:8;;;718:413::o;7083:725::-;7198:12;7226:7;7222:580;;;-1:-1:-1;7256:10:44;7249:17;;7222:580;7367:17;;:21;7363:429;;7625:10;7619:17;7685:15;7672:10;7668:2;7664:19;7657:44;7574:145;7757:20;;-1:-1:-1;;;7757:20:44;;;;;;;;;;;;;;;;;7764:12;;7757:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "4861600",
            "executionCost": "269139",
            "totalCost": "5130739"
          },
          "external": {
            "BASIS_POINTS_DIVISOR()": "332",
            "FUNDING_RATE_PRECISION()": "661",
            "MAX_FEE_BASIS_POINTS()": "353",
            "MAX_FUNDING_RATE_FACTOR()": "309",
            "MAX_LIQUIDATION_FEE_USD()": "250",
            "MIN_FUNDING_RATE_INTERVAL()": "836",
            "MIN_LEVERAGE()": "662",
            "PRICE_PRECISION()": "447",
            "USDG_DECIMALS()": "243",
            "addRouter(address)": "21499",
            "adjustForDecimals(uint256,address,address)": "infinite",
            "allWhitelistedTokens(uint256)": "2366",
            "allWhitelistedTokensLength()": "1066",
            "approvedRouters(address,address)": "1582",
            "bufferAmounts(address)": "1257",
            "buyUSDG(address,address)": "infinite",
            "clearTokenConfig(address)": "infinite",
            "cumulativeFundingRates(address)": "1807",
            "decreasePosition(address,address,address,uint256,uint256,bool,address)": "infinite",
            "directPoolDeposit(address)": "infinite",
            "errorController()": "1126",
            "errors(uint256)": "infinite",
            "feeReserves(address)": "1390",
            "fundingInterval()": "1285",
            "fundingRateFactor()": "1659",
            "getDelta(address,uint256,uint256,bool,uint256)": "infinite",
            "getEntryFundingRate(address,address,bool)": "infinite",
            "getFeeBasisPoints(address,uint256,uint256,uint256,bool)": "infinite",
            "getFundingFee(address,address,address,bool,uint256,uint256)": "infinite",
            "getGlobalShortDelta(address)": "infinite",
            "getMaxPrice(address)": "infinite",
            "getMinPrice(address)": "infinite",
            "getNextAveragePrice(address,uint256,uint256,bool,uint256,uint256,uint256)": "infinite",
            "getNextFundingRate(address)": "infinite",
            "getNextGlobalShortAveragePrice(address,uint256,uint256)": "infinite",
            "getPosition(address,address,address,bool)": "7204",
            "getPositionDelta(address,address,address,bool)": "infinite",
            "getPositionFee(address,address,address,bool,uint256)": "infinite",
            "getPositionKey(address,address,address,bool)": "977",
            "getPositionLeverage(address,address,address,bool)": "infinite",
            "getRedemptionAmount(address,uint256)": "infinite",
            "getRedemptionCollateral(address)": "infinite",
            "getRedemptionCollateralUsd(address)": "infinite",
            "getTargetUsdgAmount(address)": "infinite",
            "getUtilisation(address)": "infinite",
            "globalShortAveragePrices(address)": "1521",
            "globalShortSizes(address)": "1257",
            "gov()": "1193",
            "guaranteedUsd(address)": "1586",
            "hasDynamicFees()": "1363",
            "inManagerMode()": "1220",
            "inPrivateLiquidationMode()": "1243",
            "includeAmmPrice()": "1473",
            "increasePosition(address,address,address,uint256,bool)": "infinite",
            "initialize(address,address,address,uint256,uint256,uint256)": "infinite",
            "isInitialized()": "1518",
            "isLeverageEnabled()": "1617",
            "isLiquidator(address)": "1401",
            "isManager(address)": "1664",
            "isSwapEnabled()": "1507",
            "lastFundingTimes(address)": "1300",
            "liquidatePosition(address,address,address,bool,address)": "infinite",
            "liquidationFeeUsd()": "1198",
            "marginFeeBasisPoints()": "1440",
            "maxGasPrice()": "1572",
            "maxGlobalShortSizes(address)": "1389",
            "maxLeverage()": "1527",
            "maxUsdgAmounts(address)": "1631",
            "minProfitBasisPoints(address)": "1191",
            "minProfitTime()": "1196",
            "mintBurnFeeBasisPoints()": "1175",
            "poolAmounts(address)": "1411",
            "positions(bytes32)": "6315",
            "priceFeed()": "1610",
            "removeRouter(address)": "21624",
            "reservedAmounts(address)": "1763",
            "router()": "1609",
            "sellUSDG(address,address)": "infinite",
            "setBufferAmount(address,uint256)": "infinite",
            "setError(uint256,string)": "infinite",
            "setErrorController(address)": "infinite",
            "setFees(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)": "infinite",
            "setFundingRate(uint256,uint256,uint256)": "infinite",
            "setGov(address)": "infinite",
            "setInManagerMode(bool)": "infinite",
            "setInPrivateLiquidationMode(bool)": "infinite",
            "setIsLeverageEnabled(bool)": "infinite",
            "setIsSwapEnabled(bool)": "infinite",
            "setLiquidator(address,bool)": "infinite",
            "setManager(address,bool)": "infinite",
            "setMaxGasPrice(uint256)": "infinite",
            "setMaxGlobalShortSize(address,uint256)": "infinite",
            "setMaxLeverage(uint256)": "infinite",
            "setPriceFeed(address)": "infinite",
            "setTokenConfig(address,uint256,uint256,uint256,uint256,bool,bool)": "infinite",
            "setUsdgAmount(address,uint256)": "infinite",
            "setVaultUtils(address)": "infinite",
            "shortableTokens(address)": "1400",
            "stableFundingRateFactor()": "1176",
            "stableSwapFeeBasisPoints()": "1350",
            "stableTaxBasisPoints()": "1110",
            "stableTokens(address)": "1798",
            "swap(address,address,address)": "infinite",
            "swapFeeBasisPoints()": "1373",
            "taxBasisPoints()": "1593",
            "tokenBalances(address)": "1367",
            "tokenDecimals(address)": "1279",
            "tokenToUsdMin(address,uint256)": "infinite",
            "tokenWeights(address)": "1609",
            "totalTokenWeights()": "1306",
            "updateCumulativeFundingRate(address,address)": "infinite",
            "upgradeVault(address,address,uint256)": "infinite",
            "usdToToken(address,uint256,uint256)": "infinite",
            "usdToTokenMax(address,uint256)": "infinite",
            "usdToTokenMin(address,uint256)": "infinite",
            "usdg()": "1587",
            "usdgAmounts(address)": "1368",
            "useSwapPricing()": "1572",
            "validateLiquidation(address,address,address,bool,bool)": "infinite",
            "vaultUtils()": "1467",
            "whitelistedTokenCount()": "1373",
            "whitelistedTokens(address)": "1378",
            "withdrawFees(address,address)": "infinite"
          },
          "internal": {
            "_collectMarginFees(address,address,address,bool,uint256,uint256,uint256)": "infinite",
            "_collectSwapFees(address,uint256,uint256)": "infinite",
            "_decreaseGlobalShortSize(address,uint256)": "infinite",
            "_decreaseGuaranteedUsd(address,uint256)": "infinite",
            "_decreasePoolAmount(address,uint256)": "infinite",
            "_decreasePosition(address,address,address,uint256,uint256,bool,address)": "infinite",
            "_decreaseReservedAmount(address,uint256)": "infinite",
            "_decreaseUsdgAmount(address,uint256)": "infinite",
            "_increaseGlobalShortSize(address,uint256)": "infinite",
            "_increaseGuaranteedUsd(address,uint256)": "infinite",
            "_increasePoolAmount(address,uint256)": "infinite",
            "_increaseReservedAmount(address,uint256)": "infinite",
            "_increaseUsdgAmount(address,uint256)": "infinite",
            "_onlyGov()": "infinite",
            "_reduceCollateral(address,address,address,uint256,uint256,bool)": "infinite",
            "_transferIn(address)": "infinite",
            "_transferOut(address,uint256,address)": "infinite",
            "_updateTokenBalance(address)": "infinite",
            "_validate(bool,uint256)": "infinite",
            "_validateBufferAmount(address)": "infinite",
            "_validateGasPrice()": "infinite",
            "_validateManager()": "infinite",
            "_validatePosition(uint256,uint256)": "infinite",
            "_validateRouter(address)": "infinite",
            "_validateTokens(address,address,bool)": "infinite"
          }
        },
        "methodIdentifiers": {
          "BASIS_POINTS_DIVISOR()": "126082cf",
          "FUNDING_RATE_PRECISION()": "6be6026b",
          "MAX_FEE_BASIS_POINTS()": "4befe2ca",
          "MAX_FUNDING_RATE_FACTOR()": "8a39735a",
          "MAX_LIQUIDATION_FEE_USD()": "07c58752",
          "MIN_FUNDING_RATE_INTERVAL()": "fce28c10",
          "MIN_LEVERAGE()": "34c1557d",
          "PRICE_PRECISION()": "95082d25",
          "USDG_DECIMALS()": "870d917c",
          "addRouter(address)": "24ca984e",
          "adjustForDecimals(uint256,address,address)": "42152873",
          "allWhitelistedTokens(uint256)": "e468baf0",
          "allWhitelistedTokensLength()": "0842b076",
          "approvedRouters(address,address)": "60922199",
          "bufferAmounts(address)": "4a993ee9",
          "buyUSDG(address,address)": "817bb857",
          "clearTokenConfig(address)": "e67f59a7",
          "cumulativeFundingRates(address)": "c65bc7b1",
          "decreasePosition(address,address,address,uint256,uint256,bool,address)": "82a08490",
          "directPoolDeposit(address)": "5f7bc119",
          "errorController()": "48f35cbb",
          "errors(uint256)": "fed1a606",
          "feeReserves(address)": "1ce9cb8f",
          "fundingInterval()": "9849e412",
          "fundingRateFactor()": "c4f718bf",
          "getDelta(address,uint256,uint256,bool,uint256)": "5c07eaab",
          "getEntryFundingRate(address,address,bool)": "b1cc53ab",
          "getFeeBasisPoints(address,uint256,uint256,uint256,bool)": "c7e074c3",
          "getFundingFee(address,address,address,bool,uint256,uint256)": "da76524c",
          "getGlobalShortDelta(address)": "b364accb",
          "getMaxPrice(address)": "e124e6d2",
          "getMinPrice(address)": "81a612d6",
          "getNextAveragePrice(address,uint256,uint256,bool,uint256,uint256,uint256)": "db97495f",
          "getNextFundingRate(address)": "a93acac2",
          "getNextGlobalShortAveragePrice(address,uint256,uint256)": "9d7432ca",
          "getPosition(address,address,address,bool)": "4a3f088d",
          "getPositionDelta(address,address,address,bool)": "45a6f370",
          "getPositionFee(address,address,address,bool,uint256)": "fdaf6ac3",
          "getPositionKey(address,address,address,bool)": "2d4b0576",
          "getPositionLeverage(address,address,address,bool)": "51723e82",
          "getRedemptionAmount(address,uint256)": "2c668ec1",
          "getRedemptionCollateral(address)": "b136ca49",
          "getRedemptionCollateralUsd(address)": "29ff9615",
          "getTargetUsdgAmount(address)": "3a05dcc1",
          "getUtilisation(address)": "04fef1db",
          "globalShortAveragePrices(address)": "62749803",
          "globalShortSizes(address)": "8a78daa8",
          "gov()": "12d43a51",
          "guaranteedUsd(address)": "f07456ce",
          "hasDynamicFees()": "9f392eb3",
          "inManagerMode()": "9060b1ca",
          "inPrivateLiquidationMode()": "181e210e",
          "includeAmmPrice()": "ab08c1c6",
          "increasePosition(address,address,address,uint256,bool)": "48d91abf",
          "initialize(address,address,address,uint256,uint256,uint256)": "728cdbca",
          "isInitialized()": "392e53cd",
          "isLeverageEnabled()": "3e72a262",
          "isLiquidator(address)": "529a356f",
          "isManager(address)": "f3ae2415",
          "isSwapEnabled()": "351a964d",
          "lastFundingTimes(address)": "d8f897c3",
          "liquidatePosition(address,address,address,bool,address)": "de2ea948",
          "liquidationFeeUsd()": "174d2694",
          "marginFeeBasisPoints()": "318bc689",
          "maxGasPrice()": "3de39c11",
          "maxGlobalShortSizes(address)": "9698d25a",
          "maxLeverage()": "ae3302c2",
          "maxUsdgAmounts(address)": "ad1e4f8d",
          "minProfitBasisPoints(address)": "88b1fbdf",
          "minProfitTime()": "d9ac4225",
          "mintBurnFeeBasisPoints()": "4d47b304",
          "poolAmounts(address)": "52f55eed",
          "positions(bytes32)": "514ea4bf",
          "priceFeed()": "741bef1a",
          "removeRouter(address)": "6ae0b154",
          "reservedAmounts(address)": "c3c7b9e9",
          "router()": "f887ea40",
          "sellUSDG(address,address)": "711e6190",
          "setBufferAmount(address,uint256)": "8585f4d2",
          "setError(uint256,string)": "28e67be5",
          "setErrorController(address)": "8f7b8404",
          "setFees(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)": "40eb3802",
          "setFundingRate(uint256,uint256,uint256)": "8a27d468",
          "setGov(address)": "cfad57a2",
          "setInManagerMode(bool)": "24b0c04d",
          "setInPrivateLiquidationMode(bool)": "f07bbf77",
          "setIsLeverageEnabled(bool)": "7c2eb9f7",
          "setIsSwapEnabled(bool)": "30455ede",
          "setLiquidator(address,bool)": "4453a374",
          "setManager(address,bool)": "a5e90eee",
          "setMaxGasPrice(uint256)": "d2fa635e",
          "setMaxGlobalShortSize(address,uint256)": "efa10a6e",
          "setMaxLeverage(uint256)": "d3127e63",
          "setPriceFeed(address)": "724e78da",
          "setTokenConfig(address,uint256,uint256,uint256,uint256,bool,bool)": "3c5a6e35",
          "setUsdgAmount(address,uint256)": "d66b000d",
          "setVaultUtils(address)": "71089f4d",
          "shortableTokens(address)": "db3555fb",
          "stableFundingRateFactor()": "134ca63b",
          "stableSwapFeeBasisPoints()": "df73a267",
          "stableTaxBasisPoints()": "10eb56c2",
          "stableTokens(address)": "42b60b03",
          "swap(address,address,address)": "93316212",
          "swapFeeBasisPoints()": "a22f2392",
          "taxBasisPoints()": "7a210a2b",
          "tokenBalances(address)": "523fba7f",
          "tokenDecimals(address)": "8ee573ac",
          "tokenToUsdMin(address,uint256)": "0a48d5a9",
          "tokenWeights(address)": "ab2f3ad4",
          "totalTokenWeights()": "dc8f5fac",
          "updateCumulativeFundingRate(address,address)": "fbfded6d",
          "upgradeVault(address,address,uint256)": "cea0c328",
          "usdToToken(address,uint256,uint256)": "fa12dbc0",
          "usdToTokenMax(address,uint256)": "a42ab3d2",
          "usdToTokenMin(address,uint256)": "9899cd02",
          "usdg()": "f5b91b7b",
          "usdgAmounts(address)": "1aa4ace5",
          "useSwapPricing()": "b06423f3",
          "validateLiquidation(address,address,address,bool,bool)": "d54d5a9f",
          "vaultUtils()": "6abbe0c8",
          "whitelistedTokenCount()": "62287a32",
          "whitelistedTokens(address)": "daf9c210",
          "withdrawFees(address,address)": "f2555278"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdgAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"BuyUSDG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryFundingRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"}],\"name\":\"ClosePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeUsd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeTokens\",\"type\":\"uint256\"}],\"name\":\"CollectMarginFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeUsd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeTokens\",\"type\":\"uint256\"}],\"name\":\"CollectSwapFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DecreaseGuaranteedUsd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DecreasePoolAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"DecreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DecreaseReservedAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DecreaseUsdgAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DirectPoolDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncreaseGuaranteedUsd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncreasePoolAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"IncreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncreaseReservedAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncreaseUsdgAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"markPrice\",\"type\":\"uint256\"}],\"name\":\"LiquidatePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdgAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"SellUSDG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutAfterFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundingRate\",\"type\":\"uint256\"}],\"name\":\"UpdateFundingRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasProfit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"UpdatePnl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryFundingRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"markPrice\",\"type\":\"uint256\"}],\"name\":\"UpdatePosition\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNDING_RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE_BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FUNDING_RATE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LIQUIDATION_FEE_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FUNDING_RATE_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LEVERAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDG_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"addRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenDiv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenMul\",\"type\":\"address\"}],\"name\":\"adjustForDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allWhitelistedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allWhitelistedTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bufferAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"buyUSDG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"clearTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cumulativeFundingRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"decreasePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"directPoolDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"errorController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"errors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingRateFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_lastIncreasedTime\",\"type\":\"uint256\"}],\"name\":\"getDelta\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getEntryFundingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdgDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taxBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_increment\",\"type\":\"bool\"}],\"name\":\"getFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_entryFundingRate\",\"type\":\"uint256\"}],\"name\":\"getFundingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getGlobalShortDelta\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getMaxPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getMinPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastIncreasedTime\",\"type\":\"uint256\"}],\"name\":\"getNextAveragePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getNextFundingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"}],\"name\":\"getNextGlobalShortAveragePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getPositionDelta\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"}],\"name\":\"getPositionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getPositionKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getPositionLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdgAmount\",\"type\":\"uint256\"}],\"name\":\"getRedemptionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getRedemptionCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getRedemptionCollateralUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTargetUsdgAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUtilisation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"globalShortAveragePrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"globalShortSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"guaranteedUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasDynamicFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inManagerMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inPrivateLiquidationMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"includeAmmPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"increasePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationFeeUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingRateFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableFundingRateFactor\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLeverageEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastFundingTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"liquidatePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationFeeUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxGlobalShortSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxUsdgAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minProfitBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minProfitTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintBurnFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFundingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lastIncreasedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"removeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reservedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"sellUSDG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBufferAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_errorCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_error\",\"type\":\"string\"}],\"name\":\"setError\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_errorController\",\"type\":\"address\"}],\"name\":\"setErrorController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableTaxBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintBurnFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableSwapFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marginFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationFeeUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minProfitTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasDynamicFees\",\"type\":\"bool\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundingInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingRateFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableFundingRateFactor\",\"type\":\"uint256\"}],\"name\":\"setFundingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inManagerMode\",\"type\":\"bool\"}],\"name\":\"setInManagerMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inPrivateLiquidationMode\",\"type\":\"bool\"}],\"name\":\"setInPrivateLiquidationMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isLeverageEnabled\",\"type\":\"bool\"}],\"name\":\"setIsLeverageEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isSwapEnabled\",\"type\":\"bool\"}],\"name\":\"setIsSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isManager\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxGasPrice\",\"type\":\"uint256\"}],\"name\":\"setMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxGlobalShortSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLeverage\",\"type\":\"uint256\"}],\"name\":\"setMaxLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minProfitBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxUsdgAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isShortable\",\"type\":\"bool\"}],\"name\":\"setTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setUsdgAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVaultUtils\",\"name\":\"_vaultUtils\",\"type\":\"address\"}],\"name\":\"setVaultUtils\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shortableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableFundingRateFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwapFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"tokenToUsdMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"}],\"name\":\"updateCumulativeFundingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"upgradeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"usdToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"}],\"name\":\"usdToTokenMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"}],\"name\":\"usdToTokenMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usdgAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useSwapPricing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_raise\",\"type\":\"bool\"}],\"name\":\"validateLiquidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultUtils\",\"outputs\":[{\"internalType\":\"contract IVaultUtils\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistedTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Vault.sol\":\"Vault\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/core/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../tokens/interfaces/IUSDG.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IVaultUtils.sol\\\";\\nimport \\\"./interfaces/IVaultPriceFeed.sol\\\";\\n\\ncontract Vault is ReentrancyGuard, IVault {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct Position {\\n        uint256 size;\\n        uint256 collateral;\\n        uint256 averagePrice;\\n        uint256 entryFundingRate;\\n        uint256 reserveAmount;\\n        int256 realisedPnl;\\n        uint256 lastIncreasedTime;\\n    }\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\\n    uint256 public constant MIN_LEVERAGE = 10000; // 1x\\n    uint256 public constant USDG_DECIMALS = 18;\\n    uint256 public constant MAX_FEE_BASIS_POINTS = 500; // 5%\\n    uint256 public constant MAX_LIQUIDATION_FEE_USD = 100 * PRICE_PRECISION; // 100 USD\\n    uint256 public constant MIN_FUNDING_RATE_INTERVAL = 1 hours;\\n    uint256 public constant MAX_FUNDING_RATE_FACTOR = 10000; // 1%\\n\\n    bool public override isInitialized;\\n    bool public override isSwapEnabled = true;\\n    bool public override isLeverageEnabled = true;\\n\\n    IVaultUtils public vaultUtils;\\n\\n    address public errorController;\\n\\n    address public override router;\\n    address public override priceFeed;\\n\\n    address public override usdg;\\n    address public override gov;\\n\\n    uint256 public override whitelistedTokenCount;\\n\\n    uint256 public override maxLeverage = 50 * 10000; // 50x\\n\\n    uint256 public override liquidationFeeUsd;\\n    uint256 public override taxBasisPoints = 50; // 0.5%\\n    uint256 public override stableTaxBasisPoints = 20; // 0.2%\\n    uint256 public override mintBurnFeeBasisPoints = 30; // 0.3%\\n    uint256 public override swapFeeBasisPoints = 30; // 0.3%\\n    uint256 public override stableSwapFeeBasisPoints = 4; // 0.04%\\n    uint256 public override marginFeeBasisPoints = 10; // 0.1%\\n\\n    uint256 public override minProfitTime;\\n    bool public override hasDynamicFees = false;\\n\\n    uint256 public override fundingInterval = 8 hours;\\n    uint256 public override fundingRateFactor;\\n    uint256 public override stableFundingRateFactor;\\n    uint256 public override totalTokenWeights;\\n\\n    bool public includeAmmPrice = true;\\n    bool public useSwapPricing = false;\\n\\n    bool public override inManagerMode = false;\\n    bool public override inPrivateLiquidationMode = false;\\n\\n    uint256 public override maxGasPrice;\\n\\n    mapping (address => mapping (address => bool)) public override approvedRouters;\\n    mapping (address => bool) public override isLiquidator;\\n    mapping (address => bool) public override isManager;\\n\\n    address[] public override allWhitelistedTokens;\\n\\n    mapping (address => bool) public override whitelistedTokens;\\n    mapping (address => uint256) public override tokenDecimals;\\n    mapping (address => uint256) public override minProfitBasisPoints;\\n    mapping (address => bool) public override stableTokens;\\n    mapping (address => bool) public override shortableTokens;\\n\\n    // tokenBalances is used only to determine _transferIn values\\n    mapping (address => uint256) public override tokenBalances;\\n\\n    // tokenWeights allows customisation of index composition\\n    mapping (address => uint256) public override tokenWeights;\\n\\n    // usdgAmounts tracks the amount of USDG debt for each whitelisted token\\n    mapping (address => uint256) public override usdgAmounts;\\n\\n    // maxUsdgAmounts allows setting a max amount of USDG debt for a token\\n    mapping (address => uint256) public override maxUsdgAmounts;\\n\\n    // poolAmounts tracks the number of received tokens that can be used for leverage\\n    // this is tracked separately from tokenBalances to exclude funds that are deposited as margin collateral\\n    mapping (address => uint256) public override poolAmounts;\\n\\n    // reservedAmounts tracks the number of tokens reserved for open leverage positions\\n    mapping (address => uint256) public override reservedAmounts;\\n\\n    // bufferAmounts allows specification of an amount to exclude from swaps\\n    // this can be used to ensure a certain amount of liquidity is available for leverage positions\\n    mapping (address => uint256) public override bufferAmounts;\\n\\n    // guaranteedUsd tracks the amount of USD that is \\\"guaranteed\\\" by opened leverage positions\\n    // this value is used to calculate the redemption values for selling of USDG\\n    // this is an estimated amount, it is possible for the actual guaranteed value to be lower\\n    // in the case of sudden price decreases, the guaranteed value should be corrected\\n    // after liquidations are carried out\\n    mapping (address => uint256) public override guaranteedUsd;\\n\\n    // cumulativeFundingRates tracks the funding rates based on utilization\\n    mapping (address => uint256) public override cumulativeFundingRates;\\n    // lastFundingTimes tracks the last time funding was updated for a token\\n    mapping (address => uint256) public override lastFundingTimes;\\n\\n    // positions tracks all open positions\\n    mapping (bytes32 => Position) public positions;\\n\\n    // feeReserves tracks the amount of fees per token\\n    mapping (address => uint256) public override feeReserves;\\n\\n    mapping (address => uint256) public override globalShortSizes;\\n    mapping (address => uint256) public override globalShortAveragePrices;\\n    mapping (address => uint256) public override maxGlobalShortSizes;\\n\\n    mapping (uint256 => string) public errors;\\n\\n    event BuyUSDG(address account, address token, uint256 tokenAmount, uint256 usdgAmount, uint256 feeBasisPoints);\\n    event SellUSDG(address account, address token, uint256 usdgAmount, uint256 tokenAmount, uint256 feeBasisPoints);\\n    event Swap(address account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut, uint256 amountOutAfterFees, uint256 feeBasisPoints);\\n\\n    event IncreasePosition(\\n        bytes32 key,\\n        address account,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 collateralDelta,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 price,\\n        uint256 fee\\n    );\\n    event DecreasePosition(\\n        bytes32 key,\\n        address account,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 collateralDelta,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 price,\\n        uint256 fee\\n    );\\n    event LiquidatePosition(\\n        bytes32 key,\\n        address account,\\n        address collateralToken,\\n        address indexToken,\\n        bool isLong,\\n        uint256 size,\\n        uint256 collateral,\\n        uint256 reserveAmount,\\n        int256 realisedPnl,\\n        uint256 markPrice\\n    );\\n    event UpdatePosition(\\n        bytes32 key,\\n        uint256 size,\\n        uint256 collateral,\\n        uint256 averagePrice,\\n        uint256 entryFundingRate,\\n        uint256 reserveAmount,\\n        int256 realisedPnl,\\n        uint256 markPrice\\n    );\\n    event ClosePosition(\\n        bytes32 key,\\n        uint256 size,\\n        uint256 collateral,\\n        uint256 averagePrice,\\n        uint256 entryFundingRate,\\n        uint256 reserveAmount,\\n        int256 realisedPnl\\n    );\\n\\n    event UpdateFundingRate(address token, uint256 fundingRate);\\n    event UpdatePnl(bytes32 key, bool hasProfit, uint256 delta);\\n\\n    event CollectSwapFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event CollectMarginFees(address token, uint256 feeUsd, uint256 feeTokens);\\n\\n    event DirectPoolDeposit(address token, uint256 amount);\\n    event IncreasePoolAmount(address token, uint256 amount);\\n    event DecreasePoolAmount(address token, uint256 amount);\\n    event IncreaseUsdgAmount(address token, uint256 amount);\\n    event DecreaseUsdgAmount(address token, uint256 amount);\\n    event IncreaseReservedAmount(address token, uint256 amount);\\n    event DecreaseReservedAmount(address token, uint256 amount);\\n    event IncreaseGuaranteedUsd(address token, uint256 amount);\\n    event DecreaseGuaranteedUsd(address token, uint256 amount);\\n\\n    // once the parameters are verified to be working correctly,\\n    // gov should be set to a timelock contract or a governance contract\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    function initialize(\\n        address _router,\\n        address _usdg,\\n        address _priceFeed,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _fundingRateFactor,\\n        uint256 _stableFundingRateFactor\\n    ) external {\\n        _onlyGov();\\n        _validate(!isInitialized, 1);\\n        isInitialized = true;\\n\\n        router = _router;\\n        usdg = _usdg;\\n        priceFeed = _priceFeed;\\n        liquidationFeeUsd = _liquidationFeeUsd;\\n        fundingRateFactor = _fundingRateFactor;\\n        stableFundingRateFactor = _stableFundingRateFactor;\\n    }\\n\\n    function setVaultUtils(IVaultUtils _vaultUtils) external override {\\n        _onlyGov();\\n        vaultUtils = _vaultUtils;\\n    }\\n\\n    function setErrorController(address _errorController) external {\\n        _onlyGov();\\n        errorController = _errorController;\\n    }\\n\\n    function setError(uint256 _errorCode, string calldata _error) external override {\\n        require(msg.sender == errorController, \\\"Vault: invalid errorController\\\");\\n        errors[_errorCode] = _error;\\n    }\\n\\n    function allWhitelistedTokensLength() external override view returns (uint256) {\\n        return allWhitelistedTokens.length;\\n    }\\n\\n    function setInManagerMode(bool _inManagerMode) external override {\\n        _onlyGov();\\n        inManagerMode = _inManagerMode;\\n    }\\n\\n    function setManager(address _manager, bool _isManager) external override {\\n        _onlyGov();\\n        isManager[_manager] = _isManager;\\n    }\\n\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external override {\\n        _onlyGov();\\n        inPrivateLiquidationMode = _inPrivateLiquidationMode;\\n    }\\n\\n    function setLiquidator(address _liquidator, bool _isActive) external override {\\n        _onlyGov();\\n        isLiquidator[_liquidator] = _isActive;\\n    }\\n\\n    function setIsSwapEnabled(bool _isSwapEnabled) external override {\\n        _onlyGov();\\n        isSwapEnabled = _isSwapEnabled;\\n    }\\n\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external override {\\n        _onlyGov();\\n        isLeverageEnabled = _isLeverageEnabled;\\n    }\\n\\n    function setMaxGasPrice(uint256 _maxGasPrice) external override {\\n        _onlyGov();\\n        maxGasPrice = _maxGasPrice;\\n    }\\n\\n    function setGov(address _gov) external {\\n        _onlyGov();\\n        gov = _gov;\\n    }\\n\\n    function setPriceFeed(address _priceFeed) external override {\\n        _onlyGov();\\n        priceFeed = _priceFeed;\\n    }\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external override {\\n        _onlyGov();\\n        _validate(_maxLeverage > MIN_LEVERAGE, 2);\\n        maxLeverage = _maxLeverage;\\n    }\\n\\n    function setBufferAmount(address _token, uint256 _amount) external override {\\n        _onlyGov();\\n        bufferAmounts[_token] = _amount;\\n    }\\n\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external override {\\n        _onlyGov();\\n        maxGlobalShortSizes[_token] = _amount;\\n    }\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external override {\\n        _onlyGov();\\n        _validate(_taxBasisPoints <= MAX_FEE_BASIS_POINTS, 3);\\n        _validate(_stableTaxBasisPoints <= MAX_FEE_BASIS_POINTS, 4);\\n        _validate(_mintBurnFeeBasisPoints <= MAX_FEE_BASIS_POINTS, 5);\\n        _validate(_swapFeeBasisPoints <= MAX_FEE_BASIS_POINTS, 6);\\n        _validate(_stableSwapFeeBasisPoints <= MAX_FEE_BASIS_POINTS, 7);\\n        _validate(_marginFeeBasisPoints <= MAX_FEE_BASIS_POINTS, 8);\\n        _validate(_liquidationFeeUsd <= MAX_LIQUIDATION_FEE_USD, 9);\\n        taxBasisPoints = _taxBasisPoints;\\n        stableTaxBasisPoints = _stableTaxBasisPoints;\\n        mintBurnFeeBasisPoints = _mintBurnFeeBasisPoints;\\n        swapFeeBasisPoints = _swapFeeBasisPoints;\\n        stableSwapFeeBasisPoints = _stableSwapFeeBasisPoints;\\n        marginFeeBasisPoints = _marginFeeBasisPoints;\\n        liquidationFeeUsd = _liquidationFeeUsd;\\n        minProfitTime = _minProfitTime;\\n        hasDynamicFees = _hasDynamicFees;\\n    }\\n\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external override {\\n        _onlyGov();\\n        _validate(_fundingInterval >= MIN_FUNDING_RATE_INTERVAL, 10);\\n        _validate(_fundingRateFactor <= MAX_FUNDING_RATE_FACTOR, 11);\\n        _validate(_stableFundingRateFactor <= MAX_FUNDING_RATE_FACTOR, 12);\\n        fundingInterval = _fundingInterval;\\n        fundingRateFactor = _fundingRateFactor;\\n        stableFundingRateFactor = _stableFundingRateFactor;\\n    }\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _tokenWeight,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external override {\\n        _onlyGov();\\n        // increment token count for the first time\\n        if (!whitelistedTokens[_token]) {\\n            whitelistedTokenCount = whitelistedTokenCount.add(1);\\n            allWhitelistedTokens.push(_token);\\n        }\\n\\n        uint256 _totalTokenWeights = totalTokenWeights;\\n        _totalTokenWeights = _totalTokenWeights.sub(tokenWeights[_token]);\\n\\n        whitelistedTokens[_token] = true;\\n        tokenDecimals[_token] = _tokenDecimals;\\n        tokenWeights[_token] = _tokenWeight;\\n        minProfitBasisPoints[_token] = _minProfitBps;\\n        maxUsdgAmounts[_token] = _maxUsdgAmount;\\n        stableTokens[_token] = _isStable;\\n        shortableTokens[_token] = _isShortable;\\n\\n        totalTokenWeights = _totalTokenWeights.add(_tokenWeight);\\n\\n        // validate price feed\\n        getMaxPrice(_token);\\n    }\\n\\n    function clearTokenConfig(address _token) external {\\n        _onlyGov();\\n        _validate(whitelistedTokens[_token], 13);\\n        totalTokenWeights = totalTokenWeights.sub(tokenWeights[_token]);\\n        delete whitelistedTokens[_token];\\n        delete tokenDecimals[_token];\\n        delete tokenWeights[_token];\\n        delete minProfitBasisPoints[_token];\\n        delete maxUsdgAmounts[_token];\\n        delete stableTokens[_token];\\n        delete shortableTokens[_token];\\n        whitelistedTokenCount = whitelistedTokenCount.sub(1);\\n    }\\n\\n    function withdrawFees(address _token, address _receiver) external override returns (uint256) {\\n        _onlyGov();\\n        uint256 amount = feeReserves[_token];\\n        if(amount == 0) { return 0; }\\n        feeReserves[_token] = 0;\\n        _transferOut(_token, amount, _receiver);\\n        return amount;\\n    }\\n\\n    function addRouter(address _router) external {\\n        approvedRouters[msg.sender][_router] = true;\\n    }\\n\\n    function removeRouter(address _router) external {\\n        approvedRouters[msg.sender][_router] = false;\\n    }\\n\\n    function setUsdgAmount(address _token, uint256 _amount) external override {\\n        _onlyGov();\\n\\n        uint256 usdgAmount = usdgAmounts[_token];\\n        if (_amount > usdgAmount) {\\n            _increaseUsdgAmount(_token, _amount.sub(usdgAmount));\\n            return;\\n        }\\n\\n        _decreaseUsdgAmount(_token, usdgAmount.sub(_amount));\\n    }\\n\\n    // the governance controlling this function should have a timelock\\n    function upgradeVault(address _newVault, address _token, uint256 _amount) external {\\n        _onlyGov();\\n        IERC20(_token).safeTransfer(_newVault, _amount);\\n    }\\n\\n    // deposit into the pool without minting USDG tokens\\n    // useful in allowing the pool to become over-collaterised\\n    function directPoolDeposit(address _token) external override nonReentrant {\\n        _validate(whitelistedTokens[_token], 14);\\n        uint256 tokenAmount = _transferIn(_token);\\n        _validate(tokenAmount > 0, 15);\\n        _increasePoolAmount(_token, tokenAmount);\\n        emit DirectPoolDeposit(_token, tokenAmount);\\n    }\\n\\n    function buyUSDG(address _token, address _receiver) external override nonReentrant returns (uint256) {\\n        _validateManager();\\n        _validate(whitelistedTokens[_token], 16);\\n        useSwapPricing = true;\\n\\n        uint256 tokenAmount = _transferIn(_token);\\n        _validate(tokenAmount > 0, 17);\\n\\n        updateCumulativeFundingRate(_token, _token);\\n\\n        uint256 price = getMinPrice(_token);\\n\\n        uint256 usdgAmount = tokenAmount.mul(price).div(PRICE_PRECISION);\\n        usdgAmount = adjustForDecimals(usdgAmount, _token, usdg);\\n        _validate(usdgAmount > 0, 18);\\n\\n        uint256 feeBasisPoints = vaultUtils.getBuyUsdgFeeBasisPoints(_token, usdgAmount);\\n        uint256 amountAfterFees = _collectSwapFees(_token, tokenAmount, feeBasisPoints);\\n        uint256 mintAmount = amountAfterFees.mul(price).div(PRICE_PRECISION);\\n        mintAmount = adjustForDecimals(mintAmount, _token, usdg);\\n\\n        _increaseUsdgAmount(_token, mintAmount);\\n        _increasePoolAmount(_token, amountAfterFees);\\n\\n        IUSDG(usdg).mint(_receiver, mintAmount);\\n\\n        emit BuyUSDG(_receiver, _token, tokenAmount, mintAmount, feeBasisPoints);\\n\\n        useSwapPricing = false;\\n        return mintAmount;\\n    }\\n\\n    function sellUSDG(address _token, address _receiver) external override nonReentrant returns (uint256) {\\n        _validateManager();\\n        _validate(whitelistedTokens[_token], 19);\\n        useSwapPricing = true;\\n\\n        uint256 usdgAmount = _transferIn(usdg);\\n        _validate(usdgAmount > 0, 20);\\n\\n        updateCumulativeFundingRate(_token, _token);\\n\\n        uint256 redemptionAmount = getRedemptionAmount(_token, usdgAmount);\\n        _validate(redemptionAmount > 0, 21);\\n\\n        _decreaseUsdgAmount(_token, usdgAmount);\\n        _decreasePoolAmount(_token, redemptionAmount);\\n\\n        IUSDG(usdg).burn(address(this), usdgAmount);\\n\\n        // the _transferIn call increased the value of tokenBalances[usdg]\\n        // usually decreases in token balances are synced by calling _transferOut\\n        // however, for usdg, the tokens are burnt, so _updateTokenBalance should\\n        // be manually called to record the decrease in tokens\\n        _updateTokenBalance(usdg);\\n\\n        uint256 feeBasisPoints = vaultUtils.getSellUsdgFeeBasisPoints(_token, usdgAmount);\\n        uint256 amountOut = _collectSwapFees(_token, redemptionAmount, feeBasisPoints);\\n        _validate(amountOut > 0, 22);\\n\\n        _transferOut(_token, amountOut, _receiver);\\n\\n        emit SellUSDG(_receiver, _token, usdgAmount, amountOut, feeBasisPoints);\\n\\n        useSwapPricing = false;\\n        return amountOut;\\n    }\\n\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external override nonReentrant returns (uint256) {\\n        _validate(isSwapEnabled, 23);\\n        _validate(whitelistedTokens[_tokenIn], 24);\\n        _validate(whitelistedTokens[_tokenOut], 25);\\n        _validate(_tokenIn != _tokenOut, 26);\\n\\n        useSwapPricing = true;\\n\\n        updateCumulativeFundingRate(_tokenIn, _tokenIn);\\n        updateCumulativeFundingRate(_tokenOut, _tokenOut);\\n\\n        uint256 amountIn = _transferIn(_tokenIn);\\n        _validate(amountIn > 0, 27);\\n\\n        uint256 priceIn = getMinPrice(_tokenIn);\\n        uint256 priceOut = getMaxPrice(_tokenOut);\\n\\n        uint256 amountOut = amountIn.mul(priceIn).div(priceOut);\\n        amountOut = adjustForDecimals(amountOut, _tokenIn, _tokenOut);\\n\\n        // adjust usdgAmounts by the same usdgAmount as debt is shifted between the assets\\n        uint256 usdgAmount = amountIn.mul(priceIn).div(PRICE_PRECISION);\\n        usdgAmount = adjustForDecimals(usdgAmount, _tokenIn, usdg);\\n\\n        uint256 feeBasisPoints = vaultUtils.getSwapFeeBasisPoints(_tokenIn, _tokenOut, usdgAmount);\\n        uint256 amountOutAfterFees = _collectSwapFees(_tokenOut, amountOut, feeBasisPoints);\\n\\n        _increaseUsdgAmount(_tokenIn, usdgAmount);\\n        _decreaseUsdgAmount(_tokenOut, usdgAmount);\\n\\n        _increasePoolAmount(_tokenIn, amountIn);\\n        _decreasePoolAmount(_tokenOut, amountOut);\\n\\n        _validateBufferAmount(_tokenOut);\\n\\n        _transferOut(_tokenOut, amountOutAfterFees, _receiver);\\n\\n        emit Swap(_receiver, _tokenIn, _tokenOut, amountIn, amountOut, amountOutAfterFees, feeBasisPoints);\\n\\n        useSwapPricing = false;\\n        return amountOutAfterFees;\\n    }\\n\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external override nonReentrant {\\n        _validate(isLeverageEnabled, 28);\\n        _validateGasPrice();\\n        _validateRouter(_account);\\n        _validateTokens(_collateralToken, _indexToken, _isLong);\\n        vaultUtils.validateIncreasePosition(_account, _collateralToken, _indexToken, _sizeDelta, _isLong);\\n\\n        updateCumulativeFundingRate(_collateralToken, _indexToken);\\n\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        Position storage position = positions[key];\\n\\n        uint256 price = _isLong ? getMaxPrice(_indexToken) : getMinPrice(_indexToken);\\n\\n        if (position.size == 0) {\\n            position.averagePrice = price;\\n        }\\n\\n        if (position.size > 0 && _sizeDelta > 0) {\\n            position.averagePrice = getNextAveragePrice(_indexToken, position.size, position.averagePrice, _isLong, price, _sizeDelta, position.lastIncreasedTime);\\n        }\\n\\n        uint256 fee = _collectMarginFees(_account, _collateralToken, _indexToken, _isLong, _sizeDelta, position.size, position.entryFundingRate);\\n        uint256 collateralDelta = _transferIn(_collateralToken);\\n        uint256 collateralDeltaUsd = tokenToUsdMin(_collateralToken, collateralDelta);\\n\\n        position.collateral = position.collateral.add(collateralDeltaUsd);\\n        _validate(position.collateral >= fee, 29);\\n\\n        position.collateral = position.collateral.sub(fee);\\n        position.entryFundingRate = getEntryFundingRate(_collateralToken, _indexToken, _isLong);\\n        position.size = position.size.add(_sizeDelta);\\n        position.lastIncreasedTime = block.timestamp;\\n\\n        _validate(position.size > 0, 30);\\n        _validatePosition(position.size, position.collateral);\\n        validateLiquidation(_account, _collateralToken, _indexToken, _isLong, true);\\n\\n        // reserve tokens to pay profits on the position\\n        uint256 reserveDelta = usdToTokenMax(_collateralToken, _sizeDelta);\\n        position.reserveAmount = position.reserveAmount.add(reserveDelta);\\n        _increaseReservedAmount(_collateralToken, reserveDelta);\\n\\n        if (_isLong) {\\n            // guaranteedUsd stores the sum of (position.size - position.collateral) for all positions\\n            // if a fee is charged on the collateral then guaranteedUsd should be increased by that fee amount\\n            // since (position.size - position.collateral) would have increased by `fee`\\n            _increaseGuaranteedUsd(_collateralToken, _sizeDelta.add(fee));\\n            _decreaseGuaranteedUsd(_collateralToken, collateralDeltaUsd);\\n            // treat the deposited collateral as part of the pool\\n            _increasePoolAmount(_collateralToken, collateralDelta);\\n            // fees need to be deducted from the pool since fees are deducted from position.collateral\\n            // and collateral is treated as part of the pool\\n            _decreasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, fee));\\n        } else {\\n            if (globalShortSizes[_indexToken] == 0) {\\n                globalShortAveragePrices[_indexToken] = price;\\n            } else {\\n                globalShortAveragePrices[_indexToken] = getNextGlobalShortAveragePrice(_indexToken, price, _sizeDelta);\\n            }\\n\\n            _increaseGlobalShortSize(_indexToken, _sizeDelta);\\n        }\\n\\n        emit IncreasePosition(key, _account, _collateralToken, _indexToken, collateralDeltaUsd, _sizeDelta, _isLong, price, fee);\\n        emit UpdatePosition(key, position.size, position.collateral, position.averagePrice, position.entryFundingRate, position.reserveAmount, position.realisedPnl, price);\\n    }\\n\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external override nonReentrant returns (uint256) {\\n        _validateGasPrice();\\n        _validateRouter(_account);\\n        return _decreasePosition(_account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, _receiver);\\n    }\\n\\n    function _decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) private returns (uint256) {\\n        vaultUtils.validateDecreasePosition(_account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, _receiver);\\n        updateCumulativeFundingRate(_collateralToken, _indexToken);\\n\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        Position storage position = positions[key];\\n        _validate(position.size > 0, 31);\\n        _validate(position.size >= _sizeDelta, 32);\\n        _validate(position.collateral >= _collateralDelta, 33);\\n\\n        uint256 collateral = position.collateral;\\n        // scrop variables to avoid stack too deep errors\\n        {\\n        uint256 reserveDelta = position.reserveAmount.mul(_sizeDelta).div(position.size);\\n        position.reserveAmount = position.reserveAmount.sub(reserveDelta);\\n        _decreaseReservedAmount(_collateralToken, reserveDelta);\\n        }\\n\\n        (uint256 usdOut, uint256 usdOutAfterFee) = _reduceCollateral(_account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong);\\n\\n        if (position.size != _sizeDelta) {\\n            position.entryFundingRate = getEntryFundingRate(_collateralToken, _indexToken, _isLong);\\n            position.size = position.size.sub(_sizeDelta);\\n\\n            _validatePosition(position.size, position.collateral);\\n            validateLiquidation(_account, _collateralToken, _indexToken, _isLong, true);\\n\\n            if (_isLong) {\\n                _increaseGuaranteedUsd(_collateralToken, collateral.sub(position.collateral));\\n                _decreaseGuaranteedUsd(_collateralToken, _sizeDelta);\\n            }\\n\\n            uint256 price = _isLong ? getMinPrice(_indexToken) : getMaxPrice(_indexToken);\\n            emit DecreasePosition(key, _account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, price, usdOut.sub(usdOutAfterFee));\\n            emit UpdatePosition(key, position.size, position.collateral, position.averagePrice, position.entryFundingRate, position.reserveAmount, position.realisedPnl, price);\\n        } else {\\n            if (_isLong) {\\n                _increaseGuaranteedUsd(_collateralToken, collateral);\\n                _decreaseGuaranteedUsd(_collateralToken, _sizeDelta);\\n            }\\n\\n            uint256 price = _isLong ? getMinPrice(_indexToken) : getMaxPrice(_indexToken);\\n            emit DecreasePosition(key, _account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, price, usdOut.sub(usdOutAfterFee));\\n            emit ClosePosition(key, position.size, position.collateral, position.averagePrice, position.entryFundingRate, position.reserveAmount, position.realisedPnl);\\n\\n            delete positions[key];\\n        }\\n\\n        if (!_isLong) {\\n            _decreaseGlobalShortSize(_indexToken, _sizeDelta);\\n        }\\n\\n        if (usdOut > 0) {\\n            if (_isLong) {\\n                _decreasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, usdOut));\\n            }\\n            uint256 amountOutAfterFees = usdToTokenMin(_collateralToken, usdOutAfterFee);\\n            _transferOut(_collateralToken, amountOutAfterFees, _receiver);\\n            return amountOutAfterFees;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external override nonReentrant {\\n        if (inPrivateLiquidationMode) {\\n            _validate(isLiquidator[msg.sender], 34);\\n        }\\n\\n        // set includeAmmPrice to false to prevent manipulated liquidations\\n        includeAmmPrice = false;\\n\\n        updateCumulativeFundingRate(_collateralToken, _indexToken);\\n\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        Position memory position = positions[key];\\n        _validate(position.size > 0, 35);\\n\\n        (uint256 liquidationState, uint256 marginFees) = validateLiquidation(_account, _collateralToken, _indexToken, _isLong, false);\\n        _validate(liquidationState != 0, 36);\\n        if (liquidationState == 2) {\\n            // max leverage exceeded but there is collateral remaining after deducting losses so decreasePosition instead\\n            _decreasePosition(_account, _collateralToken, _indexToken, 0, position.size, _isLong, _account);\\n            includeAmmPrice = true;\\n            return;\\n        }\\n\\n        uint256 feeTokens = usdToTokenMin(_collateralToken, marginFees);\\n        feeReserves[_collateralToken] = feeReserves[_collateralToken].add(feeTokens);\\n        emit CollectMarginFees(_collateralToken, marginFees, feeTokens);\\n\\n        _decreaseReservedAmount(_collateralToken, position.reserveAmount);\\n        if (_isLong) {\\n            _decreaseGuaranteedUsd(_collateralToken, position.size.sub(position.collateral));\\n            _decreasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, marginFees));\\n        }\\n\\n        uint256 markPrice = _isLong ? getMinPrice(_indexToken) : getMaxPrice(_indexToken);\\n        emit LiquidatePosition(key, _account, _collateralToken, _indexToken, _isLong, position.size, position.collateral, position.reserveAmount, position.realisedPnl, markPrice);\\n\\n        if (!_isLong && marginFees < position.collateral) {\\n            uint256 remainingCollateral = position.collateral.sub(marginFees);\\n            _increasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, remainingCollateral));\\n        }\\n\\n        if (!_isLong) {\\n            _decreaseGlobalShortSize(_indexToken, position.size);\\n        }\\n\\n        delete positions[key];\\n\\n        // pay the fee receiver using the pool, we assume that in general the liquidated amount should be sufficient to cover\\n        // the liquidation fees\\n        _decreasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, liquidationFeeUsd));\\n        _transferOut(_collateralToken, usdToTokenMin(_collateralToken, liquidationFeeUsd), _feeReceiver);\\n\\n        includeAmmPrice = true;\\n    }\\n\\n    // validateLiquidation returns (state, fees)\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) public view returns (uint256, uint256) {\\n        return vaultUtils.validateLiquidation(_account, _collateralToken, _indexToken, _isLong, _raise);\\n    }\\n\\n    function getMaxPrice(address _token) public override view returns (uint256) {\\n        return IVaultPriceFeed(priceFeed).getPrice(_token, true, includeAmmPrice, useSwapPricing);\\n    }\\n\\n    function getMinPrice(address _token) public override view returns (uint256) {\\n        return IVaultPriceFeed(priceFeed).getPrice(_token, false, includeAmmPrice, useSwapPricing);\\n    }\\n\\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) public override view returns (uint256) {\\n        uint256 price = getMaxPrice(_token);\\n        uint256 redemptionAmount = _usdgAmount.mul(PRICE_PRECISION).div(price);\\n        return adjustForDecimals(redemptionAmount, usdg, _token);\\n    }\\n\\n    function getRedemptionCollateral(address _token) public view returns (uint256) {\\n        if (stableTokens[_token]) {\\n            return poolAmounts[_token];\\n        }\\n        uint256 collateral = usdToTokenMin(_token, guaranteedUsd[_token]);\\n        return collateral.add(poolAmounts[_token]).sub(reservedAmounts[_token]);\\n    }\\n\\n    function getRedemptionCollateralUsd(address _token) public view returns (uint256) {\\n        return tokenToUsdMin(_token, getRedemptionCollateral(_token));\\n    }\\n\\n    function adjustForDecimals(uint256 _amount, address _tokenDiv, address _tokenMul) public view returns (uint256) {\\n        uint256 decimalsDiv = _tokenDiv == usdg ? USDG_DECIMALS : tokenDecimals[_tokenDiv];\\n        uint256 decimalsMul = _tokenMul == usdg ? USDG_DECIMALS : tokenDecimals[_tokenMul];\\n        return _amount.mul(10 ** decimalsMul).div(10 ** decimalsDiv);\\n    }\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) public override view returns (uint256) {\\n        if (_tokenAmount == 0) { return 0; }\\n        uint256 price = getMinPrice(_token);\\n        uint256 decimals = tokenDecimals[_token];\\n        return _tokenAmount.mul(price).div(10 ** decimals);\\n    }\\n\\n    function usdToTokenMax(address _token, uint256 _usdAmount) public view returns (uint256) {\\n        if (_usdAmount == 0) { return 0; }\\n        return usdToToken(_token, _usdAmount, getMinPrice(_token));\\n    }\\n\\n    function usdToTokenMin(address _token, uint256 _usdAmount) public view returns (uint256) {\\n        if (_usdAmount == 0) { return 0; }\\n        return usdToToken(_token, _usdAmount, getMaxPrice(_token));\\n    }\\n\\n    function usdToToken(address _token, uint256 _usdAmount, uint256 _price) public view returns (uint256) {\\n        if (_usdAmount == 0) { return 0; }\\n        uint256 decimals = tokenDecimals[_token];\\n        return _usdAmount.mul(10 ** decimals).div(_price);\\n    }\\n\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) public override view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256) {\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        Position memory position = positions[key];\\n        uint256 realisedPnl = position.realisedPnl > 0 ? uint256(position.realisedPnl) : uint256(-position.realisedPnl);\\n        return (\\n            position.size, // 0\\n            position.collateral, // 1\\n            position.averagePrice, // 2\\n            position.entryFundingRate, // 3\\n            position.reserveAmount, // 4\\n            realisedPnl, // 5\\n            position.realisedPnl >= 0, // 6\\n            position.lastIncreasedTime // 7\\n        );\\n    }\\n\\n    function getPositionKey(address _account, address _collateralToken, address _indexToken, bool _isLong) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\n            _account,\\n            _collateralToken,\\n            _indexToken,\\n            _isLong\\n        ));\\n    }\\n\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) public {\\n        bool shouldUpdate = vaultUtils.updateCumulativeFundingRate(_collateralToken, _indexToken);\\n        if (!shouldUpdate) {\\n            return;\\n        }\\n\\n        if (lastFundingTimes[_collateralToken] == 0) {\\n            lastFundingTimes[_collateralToken] = block.timestamp.div(fundingInterval).mul(fundingInterval);\\n            return;\\n        }\\n\\n        if (lastFundingTimes[_collateralToken].add(fundingInterval) > block.timestamp) {\\n            return;\\n        }\\n\\n        uint256 fundingRate = getNextFundingRate(_collateralToken);\\n        cumulativeFundingRates[_collateralToken] = cumulativeFundingRates[_collateralToken].add(fundingRate);\\n        lastFundingTimes[_collateralToken] = block.timestamp.div(fundingInterval).mul(fundingInterval);\\n\\n        emit UpdateFundingRate(_collateralToken, cumulativeFundingRates[_collateralToken]);\\n    }\\n\\n    function getNextFundingRate(address _token) public override view returns (uint256) {\\n        if (lastFundingTimes[_token].add(fundingInterval) > block.timestamp) { return 0; }\\n\\n        uint256 intervals = block.timestamp.sub(lastFundingTimes[_token]).div(fundingInterval);\\n        uint256 poolAmount = poolAmounts[_token];\\n        if (poolAmount == 0) { return 0; }\\n\\n        uint256 _fundingRateFactor = stableTokens[_token] ? stableFundingRateFactor : fundingRateFactor;\\n        return _fundingRateFactor.mul(reservedAmounts[_token]).mul(intervals).div(poolAmount);\\n    }\\n\\n    function getUtilisation(address _token) public view returns (uint256) {\\n        uint256 poolAmount = poolAmounts[_token];\\n        if (poolAmount == 0) { return 0; }\\n\\n        return reservedAmounts[_token].mul(FUNDING_RATE_PRECISION).div(poolAmount);\\n    }\\n\\n    function getPositionLeverage(address _account, address _collateralToken, address _indexToken, bool _isLong) public view returns (uint256) {\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        Position memory position = positions[key];\\n        _validate(position.collateral > 0, 37);\\n        return position.size.mul(BASIS_POINTS_DIVISOR).div(position.collateral);\\n    }\\n\\n    // for longs: nextAveragePrice = (nextPrice * nextSize)/ (nextSize + delta)\\n    // for shorts: nextAveragePrice = (nextPrice * nextSize) / (nextSize - delta)\\n    function getNextAveragePrice(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _nextPrice, uint256 _sizeDelta, uint256 _lastIncreasedTime) public view returns (uint256) {\\n        (bool hasProfit, uint256 delta) = getDelta(_indexToken, _size, _averagePrice, _isLong, _lastIncreasedTime);\\n        uint256 nextSize = _size.add(_sizeDelta);\\n        uint256 divisor;\\n        if (_isLong) {\\n            divisor = hasProfit ? nextSize.add(delta) : nextSize.sub(delta);\\n        } else {\\n            divisor = hasProfit ? nextSize.sub(delta) : nextSize.add(delta);\\n        }\\n        return _nextPrice.mul(nextSize).div(divisor);\\n    }\\n\\n    // for longs: nextAveragePrice = (nextPrice * nextSize)/ (nextSize + delta)\\n    // for shorts: nextAveragePrice = (nextPrice * nextSize) / (nextSize - delta)\\n    function getNextGlobalShortAveragePrice(address _indexToken, uint256 _nextPrice, uint256 _sizeDelta) public view returns (uint256) {\\n        uint256 size = globalShortSizes[_indexToken];\\n        uint256 averagePrice = globalShortAveragePrices[_indexToken];\\n        uint256 priceDelta = averagePrice > _nextPrice ? averagePrice.sub(_nextPrice) : _nextPrice.sub(averagePrice);\\n        uint256 delta = size.mul(priceDelta).div(averagePrice);\\n        bool hasProfit = averagePrice > _nextPrice;\\n\\n        uint256 nextSize = size.add(_sizeDelta);\\n        uint256 divisor = hasProfit ? nextSize.sub(delta) : nextSize.add(delta);\\n\\n        return _nextPrice.mul(nextSize).div(divisor);\\n    }\\n\\n    function getGlobalShortDelta(address _token) public view returns (bool, uint256) {\\n        uint256 size = globalShortSizes[_token];\\n        if (size == 0) { return (false, 0); }\\n\\n        uint256 nextPrice = getMaxPrice(_token);\\n        uint256 averagePrice = globalShortAveragePrices[_token];\\n        uint256 priceDelta = averagePrice > nextPrice ? averagePrice.sub(nextPrice) : nextPrice.sub(averagePrice);\\n        uint256 delta = size.mul(priceDelta).div(averagePrice);\\n        bool hasProfit = averagePrice > nextPrice;\\n\\n        return (hasProfit, delta);\\n    }\\n\\n    function getPositionDelta(address _account, address _collateralToken, address _indexToken, bool _isLong) public view returns (bool, uint256) {\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        Position memory position = positions[key];\\n        return getDelta(_indexToken, position.size, position.averagePrice, _isLong, position.lastIncreasedTime);\\n    }\\n\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) public override view returns (bool, uint256) {\\n        _validate(_averagePrice > 0, 38);\\n        uint256 price = _isLong ? getMinPrice(_indexToken) : getMaxPrice(_indexToken);\\n        uint256 priceDelta = _averagePrice > price ? _averagePrice.sub(price) : price.sub(_averagePrice);\\n        uint256 delta = _size.mul(priceDelta).div(_averagePrice);\\n\\n        bool hasProfit;\\n\\n        if (_isLong) {\\n            hasProfit = price > _averagePrice;\\n        } else {\\n            hasProfit = _averagePrice > price;\\n        }\\n\\n        // if the minProfitTime has passed then there will be no min profit threshold\\n        // the min profit threshold helps to prevent front-running issues\\n        uint256 minBps = block.timestamp > _lastIncreasedTime.add(minProfitTime) ? 0 : minProfitBasisPoints[_indexToken];\\n        if (hasProfit && delta.mul(BASIS_POINTS_DIVISOR) <= _size.mul(minBps)) {\\n            delta = 0;\\n        }\\n\\n        return (hasProfit, delta);\\n    }\\n\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) public view returns (uint256) {\\n        return vaultUtils.getEntryFundingRate(_collateralToken, _indexToken, _isLong);\\n    }\\n\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) public view returns (uint256) {\\n        return vaultUtils.getFundingFee(_account, _collateralToken, _indexToken, _isLong, _size, _entryFundingRate);\\n    }\\n\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) public view returns (uint256) {\\n        return vaultUtils.getPositionFee(_account, _collateralToken, _indexToken, _isLong, _sizeDelta);\\n    }\\n\\n    // cases to consider\\n    // 1. initialAmount is far from targetAmount, action increases balance slightly => high rebate\\n    // 2. initialAmount is far from targetAmount, action increases balance largely => high rebate\\n    // 3. initialAmount is close to targetAmount, action increases balance slightly => low rebate\\n    // 4. initialAmount is far from targetAmount, action reduces balance slightly => high tax\\n    // 5. initialAmount is far from targetAmount, action reduces balance largely => high tax\\n    // 6. initialAmount is close to targetAmount, action reduces balance largely => low tax\\n    // 7. initialAmount is above targetAmount, nextAmount is below targetAmount and vice versa\\n    // 8. a large swap should have similar fees as the same trade split into multiple smaller swaps\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) public override view returns (uint256) {\\n        return vaultUtils.getFeeBasisPoints(_token, _usdgDelta, _feeBasisPoints, _taxBasisPoints, _increment);\\n    }\\n\\n    function getTargetUsdgAmount(address _token) public override view returns (uint256) {\\n        uint256 supply = IERC20(usdg).totalSupply();\\n        if (supply == 0) { return 0; }\\n        uint256 weight = tokenWeights[_token];\\n        return weight.mul(supply).div(totalTokenWeights);\\n    }\\n\\n    function _reduceCollateral(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong) private returns (uint256, uint256) {\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        Position storage position = positions[key];\\n\\n        uint256 fee = _collectMarginFees(_account, _collateralToken, _indexToken, _isLong, _sizeDelta, position.size, position.entryFundingRate);\\n        bool hasProfit;\\n        uint256 adjustedDelta;\\n\\n        // scope variables to avoid stack too deep errors\\n        {\\n        (bool _hasProfit, uint256 delta) = getDelta(_indexToken, position.size, position.averagePrice, _isLong, position.lastIncreasedTime);\\n        hasProfit = _hasProfit;\\n        // get the proportional change in pnl\\n        adjustedDelta = _sizeDelta.mul(delta).div(position.size);\\n        }\\n\\n        uint256 usdOut;\\n        // transfer profits out\\n        if (hasProfit && adjustedDelta > 0) {\\n            usdOut = adjustedDelta;\\n            position.realisedPnl = position.realisedPnl + int256(adjustedDelta);\\n\\n            // pay out realised profits from the pool amount for short positions\\n            if (!_isLong) {\\n                uint256 tokenAmount = usdToTokenMin(_collateralToken, adjustedDelta);\\n                _decreasePoolAmount(_collateralToken, tokenAmount);\\n            }\\n        }\\n\\n        if (!hasProfit && adjustedDelta > 0) {\\n            position.collateral = position.collateral.sub(adjustedDelta);\\n\\n            // transfer realised losses to the pool for short positions\\n            // realised losses for long positions are not transferred here as\\n            // _increasePoolAmount was already called in increasePosition for longs\\n            if (!_isLong) {\\n                uint256 tokenAmount = usdToTokenMin(_collateralToken, adjustedDelta);\\n                _increasePoolAmount(_collateralToken, tokenAmount);\\n            }\\n\\n            position.realisedPnl = position.realisedPnl - int256(adjustedDelta);\\n        }\\n\\n        // reduce the position's collateral by _collateralDelta\\n        // transfer _collateralDelta out\\n        if (_collateralDelta > 0) {\\n            usdOut = usdOut.add(_collateralDelta);\\n            position.collateral = position.collateral.sub(_collateralDelta);\\n        }\\n\\n        // if the position will be closed, then transfer the remaining collateral out\\n        if (position.size == _sizeDelta) {\\n            usdOut = usdOut.add(position.collateral);\\n            position.collateral = 0;\\n        }\\n\\n        // if the usdOut is more than the fee then deduct the fee from the usdOut directly\\n        // else deduct the fee from the position's collateral\\n        uint256 usdOutAfterFee = usdOut;\\n        if (usdOut > fee) {\\n            usdOutAfterFee = usdOut.sub(fee);\\n        } else {\\n            position.collateral = position.collateral.sub(fee);\\n            if (_isLong) {\\n                uint256 feeTokens = usdToTokenMin(_collateralToken, fee);\\n                _decreasePoolAmount(_collateralToken, feeTokens);\\n            }\\n        }\\n\\n        emit UpdatePnl(key, hasProfit, adjustedDelta);\\n\\n        return (usdOut, usdOutAfterFee);\\n    }\\n\\n    function _validatePosition(uint256 _size, uint256 _collateral) private view {\\n        if (_size == 0) {\\n            _validate(_collateral == 0, 39);\\n            return;\\n        }\\n        _validate(_size >= _collateral, 40);\\n    }\\n\\n    function _validateRouter(address _account) private view {\\n        if (msg.sender == _account) { return; }\\n        if (msg.sender == router) { return; }\\n        _validate(approvedRouters[_account][msg.sender], 41);\\n    }\\n\\n    function _validateTokens(address _collateralToken, address _indexToken, bool _isLong) private view {\\n        if (_isLong) {\\n            _validate(_collateralToken == _indexToken, 42);\\n            _validate(whitelistedTokens[_collateralToken], 43);\\n            _validate(!stableTokens[_collateralToken], 44);\\n            return;\\n        }\\n\\n        _validate(whitelistedTokens[_collateralToken], 45);\\n        _validate(stableTokens[_collateralToken], 46);\\n        _validate(!stableTokens[_indexToken], 47);\\n        _validate(shortableTokens[_indexToken], 48);\\n    }\\n\\n    function _collectSwapFees(address _token, uint256 _amount, uint256 _feeBasisPoints) private returns (uint256) {\\n        uint256 afterFeeAmount = _amount.mul(BASIS_POINTS_DIVISOR.sub(_feeBasisPoints)).div(BASIS_POINTS_DIVISOR);\\n        uint256 feeAmount = _amount.sub(afterFeeAmount);\\n        feeReserves[_token] = feeReserves[_token].add(feeAmount);\\n        emit CollectSwapFees(_token, tokenToUsdMin(_token, feeAmount), feeAmount);\\n        return afterFeeAmount;\\n    }\\n\\n    function _collectMarginFees(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta, uint256 _size, uint256 _entryFundingRate) private returns (uint256) {\\n        uint256 feeUsd = getPositionFee(_account, _collateralToken, _indexToken, _isLong, _sizeDelta);\\n\\n        uint256 fundingFee = getFundingFee(_account, _collateralToken, _indexToken, _isLong, _size, _entryFundingRate);\\n        feeUsd = feeUsd.add(fundingFee);\\n\\n        uint256 feeTokens = usdToTokenMin(_collateralToken, feeUsd);\\n        feeReserves[_collateralToken] = feeReserves[_collateralToken].add(feeTokens);\\n\\n        emit CollectMarginFees(_collateralToken, feeUsd, feeTokens);\\n        return feeUsd;\\n    }\\n\\n    function _transferIn(address _token) private returns (uint256) {\\n        uint256 prevBalance = tokenBalances[_token];\\n        uint256 nextBalance = IERC20(_token).balanceOf(address(this));\\n        tokenBalances[_token] = nextBalance;\\n\\n        return nextBalance.sub(prevBalance);\\n    }\\n\\n    function _transferOut(address _token, uint256 _amount, address _receiver) private {\\n        IERC20(_token).safeTransfer(_receiver, _amount);\\n        tokenBalances[_token] = IERC20(_token).balanceOf(address(this));\\n    }\\n\\n    function _updateTokenBalance(address _token) private {\\n        uint256 nextBalance = IERC20(_token).balanceOf(address(this));\\n        tokenBalances[_token] = nextBalance;\\n    }\\n\\n    function _increasePoolAmount(address _token, uint256 _amount) private {\\n        poolAmounts[_token] = poolAmounts[_token].add(_amount);\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        _validate(poolAmounts[_token] <= balance, 49);\\n        emit IncreasePoolAmount(_token, _amount);\\n    }\\n\\n    function _decreasePoolAmount(address _token, uint256 _amount) private {\\n        poolAmounts[_token] = poolAmounts[_token].sub(_amount, \\\"Vault: poolAmount exceeded\\\");\\n        _validate(reservedAmounts[_token] <= poolAmounts[_token], 50);\\n        emit DecreasePoolAmount(_token, _amount);\\n    }\\n\\n    function _validateBufferAmount(address _token) private view {\\n        if (poolAmounts[_token] < bufferAmounts[_token]) {\\n            revert(\\\"Vault: poolAmount < buffer\\\");\\n        }\\n    }\\n\\n    function _increaseUsdgAmount(address _token, uint256 _amount) private {\\n        usdgAmounts[_token] = usdgAmounts[_token].add(_amount);\\n        uint256 maxUsdgAmount = maxUsdgAmounts[_token];\\n        if (maxUsdgAmount != 0) {\\n            _validate(usdgAmounts[_token] <= maxUsdgAmount, 51);\\n        }\\n        emit IncreaseUsdgAmount(_token, _amount);\\n    }\\n\\n    function _decreaseUsdgAmount(address _token, uint256 _amount) private {\\n        uint256 value = usdgAmounts[_token];\\n        // since USDG can be minted using multiple assets\\n        // it is possible for the USDG debt for a single asset to be less than zero\\n        // the USDG debt is capped to zero for this case\\n        if (value <= _amount) {\\n            usdgAmounts[_token] = 0;\\n            emit DecreaseUsdgAmount(_token, value);\\n            return;\\n        }\\n        usdgAmounts[_token] = value.sub(_amount);\\n        emit DecreaseUsdgAmount(_token, _amount);\\n    }\\n\\n    function _increaseReservedAmount(address _token, uint256 _amount) private {\\n        reservedAmounts[_token] = reservedAmounts[_token].add(_amount);\\n        _validate(reservedAmounts[_token] <= poolAmounts[_token], 52);\\n        emit IncreaseReservedAmount(_token, _amount);\\n    }\\n\\n    function _decreaseReservedAmount(address _token, uint256 _amount) private {\\n        reservedAmounts[_token] = reservedAmounts[_token].sub(_amount, \\\"Vault: insufficient reserve\\\");\\n        emit DecreaseReservedAmount(_token, _amount);\\n    }\\n\\n    function _increaseGuaranteedUsd(address _token, uint256 _usdAmount) private {\\n        guaranteedUsd[_token] = guaranteedUsd[_token].add(_usdAmount);\\n        emit IncreaseGuaranteedUsd(_token, _usdAmount);\\n    }\\n\\n    function _decreaseGuaranteedUsd(address _token, uint256 _usdAmount) private {\\n        guaranteedUsd[_token] = guaranteedUsd[_token].sub(_usdAmount);\\n        emit DecreaseGuaranteedUsd(_token, _usdAmount);\\n    }\\n\\n    function _increaseGlobalShortSize(address _token, uint256 _amount) private {\\n        globalShortSizes[_token] = globalShortSizes[_token].add(_amount);\\n\\n        uint256 maxSize = maxGlobalShortSizes[_token];\\n        if (maxSize != 0) {\\n            require(globalShortSizes[_token] <= maxSize, \\\"Vault: max shorts exceeded\\\");\\n        }\\n    }\\n\\n    function _decreaseGlobalShortSize(address _token, uint256 _amount) private {\\n        uint256 size = globalShortSizes[_token];\\n        if (_amount > size) {\\n          globalShortSizes[_token] = 0;\\n          return;\\n        }\\n\\n        globalShortSizes[_token] = size.sub(_amount);\\n    }\\n\\n    // we have this validation as a function instead of a modifier to reduce contract size\\n    function _onlyGov() private view {\\n        _validate(msg.sender == gov, 53);\\n    }\\n\\n    // we have this validation as a function instead of a modifier to reduce contract size\\n    function _validateManager() private view {\\n        if (inManagerMode) {\\n            _validate(isManager[msg.sender], 54);\\n        }\\n    }\\n\\n    // we have this validation as a function instead of a modifier to reduce contract size\\n    function _validateGasPrice() private view {\\n        if (maxGasPrice == 0) { return; }\\n        _validate(tx.gasprice <= maxGasPrice, 55);\\n    }\\n\\n    function _validate(bool _condition, uint256 _errorCode) private view {\\n        require(_condition, errors[_errorCode]);\\n    }\\n}\\n\",\"keccak256\":\"0x392125c653e248f75841902b7f884183e4e27ffd6414d4f3c18e4b3bcfd70aa1\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IVaultUtils.sol\\\";\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n    function usdg() external view returns (address);\\n    function gov() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetUsdgAmount(address _token) external view returns (uint256);\\n\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setUsdgAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _redemptionBps,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit(address _token) external;\\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function usdgAmounts(address _token) external view returns (uint256);\\n    function maxUsdgAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n}\\n\",\"keccak256\":\"0x906f87c2b5a0351b07836fbc0f19755302ba8ddf1aa5fcef0827fd743ee723b9\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultPriceFeed {\\n    function adjustmentBasisPoints(address _token) external view returns (uint256);\\n    function isAdjustmentAdditive(address _token) external view returns (bool);\\n    function setAdjustment(address _token, bool _isAdditive, uint256 _adjustmentBps) external;\\n    function setUseV2Pricing(bool _useV2Pricing) external;\\n    function setIsAmmEnabled(bool _isEnabled) external;\\n    function setIsSecondaryPriceEnabled(bool _isEnabled) external;\\n    function setSpreadBasisPoints(address _token, uint256 _spreadBasisPoints) external;\\n    function setSpreadThresholdBasisPoints(uint256 _spreadThresholdBasisPoints) external;\\n    function setFavorPrimaryPrice(bool _favorPrimaryPrice) external;\\n    function setPriceSampleSpace(uint256 _priceSampleSpace) external;\\n    function setMaxStrictPriceDeviation(uint256 _maxStrictPriceDeviation) external;\\n    function getPrice(address _token, bool _maximise, bool _includeAmmPrice, bool _useSwapPricing) external view returns (uint256);\\n    function getAmmPrice(address _token) external view returns (uint256);\\n    function getLatestPrimaryPrice(address _token) external view returns (uint256);\\n    function getPrimaryPrice(address _token, bool _maximise) external view returns (uint256);\\n    function setTokenConfig(\\n        address _token,\\n        address _priceFeed,\\n        uint256 _priceDecimals,\\n        bool _isStrictStable\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbfd3640bfd3ace2eaefb6f82ed2063d802ba3fa4bf87072269753508954ed84f\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdgAmount) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc8cad694c33f968559eb3feac2226fe26d81d457529b87ae8852390e1474d7be\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa3ce253082421a9e79d2b884ae6f60507b0cc73ea356674072091454c44cc556\",\"license\":\"MIT\"},\"contracts/libraries/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf80766b21ea67a73c81e0dea4543375243938c8b223e29c5d783be61ab3f424c\",\"license\":\"MIT\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1845481964ebacf35afe1a006fa574793b52e698eba0a8db6e3d30202bc45429\",\"license\":\"MIT\"},\"contracts/libraries/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xae7a1e407ed171ecd3a0d3976875d6c58eefdccf831ebce6314ec94892dffc03\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IUSDG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IUSDG {\\n    function addVault(address _vault) external;\\n    function removeVault(address _vault) external;\\n    function mint(address _account, uint256 _amount) external;\\n    function burn(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x4ad9ae07a28607d414fa8509677ab4300bc1ca05768374b4a521ab681ff55172\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 23313,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "_status",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9689,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "isInitialized",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 9693,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "isSwapEnabled",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 9697,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "isLeverageEnabled",
            "offset": 2,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 9699,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "vaultUtils",
            "offset": 3,
            "slot": "1",
            "type": "t_contract(IVaultUtils)18575"
          },
          {
            "astId": 9701,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "errorController",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 9704,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "router",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 9707,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "priceFeed",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 9710,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "usdg",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 9713,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "gov",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 9716,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "whitelistedTokenCount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 9722,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "maxLeverage",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 9725,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "liquidationFeeUsd",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 9729,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "taxBasisPoints",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 9733,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "stableTaxBasisPoints",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 9737,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "mintBurnFeeBasisPoints",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 9741,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "swapFeeBasisPoints",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 9745,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "stableSwapFeeBasisPoints",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 9749,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "marginFeeBasisPoints",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          },
          {
            "astId": 9752,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "minProfitTime",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256"
          },
          {
            "astId": 9756,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "hasDynamicFees",
            "offset": 0,
            "slot": "17",
            "type": "t_bool"
          },
          {
            "astId": 9760,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "fundingInterval",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256"
          },
          {
            "astId": 9763,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "fundingRateFactor",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256"
          },
          {
            "astId": 9766,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "stableFundingRateFactor",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256"
          },
          {
            "astId": 9769,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "totalTokenWeights",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256"
          },
          {
            "astId": 9772,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "includeAmmPrice",
            "offset": 0,
            "slot": "22",
            "type": "t_bool"
          },
          {
            "astId": 9775,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "useSwapPricing",
            "offset": 1,
            "slot": "22",
            "type": "t_bool"
          },
          {
            "astId": 9779,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "inManagerMode",
            "offset": 2,
            "slot": "22",
            "type": "t_bool"
          },
          {
            "astId": 9783,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "inPrivateLiquidationMode",
            "offset": 3,
            "slot": "22",
            "type": "t_bool"
          },
          {
            "astId": 9786,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "maxGasPrice",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 9793,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "approvedRouters",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 9798,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "isLiquidator",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 9803,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "isManager",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 9807,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "allWhitelistedTokens",
            "offset": 0,
            "slot": "27",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 9812,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "whitelistedTokens",
            "offset": 0,
            "slot": "28",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 9817,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "tokenDecimals",
            "offset": 0,
            "slot": "29",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9822,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "minProfitBasisPoints",
            "offset": 0,
            "slot": "30",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9827,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "stableTokens",
            "offset": 0,
            "slot": "31",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 9832,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "shortableTokens",
            "offset": 0,
            "slot": "32",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 9837,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "tokenBalances",
            "offset": 0,
            "slot": "33",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9842,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "tokenWeights",
            "offset": 0,
            "slot": "34",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9847,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "usdgAmounts",
            "offset": 0,
            "slot": "35",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9852,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "maxUsdgAmounts",
            "offset": 0,
            "slot": "36",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9857,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "poolAmounts",
            "offset": 0,
            "slot": "37",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9862,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "reservedAmounts",
            "offset": 0,
            "slot": "38",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9867,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "bufferAmounts",
            "offset": 0,
            "slot": "39",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9872,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "guaranteedUsd",
            "offset": 0,
            "slot": "40",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9877,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "cumulativeFundingRates",
            "offset": 0,
            "slot": "41",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9882,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "lastFundingTimes",
            "offset": 0,
            "slot": "42",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9886,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "positions",
            "offset": 0,
            "slot": "43",
            "type": "t_mapping(t_bytes32,t_struct(Position)9655_storage)"
          },
          {
            "astId": 9891,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "feeReserves",
            "offset": 0,
            "slot": "44",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9896,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "globalShortSizes",
            "offset": 0,
            "slot": "45",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9901,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "globalShortAveragePrices",
            "offset": 0,
            "slot": "46",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9906,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "maxGlobalShortSizes",
            "offset": 0,
            "slot": "47",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9910,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "errors",
            "offset": 0,
            "slot": "48",
            "type": "t_mapping(t_uint256,t_string_storage)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "base": "t_address",
            "encoding": "dynamic_array",
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IVaultUtils)18575": {
            "encoding": "inplace",
            "label": "contract IVaultUtils",
            "numberOfBytes": "20"
          },
          "t_int256": {
            "encoding": "inplace",
            "label": "int256",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_bool)"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_bytes32,t_struct(Position)9655_storage)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => struct Vault.Position)",
            "numberOfBytes": "32",
            "value": "t_struct(Position)9655_storage"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32",
            "value": "t_string_storage"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Position)9655_storage": {
            "encoding": "inplace",
            "label": "struct Vault.Position",
            "members": [
              {
                "astId": 9642,
                "contract": "contracts/core/Vault.sol:Vault",
                "label": "size",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              },
              {
                "astId": 9644,
                "contract": "contracts/core/Vault.sol:Vault",
                "label": "collateral",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 9646,
                "contract": "contracts/core/Vault.sol:Vault",
                "label": "averagePrice",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 9648,
                "contract": "contracts/core/Vault.sol:Vault",
                "label": "entryFundingRate",
                "offset": 0,
                "slot": "3",
                "type": "t_uint256"
              },
              {
                "astId": 9650,
                "contract": "contracts/core/Vault.sol:Vault",
                "label": "reserveAmount",
                "offset": 0,
                "slot": "4",
                "type": "t_uint256"
              },
              {
                "astId": 9652,
                "contract": "contracts/core/Vault.sol:Vault",
                "label": "realisedPnl",
                "offset": 0,
                "slot": "5",
                "type": "t_int256"
              },
              {
                "astId": 9654,
                "contract": "contracts/core/Vault.sol:Vault",
                "label": "lastIncreasedTime",
                "offset": 0,
                "slot": "6",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/access/Governable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract Governable {\\n    address public gov;\\n\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\"\n    },\n    \"contracts/tokens/Bridge.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../access/Governable.sol\\\";\\n\\ncontract Bridge is ReentrancyGuard, Governable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address public token;\\n    address public wToken;\\n\\n    constructor(address _token, address _wToken) public {\\n        token = _token;\\n        wToken = _wToken;\\n    }\\n\\n    function wrap(uint256 _amount, address _receiver) external nonReentrant {\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\\n        IERC20(wToken).safeTransfer(_receiver, _amount);\\n    }\\n\\n    function unwrap(uint256 _amount, address _receiver) external nonReentrant {\\n        IERC20(wToken).safeTransferFrom(msg.sender, address(this), _amount);\\n        IERC20(token).safeTransfer(_receiver, _amount);\\n    }\\n\\n    // to help users who accidentally send their tokens to this contract\\n    function withdrawToken(address _token, address _account, uint256 _amount) external onlyGov {\\n        IERC20(_token).safeTransfer(_account, _amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/token/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"contracts/libraries/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/token/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/utils/ReentrancyGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/xdx/XdxMigrator.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IXdxIou.sol\\\";\\nimport \\\"./interfaces/IAmmRouter.sol\\\";\\nimport \\\"./interfaces/IXdxMigrator.sol\\\";\\n\\ncontract XdxMigrator is ReentrancyGuard, IXdxMigrator {\\n    using SafeMath for uint256;\\n\\n    bool public isInitialized;\\n    bool public isMigrationActive = true;\\n    bool public hasMaxMigrationLimit = false;\\n\\n    uint256 public minAuthorizations;\\n\\n    address public ammRouter;\\n    uint256 public xdxPrice;\\n\\n    uint256 public actionsNonce;\\n    address public admin;\\n\\n    address[] public signers;\\n    mapping (address => bool) public isSigner;\\n    mapping (bytes32 => bool) public pendingActions;\\n    mapping (address => mapping (bytes32 => bool)) public signedActions;\\n\\n    mapping (address => bool) public whitelistedTokens;\\n    mapping (address => address) public override iouTokens;\\n    mapping (address => uint256) public prices;\\n    mapping (address => uint256) public caps;\\n\\n    mapping (address => bool) public lpTokens;\\n    mapping (address => address) public lpTokenAs;\\n    mapping (address => address) public lpTokenBs;\\n\\n    mapping (address => uint256) public tokenAmounts;\\n\\n    mapping (address => mapping (address => uint256)) public migratedAmounts;\\n    mapping (address => mapping (address => uint256)) public maxMigrationAmounts;\\n\\n    event SignalApprove(address token, address spender, uint256 amount, bytes32 action, uint256 nonce);\\n\\n    event SignalPendingAction(bytes32 action, uint256 nonce);\\n    event SignAction(bytes32 action, uint256 nonce);\\n    event ClearAction(bytes32 action, uint256 nonce);\\n\\n    constructor(uint256 _minAuthorizations) public {\\n        admin = msg.sender;\\n        minAuthorizations = _minAuthorizations;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"XdxMigrator: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlySigner() {\\n        require(isSigner[msg.sender], \\\"XdxMigrator: forbidden\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _ammRouter,\\n        uint256 _xdxPrice,\\n        address[] memory _signers,\\n        address[] memory _whitelistedTokens,\\n        address[] memory _iouTokens,\\n        uint256[] memory _prices,\\n        uint256[] memory _caps,\\n        address[] memory _lpTokens,\\n        address[] memory _lpTokenAs,\\n        address[] memory _lpTokenBs\\n    ) public onlyAdmin {\\n        require(!isInitialized, \\\"XdxMigrator: already initialized\\\");\\n        require(_whitelistedTokens.length == _iouTokens.length, \\\"XdxMigrator: invalid _iouTokens.length\\\");\\n        require(_whitelistedTokens.length == _prices.length, \\\"XdxMigrator: invalid _prices.length\\\");\\n        require(_whitelistedTokens.length == _caps.length, \\\"XdxMigrator: invalid _caps.length\\\");\\n        require(_lpTokens.length == _lpTokenAs.length, \\\"XdxMigrator: invalid _lpTokenAs.length\\\");\\n        require(_lpTokens.length == _lpTokenBs.length, \\\"XdxMigrator: invalid _lpTokenBs.length\\\");\\n\\n        isInitialized = true;\\n\\n        ammRouter = _ammRouter;\\n        xdxPrice = _xdxPrice;\\n\\n        signers = _signers;\\n        for (uint256 i = 0; i < _signers.length; i++) {\\n            address signer = _signers[i];\\n            isSigner[signer] = true;\\n        }\\n\\n        for (uint256 i = 0; i < _whitelistedTokens.length; i++) {\\n            address token = _whitelistedTokens[i];\\n            whitelistedTokens[token] = true;\\n            iouTokens[token] = _iouTokens[i];\\n            prices[token] = _prices[i];\\n            caps[token] = _caps[i];\\n        }\\n\\n        for (uint256 i = 0; i < _lpTokens.length; i++) {\\n            address token = _lpTokens[i];\\n            lpTokens[token] = true;\\n            lpTokenAs[token] = _lpTokenAs[i];\\n            lpTokenBs[token] = _lpTokenBs[i];\\n        }\\n    }\\n\\n    function endMigration() public onlyAdmin {\\n        isMigrationActive = false;\\n    }\\n\\n    function setHasMaxMigrationLimit(bool _hasMaxMigrationLimit) public onlyAdmin {\\n        hasMaxMigrationLimit = _hasMaxMigrationLimit;\\n    }\\n\\n    function setMaxMigrationAmount(address _account, address _token, uint256 _maxMigrationAmount) public onlyAdmin {\\n        maxMigrationAmounts[_account][_token] = _maxMigrationAmount;\\n    }\\n\\n    function migrate(\\n        address _token,\\n        uint256 _tokenAmount\\n    ) public nonReentrant {\\n        require(isMigrationActive, \\\"XdxMigrator: migration is no longer active\\\");\\n        require(whitelistedTokens[_token], \\\"XdxMigrator: token not whitelisted\\\");\\n        require(_tokenAmount > 0, \\\"XdxMigrator: invalid tokenAmount\\\");\\n\\n        if (hasMaxMigrationLimit) {\\n            migratedAmounts[msg.sender][_token] = migratedAmounts[msg.sender][_token].add(_tokenAmount);\\n            require(migratedAmounts[msg.sender][_token] <= maxMigrationAmounts[msg.sender][_token], \\\"XdxMigrator: maxMigrationAmount exceeded\\\");\\n        }\\n\\n        uint256 tokenPrice = getTokenPrice(_token);\\n        uint256 mintAmount = _tokenAmount.mul(tokenPrice).div(xdxPrice);\\n        require(mintAmount > 0, \\\"XdxMigrator: invalid mintAmount\\\");\\n\\n        tokenAmounts[_token] = tokenAmounts[_token].add(_tokenAmount);\\n        require(tokenAmounts[_token] < caps[_token], \\\"XdxMigrator: token cap exceeded\\\");\\n\\n        IERC20(_token).transferFrom(msg.sender, address(this), _tokenAmount);\\n\\n        if (lpTokens[_token]) {\\n            address tokenA = lpTokenAs[_token];\\n            address tokenB = lpTokenBs[_token];\\n            require(tokenA != address(0), \\\"XdxMigrator: invalid tokenA\\\");\\n            require(tokenB != address(0), \\\"XdxMigrator: invalid tokenB\\\");\\n\\n            IERC20(_token).approve(ammRouter, _tokenAmount);\\n            IAmmRouter(ammRouter).removeLiquidity(tokenA, tokenB, _tokenAmount, 0, 0, address(this), block.timestamp);\\n        }\\n\\n        address iouToken = getIouToken(_token);\\n        IXdxIou(iouToken).mint(msg.sender, mintAmount);\\n    }\\n\\n    function signalApprove(address _token, address _spender, uint256 _amount) external nonReentrant onlyAdmin {\\n        actionsNonce++;\\n        uint256 nonce = actionsNonce;\\n        bytes32 action = keccak256(abi.encodePacked(\\\"approve\\\", _token, _spender, _amount, nonce));\\n        _setPendingAction(action, nonce);\\n        emit SignalApprove(_token, _spender, _amount, action, nonce);\\n    }\\n\\n    function signApprove(address _token, address _spender, uint256 _amount, uint256 _nonce) external nonReentrant onlySigner {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"approve\\\", _token, _spender, _amount, _nonce));\\n        _validateAction(action);\\n        require(!signedActions[msg.sender][action], \\\"XdxMigrator: already signed\\\");\\n        signedActions[msg.sender][action] = true;\\n        emit SignAction(action, _nonce);\\n    }\\n\\n    function approve(address _token, address _spender, uint256 _amount, uint256 _nonce) external nonReentrant onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"approve\\\", _token, _spender, _amount, _nonce));\\n        _validateAction(action);\\n        _validateAuthorization(action);\\n\\n        IERC20(_token).approve(_spender, _amount);\\n        _clearAction(action, _nonce);\\n    }\\n\\n    function getTokenAmounts(address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](_tokens.length);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            amounts[i] = tokenAmounts[token];\\n        }\\n\\n        return amounts;\\n    }\\n\\n    function getTokenPrice(address _token) public view returns (uint256) {\\n        uint256 price = prices[_token];\\n        require(price != 0, \\\"XdxMigrator: invalid token price\\\");\\n        return price;\\n    }\\n\\n    function getIouToken(address _token) public view returns (address) {\\n        address iouToken = iouTokens[_token];\\n        require(iouToken != address(0), \\\"XdxMigrator: invalid iou token\\\");\\n        return iouToken;\\n    }\\n\\n    function _setPendingAction(bytes32 _action, uint256 _nonce) private {\\n        pendingActions[_action] = true;\\n        emit SignalPendingAction(_action, _nonce);\\n    }\\n\\n    function _validateAction(bytes32 _action) private view {\\n        require(pendingActions[_action], \\\"XdxMigrator: action not signalled\\\");\\n    }\\n\\n    function _validateAuthorization(bytes32 _action) private view {\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < signers.length; i++) {\\n            address signer = signers[i];\\n            if (signedActions[signer][_action]) {\\n                count++;\\n            }\\n        }\\n\\n        if (count == 0) {\\n            revert(\\\"XdxMigrator: action not authorized\\\");\\n        }\\n        require(count >= minAuthorizations, \\\"XdxMigrator: insufficient authorization\\\");\\n    }\\n\\n    function _clearAction(bytes32 _action, uint256 _nonce) private {\\n        require(pendingActions[_action], \\\"XdxMigrator: invalid _action\\\");\\n        delete pendingActions[_action];\\n        emit ClearAction(_action, _nonce);\\n    }\\n}\\n\"\n    },\n    \"contracts/xdx/interfaces/IXdxIou.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IXdxIou {\\n    function mint(address account, uint256 amount) external returns (bool);\\n}\\n\"\n    },\n    \"contracts/xdx/interfaces/IAmmRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IAmmRouter {\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n}\\n\"\n    },\n    \"contracts/xdx/interfaces/IXdxMigrator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IXdxMigrator {\\n    function iouTokens(address _token) external view returns (address);\\n}\\n\"\n    },\n    \"contracts/xdx/MigrationHandler.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IAmmRouter.sol\\\";\\nimport \\\"./interfaces/IXdxMigrator.sol\\\";\\nimport \\\"../core/interfaces/IVault.sol\\\";\\n\\ncontract MigrationHandler is ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant USDG_PRECISION = 10 ** 18;\\n\\n    bool public isInitialized;\\n\\n    address public admin;\\n    address public ammRouterV1;\\n    address public ammRouterV2;\\n\\n    address public vault;\\n\\n    address public gmt;\\n    address public xgmt;\\n    address public usdg;\\n    address public bnb;\\n    address public busd;\\n\\n    mapping (address => mapping (address => uint256)) public refundedAmounts;\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"MigrationHandler: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor() public {\\n        admin = msg.sender;\\n    }\\n\\n    function initialize(\\n        address _ammRouterV1,\\n        address _ammRouterV2,\\n        address _vault,\\n        address _gmt,\\n        address _xgmt,\\n        address _usdg,\\n        address _bnb,\\n        address _busd\\n    ) public onlyAdmin {\\n        require(!isInitialized, \\\"MigrationHandler: already initialized\\\");\\n        isInitialized = true;\\n\\n        ammRouterV1 = _ammRouterV1;\\n        ammRouterV2 = _ammRouterV2;\\n\\n        vault = _vault;\\n\\n        gmt = _gmt;\\n        xgmt = _xgmt;\\n        usdg = _usdg;\\n        bnb = _bnb;\\n        busd = _busd;\\n    }\\n\\n    function redeemUsdg(\\n        address _migrator,\\n        address _redemptionToken,\\n        uint256 _usdgAmount\\n    ) external onlyAdmin nonReentrant {\\n        IERC20(usdg).transferFrom(_migrator, vault, _usdgAmount);\\n        uint256 amount = IVault(vault).sellUSDG(_redemptionToken, address(this));\\n\\n        address[] memory path = new address[](2);\\n        path[0] = bnb;\\n        path[1] = busd;\\n\\n        if (_redemptionToken != bnb) {\\n            path = new address[](3);\\n            path[0] = _redemptionToken;\\n            path[1] = bnb;\\n            path[2] = busd;\\n        }\\n\\n        IERC20(_redemptionToken).approve(ammRouterV2, amount);\\n        IAmmRouter(ammRouterV2).swapExactTokensForTokens(\\n            amount,\\n            0,\\n            path,\\n            _migrator,\\n            block.timestamp\\n        );\\n    }\\n\\n    function swap(\\n        address _migrator,\\n        uint256 _gmtAmountForUsdg,\\n        uint256 _xgmtAmountForUsdg,\\n        uint256 _gmtAmountForBusd\\n    ) external onlyAdmin nonReentrant {\\n        address[] memory path = new address[](2);\\n\\n        path[0] = gmt;\\n        path[1] = usdg;\\n        IERC20(gmt).transferFrom(_migrator, address(this), _gmtAmountForUsdg);\\n        IERC20(gmt).approve(ammRouterV2, _gmtAmountForUsdg);\\n        IAmmRouter(ammRouterV2).swapExactTokensForTokens(\\n            _gmtAmountForUsdg,\\n            0,\\n            path,\\n            _migrator,\\n            block.timestamp\\n        );\\n\\n        path[0] = xgmt;\\n        path[1] = usdg;\\n        IERC20(xgmt).transferFrom(_migrator, address(this), _xgmtAmountForUsdg);\\n        IERC20(xgmt).approve(ammRouterV2, _xgmtAmountForUsdg);\\n        IAmmRouter(ammRouterV2).swapExactTokensForTokens(\\n            _xgmtAmountForUsdg,\\n            0,\\n            path,\\n            _migrator,\\n            block.timestamp\\n        );\\n\\n        path[0] = gmt;\\n        path[1] = busd;\\n        IERC20(gmt).transferFrom(_migrator, address(this), _gmtAmountForBusd);\\n        IERC20(gmt).approve(ammRouterV1, _gmtAmountForBusd);\\n        IAmmRouter(ammRouterV1).swapExactTokensForTokens(\\n            _gmtAmountForBusd,\\n            0,\\n            path,\\n            _migrator,\\n            block.timestamp\\n        );\\n    }\\n\\n    function refund(\\n        address _migrator,\\n        address _account,\\n        address _token,\\n        uint256 _usdgAmount\\n    ) external onlyAdmin nonReentrant {\\n        address iouToken = IXdxMigrator(_migrator).iouTokens(_token);\\n        uint256 iouBalance = IERC20(iouToken).balanceOf(_account);\\n        uint256 iouTokenAmount = _usdgAmount.div(2); // each XDX is priced at $2\\n\\n        uint256 refunded = refundedAmounts[_account][iouToken];\\n        refundedAmounts[_account][iouToken] = refunded.add(iouTokenAmount);\\n\\n        require(refundedAmounts[_account][iouToken] <= iouBalance, \\\"MigrationHandler: refundable amount exceeded\\\");\\n\\n        IERC20(usdg).transferFrom(_migrator, _account, _usdgAmount);\\n    }\\n}\\n\"\n    },\n    \"contracts/core/interfaces/IVault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IVaultUtils.sol\\\";\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n    function usdg() external view returns (address);\\n    function gov() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetUsdgAmount(address _token) external view returns (uint256);\\n\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setUsdgAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _redemptionBps,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit(address _token) external;\\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function usdgAmounts(address _token) external view returns (uint256);\\n    function maxUsdgAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n}\\n\"\n    },\n    \"contracts/core/interfaces/IVaultUtils.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdgAmount) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/peripherals/XdxTimelock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./interfaces/ITimelockTarget.sol\\\";\\nimport \\\"./interfaces/IXdxTimelock.sol\\\";\\nimport \\\"./interfaces/IHandlerTarget.sol\\\";\\nimport \\\"../access/interfaces/IAdmin.sol\\\";\\nimport \\\"../core/interfaces/IVault.sol\\\";\\nimport \\\"../core/interfaces/IVaultUtils.sol\\\";\\nimport \\\"../core/interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../core/interfaces/IRouter.sol\\\";\\nimport \\\"../tokens/interfaces/IYieldToken.sol\\\";\\nimport \\\"../tokens/interfaces/IBaseToken.sol\\\";\\nimport \\\"../tokens/interfaces/IMintable.sol\\\";\\nimport \\\"../tokens/interfaces/IUSDG.sol\\\";\\nimport \\\"../staking/interfaces/IVester.sol\\\";\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\n\\ncontract XdxTimelock is IXdxTimelock {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\\n    uint256 public constant MAX_BUFFER = 7 days;\\n    uint256 public constant MAX_FEE_BASIS_POINTS = 300; // 3%\\n    uint256 public constant MAX_FUNDING_RATE_FACTOR = 200; // 0.02%\\n    uint256 public constant MAX_LEVERAGE_VALIDATION = 500000; // 50x\\n\\n    uint256 public buffer;\\n    uint256 public longBuffer;\\n    address public admin;\\n\\n    address public tokenManager;\\n    address public rewardManager;\\n    address public mintReceiver;\\n    uint256 public maxTokenSupply;\\n\\n    mapping (bytes32 => uint256) public pendingActions;\\n    mapping (address => bool) public excludedTokens;\\n\\n    mapping (address => bool) public isHandler;\\n\\n    event SignalPendingAction(bytes32 action);\\n    event SignalApprove(address token, address spender, uint256 amount, bytes32 action);\\n    event SignalWithdrawToken(address target, address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalMint(address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalSetGov(address target, address gov, bytes32 action);\\n    event SignalSetPriceFeed(address vault, address priceFeed, bytes32 action);\\n    event SignalAddPlugin(address router, address plugin, bytes32 action);\\n    event SignalRedeemUsdg(address vault, address token, uint256 amount);\\n    event SignalVaultSetTokenConfig(\\n        address vault,\\n        address token,\\n        uint256 tokenDecimals,\\n        uint256 tokenWeight,\\n        uint256 minProfitBps,\\n        uint256 maxUsdgAmount,\\n        bool isStable,\\n        bool isShortable\\n    );\\n    event SignalPriceFeedSetTokenConfig(\\n        address vaultPriceFeed,\\n        address token,\\n        address priceFeed,\\n        uint256 priceDecimals,\\n        bool isStrictStable\\n    );\\n    event ClearAction(bytes32 action);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"XdxTimelock: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminOrHandler() {\\n        require(msg.sender == admin || isHandler[msg.sender], \\\"XdxTimelock: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyTokenManager() {\\n        require(msg.sender == tokenManager, \\\"XdxTimelock: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyRewardManager() {\\n        require(msg.sender == rewardManager, \\\"XdxTimelock: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _admin,\\n        uint256 _buffer,\\n        uint256 _longBuffer,\\n        address _rewardManager,\\n        address _tokenManager,\\n        address _mintReceiver,\\n        uint256 _maxTokenSupply\\n    ) public {\\n        require(_buffer <= MAX_BUFFER, \\\"XdxTimelock: invalid _buffer\\\");\\n        require(_longBuffer <= MAX_BUFFER, \\\"XdxTimelock: invalid _longBuffer\\\");\\n        admin = _admin;\\n        buffer = _buffer;\\n        longBuffer = _longBuffer;\\n        rewardManager = _rewardManager;\\n        tokenManager = _tokenManager;\\n        mintReceiver = _mintReceiver;\\n        maxTokenSupply = _maxTokenSupply;\\n    }\\n\\n    function setAdmin(address _admin) external override onlyTokenManager {\\n        admin = _admin;\\n    }\\n\\n    function setExternalAdmin(address _target, address _admin) external onlyAdmin {\\n        require(_target != address(this), \\\"XdxTimelock: invalid _target\\\");\\n        IAdmin(_target).setAdmin(_admin);\\n    }\\n\\n    function setContractHandler(address _handler, bool _isActive) external onlyAdmin {\\n        isHandler[_handler] = _isActive;\\n    }\\n\\n    function setBuffer(uint256 _buffer) external onlyAdmin {\\n        require(_buffer <= MAX_BUFFER, \\\"XdxTimelock: invalid _buffer\\\");\\n        require(_buffer > buffer, \\\"XdxTimelock: buffer cannot be decreased\\\");\\n        buffer = _buffer;\\n    }\\n\\n    function setMaxLeverage(address _vault, uint256 _maxLeverage) external onlyAdmin {\\n      require(_maxLeverage > MAX_LEVERAGE_VALIDATION, \\\"XdxTimelock: invalid _maxLeverage\\\");\\n      IVault(_vault).setMaxLeverage(_maxLeverage);\\n    }\\n\\n    function setFundingRate(address _vault, uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external onlyAdmin {\\n        require(_fundingRateFactor < MAX_FUNDING_RATE_FACTOR, \\\"XdxTimelock: invalid _fundingRateFactor\\\");\\n        require(_stableFundingRateFactor < MAX_FUNDING_RATE_FACTOR, \\\"XdxTimelock: invalid _stableFundingRateFactor\\\");\\n        IVault(_vault).setFundingRate(_fundingInterval, _fundingRateFactor, _stableFundingRateFactor);\\n    }\\n\\n    function setFees(\\n        address _vault,\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external onlyAdmin {\\n        require(_taxBasisPoints < MAX_FEE_BASIS_POINTS, \\\"XdxTimelock: invalid _taxBasisPoints\\\");\\n        require(_stableTaxBasisPoints < MAX_FEE_BASIS_POINTS, \\\"XdxTimelock: invalid _stableTaxBasisPoints\\\");\\n        require(_mintBurnFeeBasisPoints < MAX_FEE_BASIS_POINTS, \\\"XdxTimelock: invalid _mintBurnFeeBasisPoints\\\");\\n        require(_swapFeeBasisPoints < MAX_FEE_BASIS_POINTS, \\\"XdxTimelock: invalid _swapFeeBasisPoints\\\");\\n        require(_stableSwapFeeBasisPoints < MAX_FEE_BASIS_POINTS, \\\"XdxTimelock: invalid _stableSwapFeeBasisPoints\\\");\\n        require(_marginFeeBasisPoints < MAX_FEE_BASIS_POINTS, \\\"XdxTimelock: invalid _marginFeeBasisPoints\\\");\\n        require(_liquidationFeeUsd < 10 * PRICE_PRECISION, \\\"XdxTimelock: invalid _liquidationFeeUsd\\\");\\n\\n        IVault(_vault).setFees(\\n            _taxBasisPoints,\\n            _stableTaxBasisPoints,\\n            _mintBurnFeeBasisPoints,\\n            _swapFeeBasisPoints,\\n            _stableSwapFeeBasisPoints,\\n            _marginFeeBasisPoints,\\n            _liquidationFeeUsd,\\n            _minProfitTime,\\n            _hasDynamicFees\\n        );\\n    }\\n\\n    function setTokenConfig(\\n        address _vault,\\n        address _token,\\n        uint256 _tokenWeight,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        uint256 _bufferAmount,\\n        uint256 _usdgAmount\\n    ) external onlyAdmin {\\n        require(_minProfitBps <= 500, \\\"XdxTimelock: invalid _minProfitBps\\\");\\n\\n        IVault vault = IVault(_vault);\\n        require(vault.whitelistedTokens(_token), \\\"XdxTimelock: token not yet whitelisted\\\");\\n\\n        uint256 tokenDecimals = vault.tokenDecimals(_token);\\n        bool isStable = vault.stableTokens(_token);\\n        bool isShortable = vault.shortableTokens(_token);\\n\\n        IVault(_vault).setTokenConfig(\\n            _token,\\n            tokenDecimals,\\n            _tokenWeight,\\n            _minProfitBps,\\n            _maxUsdgAmount,\\n            isStable,\\n            isShortable\\n        );\\n\\n        IVault(_vault).setBufferAmount(_token, _bufferAmount);\\n\\n        IVault(_vault).setUsdgAmount(_token, _usdgAmount);\\n    }\\n\\n    function setMaxGlobalShortSize(address _vault, address _token, uint256 _amount) external onlyAdmin {\\n        IVault(_vault).setMaxGlobalShortSize(_token, _amount);\\n    }\\n\\n    function removeAdmin(address _token, address _account) external onlyAdmin {\\n        IYieldToken(_token).removeAdmin(_account);\\n    }\\n\\n    function setIsAmmEnabled(address _priceFeed, bool _isEnabled) external onlyAdmin {\\n        IVaultPriceFeed(_priceFeed).setIsAmmEnabled(_isEnabled);\\n    }\\n\\n    function setIsSecondaryPriceEnabled(address _priceFeed, bool _isEnabled) external onlyAdmin {\\n        IVaultPriceFeed(_priceFeed).setIsSecondaryPriceEnabled(_isEnabled);\\n    }\\n\\n    function setMaxStrictPriceDeviation(address _priceFeed, uint256 _maxStrictPriceDeviation) external onlyAdmin {\\n        IVaultPriceFeed(_priceFeed).setMaxStrictPriceDeviation(_maxStrictPriceDeviation);\\n    }\\n\\n    function setUseV2Pricing(address _priceFeed, bool _useV2Pricing) external onlyAdmin {\\n        IVaultPriceFeed(_priceFeed).setUseV2Pricing(_useV2Pricing);\\n    }\\n\\n    function setAdjustment(address _priceFeed, address _token, bool _isAdditive, uint256 _adjustmentBps) external onlyAdmin {\\n        IVaultPriceFeed(_priceFeed).setAdjustment(_token, _isAdditive, _adjustmentBps);\\n    }\\n\\n    function setSpreadBasisPoints(address _priceFeed, address _token, uint256 _spreadBasisPoints) external onlyAdmin {\\n        IVaultPriceFeed(_priceFeed).setSpreadBasisPoints(_token, _spreadBasisPoints);\\n    }\\n\\n    function setSpreadThresholdBasisPoints(address _priceFeed, uint256 _spreadThresholdBasisPoints) external onlyAdmin {\\n        IVaultPriceFeed(_priceFeed).setSpreadThresholdBasisPoints(_spreadThresholdBasisPoints);\\n    }\\n\\n    function setFavorPrimaryPrice(address _priceFeed, bool _favorPrimaryPrice) external onlyAdmin {\\n        IVaultPriceFeed(_priceFeed).setFavorPrimaryPrice(_favorPrimaryPrice);\\n    }\\n\\n    function setPriceSampleSpace(address _priceFeed,uint256 _priceSampleSpace) external onlyAdmin {\\n        require(_priceSampleSpace <= 5, \\\"Invalid _priceSampleSpace\\\");\\n        IVaultPriceFeed(_priceFeed).setPriceSampleSpace(_priceSampleSpace);\\n    }\\n\\n    function setIsSwapEnabled(address _vault, bool _isSwapEnabled) external onlyAdmin {\\n        IVault(_vault).setIsSwapEnabled(_isSwapEnabled);\\n    }\\n\\n    function setIsLeverageEnabled(address _vault, bool _isLeverageEnabled) external override onlyAdminOrHandler {\\n        IVault(_vault).setIsLeverageEnabled(_isLeverageEnabled);\\n    }\\n\\n    function setVaultUtils(address _vault, IVaultUtils _vaultUtils) external onlyAdmin {\\n        IVault(_vault).setVaultUtils(_vaultUtils);\\n    }\\n\\n    function setMaxGasPrice(address _vault,uint256 _maxGasPrice) external onlyAdmin {\\n        require(_maxGasPrice > 5000000000, \\\"Invalid _maxGasPrice\\\");\\n        IVault(_vault).setMaxGasPrice(_maxGasPrice);\\n    }\\n\\n    function withdrawFees(address _vault,address _token, address _receiver) external onlyAdmin {\\n        IVault(_vault).withdrawFees(_token, _receiver);\\n    }\\n\\n    function setInPrivateLiquidationMode(address _vault, bool _inPrivateLiquidationMode) external onlyAdmin {\\n        IVault(_vault).setInPrivateLiquidationMode(_inPrivateLiquidationMode);\\n    }\\n\\n    function setLiquidator(address _vault, address _liquidator, bool _isActive) external onlyAdmin {\\n        IVault(_vault).setLiquidator(_liquidator, _isActive);\\n    }\\n\\n    function addExcludedToken(address _token) external onlyAdmin {\\n        excludedTokens[_token] = true;\\n    }\\n\\n    function setInPrivateTransferMode(address _token, bool _inPrivateTransferMode) external onlyAdmin {\\n        if (excludedTokens[_token]) {\\n            // excludedTokens can only have their transfers enabled\\n            require(_inPrivateTransferMode == false, \\\"XdxTimelock: invalid _inPrivateTransferMode\\\");\\n        }\\n\\n        IBaseToken(_token).setInPrivateTransferMode(_inPrivateTransferMode);\\n    }\\n\\n    function transferIn(address _sender, address _token, uint256 _amount) external onlyAdmin {\\n        IERC20(_token).transferFrom(_sender, address(this), _amount);\\n    }\\n\\n    function signalApprove(address _token, address _spender, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"approve\\\", _token, _spender, _amount));\\n        _setPendingAction(action);\\n        emit SignalApprove(_token, _spender, _amount, action);\\n    }\\n\\n    function approve(address _token, address _spender, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"approve\\\", _token, _spender, _amount));\\n        _validateAction(action);\\n        _clearAction(action);\\n        IERC20(_token).approve(_spender, _amount);\\n    }\\n\\n    function signalWithdrawToken(address _target, address _token, address _receiver, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"withdrawToken\\\", _target, _token, _receiver, _amount));\\n        _setPendingAction(action);\\n        emit SignalWithdrawToken(_target, _token, _receiver, _amount, action);\\n    }\\n\\n    function withdrawToken(address _target, address _token, address _receiver, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"withdrawToken\\\", _target, _token, _receiver, _amount));\\n        _validateAction(action);\\n        _clearAction(action);\\n        IBaseToken(_target).withdrawToken(_token, _receiver, _amount);\\n    }\\n\\n    function signalMint(address _token, address _receiver, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"mint\\\", _token, _receiver, _amount));\\n        _setPendingAction(action);\\n        emit SignalMint(_token, _receiver, _amount, action);\\n    }\\n\\n    function processMint(address _token, address _receiver, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"mint\\\", _token, _receiver, _amount));\\n        _validateAction(action);\\n        _clearAction(action);\\n\\n        _mint(_token, _receiver, _amount);\\n    }\\n\\n    function signalSetGov(address _target, address _gov) external override onlyTokenManager {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setGov\\\", _target, _gov));\\n        _setLongPendingAction(action);\\n        emit SignalSetGov(_target, _gov, action);\\n    }\\n\\n    function setGov(address _target, address _gov) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setGov\\\", _target, _gov));\\n        _validateAction(action);\\n        _clearAction(action);\\n        ITimelockTarget(_target).setGov(_gov);\\n    }\\n\\n    function signalSetPriceFeed(address _vault, address _priceFeed) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setPriceFeed\\\", _vault, _priceFeed));\\n        _setPendingAction(action);\\n        emit SignalSetPriceFeed(_vault, _priceFeed, action);\\n    }\\n\\n    function setPriceFeed(address _vault, address _priceFeed) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setPriceFeed\\\", _vault, _priceFeed));\\n        _validateAction(action);\\n        _clearAction(action);\\n        IVault(_vault).setPriceFeed(_priceFeed);\\n    }\\n\\n    function signalAddPlugin(address _router, address _plugin) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"addPlugin\\\", _router, _plugin));\\n        _setPendingAction(action);\\n        emit SignalAddPlugin(_router, _plugin, action);\\n    }\\n\\n    function addPlugin(address _router, address _plugin) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"addPlugin\\\", _router, _plugin));\\n        _validateAction(action);\\n        _clearAction(action);\\n        IRouter(_router).addPlugin(_plugin);\\n    }\\n\\n    function signalRedeemUsdg(address _vault, address _token, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"redeemUsdg\\\", _vault, _token, _amount));\\n        _setPendingAction(action);\\n        emit SignalRedeemUsdg(_vault, _token, _amount);\\n    }\\n\\n    function redeemUsdg(address _vault, address _token, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"redeemUsdg\\\", _vault, _token, _amount));\\n        _validateAction(action);\\n        _clearAction(action);\\n\\n        address usdg = IVault(_vault).usdg();\\n        IVault(_vault).setManager(address(this), true);\\n        IUSDG(usdg).addVault(address(this));\\n\\n        IUSDG(usdg).mint(address(this), _amount);\\n        IERC20(usdg).transfer(address(_vault), _amount);\\n\\n        IVault(_vault).sellUSDG(_token, mintReceiver);\\n\\n        IVault(_vault).setManager(address(this), false);\\n        IUSDG(usdg).removeVault(address(this));\\n    }\\n\\n    function signalVaultSetTokenConfig(\\n        address _vault,\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _tokenWeight,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\n            \\\"vaultSetTokenConfig\\\",\\n            _vault,\\n            _token,\\n            _tokenDecimals,\\n            _tokenWeight,\\n            _minProfitBps,\\n            _maxUsdgAmount,\\n            _isStable,\\n            _isShortable\\n        ));\\n\\n        _setPendingAction(action);\\n\\n        emit SignalVaultSetTokenConfig(\\n            _vault,\\n            _token,\\n            _tokenDecimals,\\n            _tokenWeight,\\n            _minProfitBps,\\n            _maxUsdgAmount,\\n            _isStable,\\n            _isShortable\\n        );\\n    }\\n\\n    function vaultSetTokenConfig(\\n        address _vault,\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _tokenWeight,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\n            \\\"vaultSetTokenConfig\\\",\\n            _vault,\\n            _token,\\n            _tokenDecimals,\\n            _tokenWeight,\\n            _minProfitBps,\\n            _maxUsdgAmount,\\n            _isStable,\\n            _isShortable\\n        ));\\n\\n        _validateAction(action);\\n        _clearAction(action);\\n\\n        IVault(_vault).setTokenConfig(\\n            _token,\\n            _tokenDecimals,\\n            _tokenWeight,\\n            _minProfitBps,\\n            _maxUsdgAmount,\\n            _isStable,\\n            _isShortable\\n        );\\n    }\\n\\n    function signalPriceFeedSetTokenConfig(\\n        address _vaultPriceFeed,\\n        address _token,\\n        address _priceFeed,\\n        uint256 _priceDecimals,\\n        bool _isStrictStable\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\n            \\\"priceFeedSetTokenConfig\\\",\\n            _vaultPriceFeed,\\n            _token,\\n            _priceFeed,\\n            _priceDecimals,\\n            _isStrictStable\\n        ));\\n\\n        _setPendingAction(action);\\n\\n        emit SignalPriceFeedSetTokenConfig(\\n            _vaultPriceFeed,\\n            _token,\\n            _priceFeed,\\n            _priceDecimals,\\n            _isStrictStable\\n        );\\n    }\\n\\n    function priceFeedSetTokenConfig(\\n        address _vaultPriceFeed,\\n        address _token,\\n        address _priceFeed,\\n        uint256 _priceDecimals,\\n        bool _isStrictStable\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\n            \\\"priceFeedSetTokenConfig\\\",\\n            _vaultPriceFeed,\\n            _token,\\n            _priceFeed,\\n            _priceDecimals,\\n            _isStrictStable\\n        ));\\n\\n        _validateAction(action);\\n        _clearAction(action);\\n\\n        IVaultPriceFeed(_vaultPriceFeed).setTokenConfig(\\n            _token,\\n            _priceFeed,\\n            _priceDecimals,\\n            _isStrictStable\\n        );\\n    }\\n\\n    function cancelAction(bytes32 _action) external onlyAdmin {\\n        _clearAction(_action);\\n    }\\n\\n    function _mint(address _token, address _receiver, uint256 _amount) private {\\n        IMintable mintable = IMintable(_token);\\n\\n        if (!mintable.isMinter(address(this))) {\\n            mintable.setMinter(address(this), true);\\n        }\\n\\n        mintable.mint(_receiver, _amount);\\n        require(IERC20(_token).totalSupply() <= maxTokenSupply, \\\"XdxTimelock: maxTokenSupply exceeded\\\");\\n    }\\n\\n    function _setPendingAction(bytes32 _action) private {\\n        pendingActions[_action] = block.timestamp.add(buffer);\\n        emit SignalPendingAction(_action);\\n    }\\n\\n    function _setLongPendingAction(bytes32 _action) private {\\n        pendingActions[_action] = block.timestamp.add(longBuffer);\\n        emit SignalPendingAction(_action);\\n    }\\n\\n    function _validateAction(bytes32 _action) private view {\\n        require(pendingActions[_action] != 0, \\\"XdxTimelock: action not signalled\\\");\\n        require(pendingActions[_action] < block.timestamp, \\\"XdxTimelock: action time not yet passed\\\");\\n    }\\n\\n    function _clearAction(bytes32 _action) private {\\n        require(pendingActions[_action] != 0, \\\"XdxTimelock: invalid _action\\\");\\n        delete pendingActions[_action];\\n        emit ClearAction(_action);\\n    }\\n}\\n\"\n    },\n    \"contracts/peripherals/interfaces/ITimelockTarget.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ITimelockTarget {\\n    function setGov(address _gov) external;\\n    function withdrawToken(address _token, address _account, uint256 _amount) external;\\n}\\n\"\n    },\n    \"contracts/peripherals/interfaces/IXdxTimelock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IXdxTimelock {\\n    function setAdmin(address _admin) external;\\n    function setIsLeverageEnabled(address _vault, bool _isLeverageEnabled) external;\\n    function signalSetGov(address _target, address _gov) external;\\n}\\n\"\n    },\n    \"contracts/peripherals/interfaces/IHandlerTarget.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IHandlerTarget {\\n    function isHandler(address _account) external returns (bool);\\n    function setHandler(address _handler, bool _isActive) external;\\n}\\n\"\n    },\n    \"contracts/access/interfaces/IAdmin.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IAdmin {\\n    function setAdmin(address _admin) external;\\n}\\n\"\n    },\n    \"contracts/core/interfaces/IVaultPriceFeed.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultPriceFeed {\\n    function adjustmentBasisPoints(address _token) external view returns (uint256);\\n    function isAdjustmentAdditive(address _token) external view returns (bool);\\n    function setAdjustment(address _token, bool _isAdditive, uint256 _adjustmentBps) external;\\n    function setUseV2Pricing(bool _useV2Pricing) external;\\n    function setIsAmmEnabled(bool _isEnabled) external;\\n    function setIsSecondaryPriceEnabled(bool _isEnabled) external;\\n    function setSpreadBasisPoints(address _token, uint256 _spreadBasisPoints) external;\\n    function setSpreadThresholdBasisPoints(uint256 _spreadThresholdBasisPoints) external;\\n    function setFavorPrimaryPrice(bool _favorPrimaryPrice) external;\\n    function setPriceSampleSpace(uint256 _priceSampleSpace) external;\\n    function setMaxStrictPriceDeviation(uint256 _maxStrictPriceDeviation) external;\\n    function getPrice(address _token, bool _maximise, bool _includeAmmPrice, bool _useSwapPricing) external view returns (uint256);\\n    function getAmmPrice(address _token) external view returns (uint256);\\n    function getLatestPrimaryPrice(address _token) external view returns (uint256);\\n    function getPrimaryPrice(address _token, bool _maximise) external view returns (uint256);\\n    function setTokenConfig(\\n        address _token,\\n        address _priceFeed,\\n        uint256 _priceDecimals,\\n        bool _isStrictStable\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/core/interfaces/IRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRouter {\\n    function addPlugin(address _plugin) external;\\n    function pluginTransfer(address _token, address _account, address _receiver, uint256 _amount) external;\\n    function pluginIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function pluginDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function swap(address[] memory _path, uint256 _amountIn, uint256 _minOut, address _receiver) external;\\n}\\n\"\n    },\n    \"contracts/tokens/interfaces/IYieldToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IYieldToken {\\n    function totalStaked() external view returns (uint256);\\n    function stakedBalance(address _account) external view returns (uint256);\\n    function removeAdmin(address _account) external;\\n}\\n\"\n    },\n    \"contracts/tokens/interfaces/IBaseToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IBaseToken {\\n    function totalStaked() external view returns (uint256);\\n    function stakedBalance(address _account) external view returns (uint256);\\n    function removeAdmin(address _account) external;\\n    function setInPrivateTransferMode(bool _inPrivateTransferMode) external;\\n    function withdrawToken(address _token, address _account, uint256 _amount) external;\\n}\\n\"\n    },\n    \"contracts/tokens/interfaces/IMintable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IMintable {\\n    function isMinter(address _account) external returns (bool);\\n    function setMinter(address _minter, bool _isActive) external;\\n    function mint(address _account, uint256 _amount) external;\\n    function burn(address _account, uint256 _amount) external;\\n}\\n\"\n    },\n    \"contracts/tokens/interfaces/IUSDG.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IUSDG {\\n    function addVault(address _vault) external;\\n    function removeVault(address _vault) external;\\n    function mint(address _account, uint256 _amount) external;\\n    function burn(address _account, uint256 _amount) external;\\n}\\n\"\n    },\n    \"contracts/staking/interfaces/IVester.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVester {\\n    function rewardTracker() external view returns (address);\\n\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n    function claimable(address _account) external view returns (uint256);\\n    function cumulativeClaimAmounts(address _account) external view returns (uint256);\\n    function claimedAmounts(address _account) external view returns (uint256);\\n    function pairAmounts(address _account) external view returns (uint256);\\n    function getVestedAmount(address _account) external view returns (uint256);\\n    function transferredAverageStakedAmounts(address _account) external view returns (uint256);\\n    function transferredCumulativeRewards(address _account) external view returns (uint256);\\n    function cumulativeRewardDeductions(address _account) external view returns (uint256);\\n    function bonusRewards(address _account) external view returns (uint256);\\n\\n    function transferStakeValues(address _sender, address _receiver) external;\\n    function setTransferredAverageStakedAmounts(address _account, uint256 _amount) external;\\n    function setTransferredCumulativeRewards(address _account, uint256 _amount) external;\\n    function setCumulativeRewardDeductions(address _account, uint256 _amount) external;\\n    function setBonusRewards(address _account, uint256 _amount) external;\\n\\n    function getMaxVestableAmount(address _account) external view returns (uint256);\\n    function getCombinedAverageStakedAmount(address _account) external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/xdx/XdxIou.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IXdxIou.sol\\\";\\n\\ncontract XdxIou is IERC20, IXdxIou {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n    uint256 public override totalSupply;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    address public minter;\\n\\n    constructor (address _minter, string memory _name, string memory _symbol) public {\\n        name = _name;\\n        symbol = _symbol;\\n        minter = _minter;\\n        decimals = 18;\\n    }\\n\\n    function mint(address account, uint256 amount) public override returns (bool) {\\n        require(msg.sender == minter, \\\"XdxIou: forbidden\\\");\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    // empty implementation, XdxIou tokens are non-transferrable\\n    function transfer(address /* recipient */, uint256 /* amount */) public override returns (bool) {\\n        revert(\\\"XdxIou: non-transferrable\\\");\\n    }\\n\\n    // empty implementation, XdxIou tokens are non-transferrable\\n    function allowance(address /* owner */, address /* spender */) public view virtual override returns (uint256) {\\n        return 0;\\n    }\\n\\n    // empty implementation, XdxIou tokens are non-transferrable\\n    function approve(address /* spender */, uint256 /* amount */) public virtual override returns (bool) {\\n        revert(\\\"XdxIou: non-transferrable\\\");\\n    }\\n\\n    // empty implementation, XdxIou tokens are non-transferrable\\n    function transferFrom(address /* sender */, address /* recipient */, uint256 /* amount */) public virtual override returns (bool) {\\n        revert(\\\"XdxIou: non-transferrable\\\");\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"XdxIou: mint to the zero address\\\");\\n\\n        totalSupply = totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/xdx/XdxFloor.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../tokens/interfaces/IMintable.sol\\\";\\nimport \\\"../access/TokenManager.sol\\\";\\n\\ncontract XdxFloor is ReentrancyGuard, TokenManager {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\\n    uint256 public constant BURN_BASIS_POINTS = 9000;\\n\\n    address public xdx;\\n    address public reserveToken;\\n    uint256 public backedSupply;\\n    uint256 public baseMintPrice;\\n    uint256 public mintMultiplier;\\n    uint256 public mintedSupply;\\n    uint256 public multiplierPrecision;\\n\\n    mapping (address => bool) public isHandler;\\n\\n    modifier onlyHandler() {\\n        require(isHandler[msg.sender], \\\"XdxFloor: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _xdx,\\n        address _reserveToken,\\n        uint256 _backedSupply,\\n        uint256 _baseMintPrice,\\n        uint256 _mintMultiplier,\\n        uint256 _multiplierPrecision,\\n        uint256 _minAuthorizations\\n    ) public TokenManager(_minAuthorizations) {\\n        xdx = _xdx;\\n\\n        reserveToken = _reserveToken;\\n        backedSupply = _backedSupply;\\n\\n        baseMintPrice = _baseMintPrice;\\n        mintMultiplier = _mintMultiplier;\\n        multiplierPrecision = _multiplierPrecision;\\n    }\\n\\n    function initialize(address[] memory _signers) public override onlyAdmin {\\n        TokenManager.initialize(_signers);\\n    }\\n\\n    function setHandler(address _handler, bool _isHandler) public onlyAdmin {\\n        isHandler[_handler] = _isHandler;\\n    }\\n\\n    function setBackedSupply(uint256 _backedSupply) public onlyAdmin {\\n        require(_backedSupply > backedSupply, \\\"XdxFloor: invalid _backedSupply\\\");\\n        backedSupply = _backedSupply;\\n    }\\n\\n    function setMintMultiplier(uint256 _mintMultiplier) public onlyAdmin {\\n        require(_mintMultiplier > mintMultiplier, \\\"XdxFloor: invalid _mintMultiplier\\\");\\n        mintMultiplier = _mintMultiplier;\\n    }\\n\\n    // mint refers to increasing the circulating supply\\n    // the XDX tokens to be transferred out must be pre-transferred into this contract\\n    function mint(uint256 _amount, uint256 _maxCost, address _receiver) public onlyHandler nonReentrant returns (uint256) {\\n        require(_amount > 0, \\\"XdxFloor: invalid _amount\\\");\\n\\n        uint256 currentMintPrice = getMintPrice();\\n        uint256 nextMintPrice = currentMintPrice.add(_amount.mul(mintMultiplier).div(multiplierPrecision));\\n        uint256 averageMintPrice = currentMintPrice.add(nextMintPrice).div(2);\\n\\n        uint256 cost = _amount.mul(averageMintPrice).div(PRICE_PRECISION);\\n        require(cost <= _maxCost, \\\"XdxFloor: _maxCost exceeded\\\");\\n\\n        mintedSupply = mintedSupply.add(_amount);\\n        backedSupply = backedSupply.add(_amount);\\n\\n        IERC20(reserveToken).safeTransferFrom(msg.sender, address(this), cost);\\n        IERC20(xdx).transfer(_receiver, _amount);\\n\\n        return cost;\\n    }\\n\\n    function burn(uint256 _amount, uint256 _minOut, address _receiver) public onlyHandler nonReentrant returns (uint256) {\\n        require(_amount > 0, \\\"XdxFloor: invalid _amount\\\");\\n\\n        uint256 amountOut = getBurnAmountOut(_amount);\\n        require(amountOut >= _minOut, \\\"XdxFloor: insufficient amountOut\\\");\\n\\n        backedSupply = backedSupply.sub(_amount);\\n\\n        IMintable(xdx).burn(msg.sender, _amount);\\n        IERC20(reserveToken).safeTransfer(_receiver, amountOut);\\n\\n        return amountOut;\\n    }\\n\\n    function getMintPrice() public view returns (uint256) {\\n        return baseMintPrice.add(mintedSupply.mul(mintMultiplier).div(multiplierPrecision));\\n    }\\n\\n    function getBurnAmountOut(uint256 _amount) public view returns (uint256) {\\n        uint256 balance = IERC20(reserveToken).balanceOf(address(this));\\n        return _amount.mul(balance).div(backedSupply).mul(BURN_BASIS_POINTS).div(BASIS_POINTS_DIVISOR);\\n    }\\n}\\n\"\n    },\n    \"contracts/access/TokenManager.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/ERC721/IERC721.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../peripherals/interfaces/ITimelock.sol\\\";\\n\\ncontract TokenManager is ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    bool public isInitialized;\\n\\n    uint256 public actionsNonce;\\n    uint256 public minAuthorizations;\\n\\n    address public admin;\\n\\n    address[] public signers;\\n    mapping (address => bool) public isSigner;\\n    mapping (bytes32 => bool) public pendingActions;\\n    mapping (address => mapping (bytes32 => bool)) public signedActions;\\n\\n    event SignalApprove(address token, address spender, uint256 amount, bytes32 action, uint256 nonce);\\n    event SignalApproveNFT(address token, address spender, uint256 tokenId, bytes32 action, uint256 nonce);\\n    event SignalApproveNFTs(address token, address spender, uint256[] tokenIds, bytes32 action, uint256 nonce);\\n    event SignalSetAdmin(address target, address admin, bytes32 action, uint256 nonce);\\n    event SignalSetGov(address timelock, address target, address gov, bytes32 action, uint256 nonce);\\n    event SignalPendingAction(bytes32 action, uint256 nonce);\\n    event SignAction(bytes32 action, uint256 nonce);\\n    event ClearAction(bytes32 action, uint256 nonce);\\n\\n    constructor(uint256 _minAuthorizations) public {\\n        admin = msg.sender;\\n        minAuthorizations = _minAuthorizations;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"TokenManager: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlySigner() {\\n        require(isSigner[msg.sender], \\\"TokenManager: forbidden\\\");\\n        _;\\n    }\\n\\n    function initialize(address[] memory _signers) public virtual onlyAdmin {\\n        require(!isInitialized, \\\"TokenManager: already initialized\\\");\\n        isInitialized = true;\\n\\n        signers = _signers;\\n        for (uint256 i = 0; i < _signers.length; i++) {\\n            address signer = _signers[i];\\n            isSigner[signer] = true;\\n        }\\n    }\\n\\n    function signersLength() public view returns (uint256) {\\n        return signers.length;\\n    }\\n\\n    function signalApprove(address _token, address _spender, uint256 _amount) external nonReentrant onlyAdmin {\\n        actionsNonce++;\\n        uint256 nonce = actionsNonce;\\n        bytes32 action = keccak256(abi.encodePacked(\\\"approve\\\", _token, _spender, _amount, nonce));\\n        _setPendingAction(action, nonce);\\n        emit SignalApprove(_token, _spender, _amount, action, nonce);\\n    }\\n\\n    function signApprove(address _token, address _spender, uint256 _amount, uint256 _nonce) external nonReentrant onlySigner {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"approve\\\", _token, _spender, _amount, _nonce));\\n        _validateAction(action);\\n        require(!signedActions[msg.sender][action], \\\"TokenManager: already signed\\\");\\n        signedActions[msg.sender][action] = true;\\n        emit SignAction(action, _nonce);\\n    }\\n\\n    function approve(address _token, address _spender, uint256 _amount, uint256 _nonce) external nonReentrant onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"approve\\\", _token, _spender, _amount, _nonce));\\n        _validateAction(action);\\n        _validateAuthorization(action);\\n\\n        IERC20(_token).approve(_spender, _amount);\\n        _clearAction(action, _nonce);\\n    }\\n\\n    function signalApproveNFT(address _token, address _spender, uint256 _tokenId) external nonReentrant onlyAdmin {\\n        actionsNonce++;\\n        uint256 nonce = actionsNonce;\\n        bytes32 action = keccak256(abi.encodePacked(\\\"approveNFT\\\", _token, _spender, _tokenId, nonce));\\n        _setPendingAction(action, nonce);\\n        emit SignalApproveNFT(_token, _spender, _tokenId, action, nonce);\\n    }\\n\\n    function signApproveNFT(address _token, address _spender, uint256 _tokenId, uint256 _nonce) external nonReentrant onlySigner {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"approveNFT\\\", _token, _spender, _tokenId, _nonce));\\n        _validateAction(action);\\n        require(!signedActions[msg.sender][action], \\\"TokenManager: already signed\\\");\\n        signedActions[msg.sender][action] = true;\\n        emit SignAction(action, _nonce);\\n    }\\n\\n    function approveNFT(address _token, address _spender, uint256 _tokenId, uint256 _nonce) external nonReentrant onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"approveNFT\\\", _token, _spender, _tokenId, _nonce));\\n        _validateAction(action);\\n        _validateAuthorization(action);\\n\\n        IERC721(_token).approve(_spender, _tokenId);\\n        _clearAction(action, _nonce);\\n    }\\n\\n    function signalApproveNFTs(address _token, address _spender, uint256[] memory _tokenIds) external nonReentrant onlyAdmin {\\n        actionsNonce++;\\n        uint256 nonce = actionsNonce;\\n        bytes32 action = keccak256(abi.encodePacked(\\\"approveNFTs\\\", _token, _spender, _tokenIds, nonce));\\n        _setPendingAction(action, nonce);\\n        emit SignalApproveNFTs(_token, _spender, _tokenIds, action, nonce);\\n    }\\n\\n    function signApproveNFTs(address _token, address _spender, uint256[] memory _tokenIds, uint256 _nonce) external nonReentrant onlySigner {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"approveNFTs\\\", _token, _spender, _tokenIds, _nonce));\\n        _validateAction(action);\\n        require(!signedActions[msg.sender][action], \\\"TokenManager: already signed\\\");\\n        signedActions[msg.sender][action] = true;\\n        emit SignAction(action, _nonce);\\n    }\\n\\n    function approveNFTs(address _token, address _spender, uint256[] memory _tokenIds, uint256 _nonce) external nonReentrant onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"approveNFTs\\\", _token, _spender, _tokenIds, _nonce));\\n        _validateAction(action);\\n        _validateAuthorization(action);\\n\\n        for (uint256 i = 0 ; i < _tokenIds.length; i++) {\\n            IERC721(_token).approve(_spender, _tokenIds[i]);\\n        }\\n        _clearAction(action, _nonce);\\n    }\\n\\n    function receiveNFTs(address _token, address _sender, uint256[] memory _tokenIds) external nonReentrant onlyAdmin {\\n        for (uint256 i = 0 ; i < _tokenIds.length; i++) {\\n            IERC721(_token).transferFrom(_sender, address(this), _tokenIds[i]);\\n        }\\n    }\\n\\n    function signalSetAdmin(address _target, address _admin) external nonReentrant onlySigner {\\n        actionsNonce++;\\n        uint256 nonce = actionsNonce;\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setAdmin\\\", _target, _admin, nonce));\\n        _setPendingAction(action, nonce);\\n        signedActions[msg.sender][action] = true;\\n        emit SignalSetAdmin(_target, _admin, action, nonce);\\n    }\\n\\n    function signSetAdmin(address _target, address _admin, uint256 _nonce) external nonReentrant onlySigner {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setAdmin\\\", _target, _admin, _nonce));\\n        _validateAction(action);\\n        require(!signedActions[msg.sender][action], \\\"TokenManager: already signed\\\");\\n        signedActions[msg.sender][action] = true;\\n        emit SignAction(action, _nonce);\\n    }\\n\\n    function setAdmin(address _target, address _admin, uint256 _nonce) external nonReentrant onlySigner {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setAdmin\\\", _target, _admin, _nonce));\\n        _validateAction(action);\\n        _validateAuthorization(action);\\n\\n        ITimelock(_target).setAdmin(_admin);\\n        _clearAction(action, _nonce);\\n    }\\n\\n    function signalSetGov(address _timelock, address _target, address _gov) external nonReentrant onlyAdmin {\\n        actionsNonce++;\\n        uint256 nonce = actionsNonce;\\n        bytes32 action = keccak256(abi.encodePacked(\\\"signalSetGov\\\", _timelock, _target, _gov, nonce));\\n        _setPendingAction(action, nonce);\\n        signedActions[msg.sender][action] = true;\\n        emit SignalSetGov(_timelock, _target, _gov, action, nonce);\\n    }\\n\\n    function signSetGov(address _timelock, address _target, address _gov, uint256 _nonce) external nonReentrant onlySigner {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"signalSetGov\\\", _timelock, _target, _gov, _nonce));\\n        _validateAction(action);\\n        require(!signedActions[msg.sender][action], \\\"TokenManager: already signed\\\");\\n        signedActions[msg.sender][action] = true;\\n        emit SignAction(action, _nonce);\\n    }\\n\\n    function setGov(address _timelock, address _target, address _gov, uint256 _nonce) external nonReentrant onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"signalSetGov\\\", _timelock, _target, _gov, _nonce));\\n        _validateAction(action);\\n        _validateAuthorization(action);\\n\\n        ITimelock(_timelock).signalSetGov(_target, _gov);\\n        _clearAction(action, _nonce);\\n    }\\n\\n    function _setPendingAction(bytes32 _action, uint256 _nonce) private {\\n        pendingActions[_action] = true;\\n        emit SignalPendingAction(_action, _nonce);\\n    }\\n\\n    function _validateAction(bytes32 _action) private view {\\n        require(pendingActions[_action], \\\"TokenManager: action not signalled\\\");\\n    }\\n\\n    function _validateAuthorization(bytes32 _action) private view {\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < signers.length; i++) {\\n            address signer = signers[i];\\n            if (signedActions[signer][_action]) {\\n                count++;\\n            }\\n        }\\n\\n        if (count == 0) {\\n            revert(\\\"TokenManager: action not authorized\\\");\\n        }\\n        require(count >= minAuthorizations, \\\"TokenManager: insufficient authorization\\\");\\n    }\\n\\n    function _clearAction(bytes32 _action, uint256 _nonce) private {\\n        require(pendingActions[_action], \\\"TokenManager: invalid _action\\\");\\n        delete pendingActions[_action];\\n        emit ClearAction(_action, _nonce);\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\n    },\n    \"contracts/peripherals/interfaces/ITimelock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ITimelock {\\n    function setAdmin(address _admin) external;\\n    function enableLeverage(address _vault) external;\\n    function disableLeverage(address _vault) external;\\n    function setIsLeverageEnabled(address _vault, bool _isLeverageEnabled) external;\\n    function signalSetGov(address _target, address _gov) external;\\n}\\n\"\n    },\n    \"contracts/libraries/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"contracts/referrals/ReferralStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\nimport \\\"../access/Governable.sol\\\";\\nimport \\\"../peripherals/interfaces/ITimelock.sol\\\";\\n\\nimport \\\"./interfaces/IReferralStorage.sol\\\";\\n\\ncontract ReferralStorage is Governable, IReferralStorage {\\n    using SafeMath for uint256;\\n\\n    struct Tier {\\n        uint256 totalRebate; // e.g. 2400 for 24%\\n        uint256 discountShare; // 5000 for 50%/50%, 7000 for 30% rebates/70% discount\\n    }\\n\\n    uint256 public constant BASIS_POINTS = 10000;\\n\\n    mapping (address => uint256) public referrerDiscountShares; // to override default value in tier\\n    mapping (address => uint256) public referrerTiers; // link between user <> tier\\n    mapping (uint256 => Tier) public tiers;\\n\\n    mapping (address => bool) public isHandler;\\n\\n    mapping (bytes32 => address) public override codeOwners;\\n    mapping (address => bytes32) public traderReferralCodes;\\n\\n    event SetHandler(address handler, bool isActive);\\n    event SetTraderReferralCode(address account, bytes32 code);\\n    event SetTier(uint256 tierId, uint256 totalRebate, uint256 discountShare);\\n    event SetReferrerTier(address referrer, uint256 tierId);\\n    event SetReferrerDiscountShare(address referrer, uint256 discountShare);\\n    event RegisterCode(address account, bytes32 code);\\n    event SetCodeOwner(address account, address newAccount, bytes32 code);\\n    event GovSetCodeOwner(bytes32 code, address newAccount);\\n\\n    modifier onlyHandler() {\\n        require(isHandler[msg.sender], \\\"ReferralStorage: forbidden\\\");\\n        _;\\n    }\\n\\n    function setHandler(address _handler, bool _isActive) external onlyGov {\\n        isHandler[_handler] = _isActive;\\n        emit SetHandler(_handler, _isActive);\\n    }\\n\\n    function setTier(uint256 _tierId, uint256 _totalRebate, uint256 _discountShare) external override onlyGov {\\n        require(_totalRebate <= BASIS_POINTS, \\\"ReferralStorage: invalid totalRebate\\\");\\n        require(_discountShare <= BASIS_POINTS, \\\"ReferralStorage: invalid discountShare\\\");\\n\\n        Tier memory tier = tiers[_tierId];\\n        tier.totalRebate = _totalRebate;\\n        tier.discountShare = _discountShare;\\n        tiers[_tierId] = tier;\\n        emit SetTier(_tierId, _totalRebate, _discountShare);\\n    }\\n\\n    function setReferrerTier(address _referrer, uint256 _tierId) external override onlyGov {\\n        referrerTiers[_referrer] = _tierId;\\n        emit SetReferrerTier(_referrer, _tierId);\\n    }\\n\\n    function setReferrerDiscountShare(uint256 _discountShare) external {\\n        require(_discountShare <= BASIS_POINTS, \\\"ReferralStorage: invalid discountShare\\\");\\n\\n        referrerDiscountShares[msg.sender] = _discountShare;\\n        emit SetReferrerDiscountShare(msg.sender, _discountShare);\\n    }\\n\\n    function setTraderReferralCode(address _account, bytes32 _code) external override onlyHandler {\\n        _setTraderReferralCode(_account, _code);\\n    }\\n\\n    function setTraderReferralCodeByUser(bytes32 _code) external {\\n        _setTraderReferralCode(msg.sender, _code);\\n    }\\n\\n    function registerCode(bytes32 _code) external {\\n        require(_code != bytes32(0), \\\"ReferralStorage: invalid _code\\\");\\n        require(codeOwners[_code] == address(0), \\\"ReferralStorage: code already exists\\\");\\n\\n        codeOwners[_code] = msg.sender;\\n        emit RegisterCode(msg.sender, _code);\\n    }\\n\\n    function setCodeOwner(bytes32 _code, address _newAccount) external {\\n        require(_code != bytes32(0), \\\"ReferralStorage: invalid _code\\\");\\n\\n        address account = codeOwners[_code];\\n        require(msg.sender == account, \\\"ReferralStorage: forbidden\\\");\\n\\n        codeOwners[_code] = _newAccount;\\n        emit SetCodeOwner(msg.sender, _newAccount, _code);\\n    }\\n\\n    function govSetCodeOwner(bytes32 _code, address _newAccount) external override onlyGov {\\n        require(_code != bytes32(0), \\\"ReferralStorage: invalid _code\\\");\\n\\n        codeOwners[_code] = _newAccount;\\n        emit GovSetCodeOwner(_code, _newAccount);\\n    }\\n\\n    function getTraderReferralInfo(address _account) external override view returns (bytes32, address) {\\n        bytes32 code = traderReferralCodes[_account];\\n        address referrer;\\n        if (code != bytes32(0)) {\\n            referrer = codeOwners[code];\\n        }\\n        return (code, referrer);\\n    }\\n\\n    function _setTraderReferralCode(address _account, bytes32 _code) private {\\n        traderReferralCodes[_account] = _code;\\n        emit SetTraderReferralCode(_account, _code);\\n    }\\n}\\n\"\n    },\n    \"contracts/referrals/interfaces/IReferralStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IReferralStorage {\\n    function codeOwners(bytes32 _code) external view returns (address);\\n    function getTraderReferralInfo(address _account) external view returns (bytes32, address);\\n    function setTraderReferralCode(address _account, bytes32 _code) external;\\n    function setTier(uint256 _tierId, uint256 _totalRebate, uint256 _discountShare) external;\\n    function setReferrerTier(address _referrer, uint256 _tierId) external;\\n    function govSetCodeOwner(bytes32 _code, address _newAccount) external;\\n}\\n\"\n    },\n    \"contracts/referrals/ReferralReader.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./interfaces/IReferralStorage.sol\\\";\\n\\ncontract ReferralReader {\\n    function getCodeOwners(IReferralStorage _referralStorage, bytes32[] memory _codes) public view returns (address[] memory) {\\n        address[] memory owners = new address[](_codes.length);\\n\\n        for (uint256 i = 0; i < _codes.length; i++) {\\n            bytes32 code = _codes[i];\\n            owners[i] = _referralStorage.codeOwners(code);\\n        }\\n\\n        return owners;\\n    }\\n}\\n\"\n    },\n    \"contracts/peripherals/Timelock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./interfaces/ITimelockTarget.sol\\\";\\nimport \\\"./interfaces/ITimelock.sol\\\";\\nimport \\\"./interfaces/IHandlerTarget.sol\\\";\\nimport \\\"../access/interfaces/IAdmin.sol\\\";\\nimport \\\"../core/interfaces/IVault.sol\\\";\\nimport \\\"../core/interfaces/IVaultUtils.sol\\\";\\nimport \\\"../core/interfaces/IXlxManager.sol\\\";\\nimport \\\"../referrals/interfaces/IReferralStorage.sol\\\";\\nimport \\\"../tokens/interfaces/IYieldToken.sol\\\";\\nimport \\\"../tokens/interfaces/IBaseToken.sol\\\";\\nimport \\\"../tokens/interfaces/IMintable.sol\\\";\\nimport \\\"../tokens/interfaces/IUSDG.sol\\\";\\nimport \\\"../staking/interfaces/IVester.sol\\\";\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\n\\ncontract Timelock is ITimelock {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\\n    uint256 public constant MAX_BUFFER = 5 days;\\n    uint256 public constant MAX_FUNDING_RATE_FACTOR = 200; // 0.02%\\n    uint256 public constant MAX_LEVERAGE_VALIDATION = 500000; // 50x\\n\\n    uint256 public buffer;\\n    address public admin;\\n\\n    address public tokenManager;\\n    address public mintReceiver;\\n    address public xlxManager;\\n    uint256 public maxTokenSupply;\\n\\n    uint256 public marginFeeBasisPoints;\\n    uint256 public maxMarginFeeBasisPoints;\\n    bool public shouldToggleIsLeverageEnabled;\\n\\n    mapping (bytes32 => uint256) public pendingActions;\\n\\n    mapping (address => bool) public isHandler;\\n    mapping (address => bool) public isKeeper;\\n\\n    event SignalPendingAction(bytes32 action);\\n    event SignalApprove(address token, address spender, uint256 amount, bytes32 action);\\n    event SignalWithdrawToken(address target, address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalMint(address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalSetGov(address target, address gov, bytes32 action);\\n    event SignalSetHandler(address target, address handler, bool isActive, bytes32 action);\\n    event SignalSetPriceFeed(address vault, address priceFeed, bytes32 action);\\n    event SignalRedeemUsdg(address vault, address token, uint256 amount);\\n    event SignalVaultSetTokenConfig(\\n        address vault,\\n        address token,\\n        uint256 tokenDecimals,\\n        uint256 tokenWeight,\\n        uint256 minProfitBps,\\n        uint256 maxUsdgAmount,\\n        bool isStable,\\n        bool isShortable\\n    );\\n    event ClearAction(bytes32 action);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Timelock: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyHandlerAndAbove() {\\n        require(msg.sender == admin || isHandler[msg.sender], \\\"Timelock: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeperAndAbove() {\\n        require(msg.sender == admin || isHandler[msg.sender] || isKeeper[msg.sender], \\\"Timelock: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyTokenManager() {\\n        require(msg.sender == tokenManager, \\\"Timelock: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _admin,\\n        uint256 _buffer,\\n        address _tokenManager,\\n        address _mintReceiver,\\n        address _xlxManager,\\n        uint256 _maxTokenSupply,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _maxMarginFeeBasisPoints\\n    ) public {\\n        require(_buffer <= MAX_BUFFER, \\\"Timelock: invalid _buffer\\\");\\n        admin = _admin;\\n        buffer = _buffer;\\n        tokenManager = _tokenManager;\\n        mintReceiver = _mintReceiver;\\n        xlxManager = _xlxManager;\\n        maxTokenSupply = _maxTokenSupply;\\n\\n        marginFeeBasisPoints = _marginFeeBasisPoints;\\n        maxMarginFeeBasisPoints = _maxMarginFeeBasisPoints;\\n    }\\n\\n    function setAdmin(address _admin) external override onlyTokenManager {\\n        admin = _admin;\\n    }\\n\\n    function setExternalAdmin(address _target, address _admin) external onlyAdmin {\\n        require(_target != address(this), \\\"Timelock: invalid _target\\\");\\n        IAdmin(_target).setAdmin(_admin);\\n    }\\n\\n    function setContractHandler(address _handler, bool _isActive) external onlyAdmin {\\n        isHandler[_handler] = _isActive;\\n    }\\n\\n    function setKeeper(address _keeper, bool _isActive) external onlyAdmin {\\n        isKeeper[_keeper] = _isActive;\\n    }\\n\\n    function setBuffer(uint256 _buffer) external onlyAdmin {\\n        require(_buffer <= MAX_BUFFER, \\\"Timelock: invalid _buffer\\\");\\n        require(_buffer > buffer, \\\"Timelock: buffer cannot be decreased\\\");\\n        buffer = _buffer;\\n    }\\n\\n    function setMaxLeverage(address _vault, uint256 _maxLeverage) external onlyAdmin {\\n      require(_maxLeverage > MAX_LEVERAGE_VALIDATION, \\\"Timelock: invalid _maxLeverage\\\");\\n      IVault(_vault).setMaxLeverage(_maxLeverage);\\n    }\\n\\n    function setFundingRate(address _vault, uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external onlyKeeperAndAbove {\\n        require(_fundingRateFactor < MAX_FUNDING_RATE_FACTOR, \\\"Timelock: invalid _fundingRateFactor\\\");\\n        require(_stableFundingRateFactor < MAX_FUNDING_RATE_FACTOR, \\\"Timelock: invalid _stableFundingRateFactor\\\");\\n        IVault(_vault).setFundingRate(_fundingInterval, _fundingRateFactor, _stableFundingRateFactor);\\n    }\\n\\n    function setShouldToggleIsLeverageEnabled(bool _shouldToggleIsLeverageEnabled) external onlyHandlerAndAbove {\\n        shouldToggleIsLeverageEnabled = _shouldToggleIsLeverageEnabled;\\n    }\\n\\n    function setMarginFeeBasisPoints(uint256 _marginFeeBasisPoints, uint256 _maxMarginFeeBasisPoints) external onlyHandlerAndAbove {\\n        marginFeeBasisPoints = _marginFeeBasisPoints;\\n        maxMarginFeeBasisPoints = _maxMarginFeeBasisPoints;\\n    }\\n\\n    function setSwapFees(\\n        address _vault,\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints\\n    ) external onlyKeeperAndAbove {\\n        IVault vault = IVault(_vault);\\n\\n        vault.setFees(\\n            _taxBasisPoints,\\n            _stableTaxBasisPoints,\\n            _mintBurnFeeBasisPoints,\\n            _swapFeeBasisPoints,\\n            _stableSwapFeeBasisPoints,\\n            maxMarginFeeBasisPoints,\\n            vault.liquidationFeeUsd(),\\n            vault.minProfitTime(),\\n            vault.hasDynamicFees()\\n        );\\n    }\\n\\n    // assign _marginFeeBasisPoints to this.marginFeeBasisPoints\\n    // because enableLeverage would update Vault.marginFeeBasisPoints to this.marginFeeBasisPoints\\n    // and disableLeverage would reset the Vault.marginFeeBasisPoints to this.maxMarginFeeBasisPoints\\n    function setFees(\\n        address _vault,\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external onlyKeeperAndAbove {\\n        marginFeeBasisPoints = _marginFeeBasisPoints;\\n\\n        IVault(_vault).setFees(\\n            _taxBasisPoints,\\n            _stableTaxBasisPoints,\\n            _mintBurnFeeBasisPoints,\\n            _swapFeeBasisPoints,\\n            _stableSwapFeeBasisPoints,\\n            maxMarginFeeBasisPoints,\\n            _liquidationFeeUsd,\\n            _minProfitTime,\\n            _hasDynamicFees\\n        );\\n    }\\n\\n    function enableLeverage(address _vault) external override onlyHandlerAndAbove {\\n        IVault vault = IVault(_vault);\\n\\n        if (shouldToggleIsLeverageEnabled) {\\n            vault.setIsLeverageEnabled(true);\\n        }\\n\\n        vault.setFees(\\n            vault.taxBasisPoints(),\\n            vault.stableTaxBasisPoints(),\\n            vault.mintBurnFeeBasisPoints(),\\n            vault.swapFeeBasisPoints(),\\n            vault.stableSwapFeeBasisPoints(),\\n            marginFeeBasisPoints,\\n            vault.liquidationFeeUsd(),\\n            vault.minProfitTime(),\\n            vault.hasDynamicFees()\\n        );\\n    }\\n\\n    function disableLeverage(address _vault) external override onlyHandlerAndAbove {\\n        IVault vault = IVault(_vault);\\n\\n        if (shouldToggleIsLeverageEnabled) {\\n            vault.setIsLeverageEnabled(false);\\n        }\\n\\n        vault.setFees(\\n            vault.taxBasisPoints(),\\n            vault.stableTaxBasisPoints(),\\n            vault.mintBurnFeeBasisPoints(),\\n            vault.swapFeeBasisPoints(),\\n            vault.stableSwapFeeBasisPoints(),\\n            maxMarginFeeBasisPoints, // marginFeeBasisPoints\\n            vault.liquidationFeeUsd(),\\n            vault.minProfitTime(),\\n            vault.hasDynamicFees()\\n        );\\n    }\\n\\n    function setIsLeverageEnabled(address _vault, bool _isLeverageEnabled) external override onlyHandlerAndAbove {\\n        IVault(_vault).setIsLeverageEnabled(_isLeverageEnabled);\\n    }\\n\\n    function setTokenConfig(\\n        address _vault,\\n        address _token,\\n        uint256 _tokenWeight,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        uint256 _bufferAmount,\\n        uint256 _usdgAmount\\n    ) external onlyKeeperAndAbove {\\n        require(_minProfitBps <= 500, \\\"Timelock: invalid _minProfitBps\\\");\\n\\n        IVault vault = IVault(_vault);\\n        require(vault.whitelistedTokens(_token), \\\"Timelock: token not yet whitelisted\\\");\\n\\n        uint256 tokenDecimals = vault.tokenDecimals(_token);\\n        bool isStable = vault.stableTokens(_token);\\n        bool isShortable = vault.shortableTokens(_token);\\n\\n        IVault(_vault).setTokenConfig(\\n            _token,\\n            tokenDecimals,\\n            _tokenWeight,\\n            _minProfitBps,\\n            _maxUsdgAmount,\\n            isStable,\\n            isShortable\\n        );\\n\\n        IVault(_vault).setBufferAmount(_token, _bufferAmount);\\n\\n        IVault(_vault).setUsdgAmount(_token, _usdgAmount);\\n    }\\n\\n    function setUsdgAmounts(address _vault, address[] memory _tokens, uint256[] memory _usdgAmounts) external onlyKeeperAndAbove {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            IVault(_vault).setUsdgAmount(_tokens[i], _usdgAmounts[i]);\\n        }\\n    }\\n\\n    function updateUsdgSupply(uint256 usdgAmount) external onlyKeeperAndAbove {\\n        address usdg = IXlxManager(xlxManager).usdg();\\n        uint256 balance = IERC20(usdg).balanceOf(xlxManager);\\n\\n        IUSDG(usdg).addVault(address(this));\\n\\n        if (usdgAmount > balance) {\\n            uint256 mintAmount = usdgAmount.sub(balance);\\n            IUSDG(usdg).mint(xlxManager, mintAmount);\\n        } else {\\n            uint256 burnAmount = balance.sub(usdgAmount);\\n            IUSDG(usdg).burn(xlxManager, burnAmount);\\n        }\\n\\n        IUSDG(usdg).removeVault(address(this));\\n    }\\n\\n    function setMaxGlobalShortSize(address _vault, address _token, uint256 _amount) external onlyAdmin {\\n        IVault(_vault).setMaxGlobalShortSize(_token, _amount);\\n    }\\n\\n    function removeAdmin(address _token, address _account) external onlyAdmin {\\n        IYieldToken(_token).removeAdmin(_account);\\n    }\\n\\n    function setIsSwapEnabled(address _vault, bool _isSwapEnabled) external onlyKeeperAndAbove {\\n        IVault(_vault).setIsSwapEnabled(_isSwapEnabled);\\n    }\\n\\n    function setTier(address _referralStorage, uint256 _tierId, uint256 _totalRebate, uint256 _discountShare) external onlyKeeperAndAbove {\\n        IReferralStorage(_referralStorage).setTier(_tierId, _totalRebate, _discountShare);\\n    }\\n\\n    function setReferrerTier(address _referralStorage, address _referrer, uint256 _tierId) external onlyKeeperAndAbove {\\n        IReferralStorage(_referralStorage).setReferrerTier(_referrer, _tierId);\\n    }\\n\\n    function govSetCodeOwner(address _referralStorage, bytes32 _code, address _newAccount) external onlyKeeperAndAbove {\\n        IReferralStorage(_referralStorage).govSetCodeOwner(_code, _newAccount);\\n    }\\n\\n    function setVaultUtils(address _vault, IVaultUtils _vaultUtils) external onlyAdmin {\\n        IVault(_vault).setVaultUtils(_vaultUtils);\\n    }\\n\\n    function setMaxGasPrice(address _vault, uint256 _maxGasPrice) external onlyAdmin {\\n        require(_maxGasPrice > 5000000000, \\\"Invalid _maxGasPrice\\\");\\n        IVault(_vault).setMaxGasPrice(_maxGasPrice);\\n    }\\n\\n    function withdrawFees(address _vault, address _token, address _receiver) external onlyAdmin {\\n        IVault(_vault).withdrawFees(_token, _receiver);\\n    }\\n\\n    function batchWithdrawFees(address _vault, address[] memory _tokens) external onlyKeeperAndAbove {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            IVault(_vault).withdrawFees(_tokens[i], admin);\\n        }\\n    }\\n\\n    function setInPrivateLiquidationMode(address _vault, bool _inPrivateLiquidationMode) external onlyAdmin {\\n        IVault(_vault).setInPrivateLiquidationMode(_inPrivateLiquidationMode);\\n    }\\n\\n    function setLiquidator(address _vault, address _liquidator, bool _isActive) external onlyAdmin {\\n        IVault(_vault).setLiquidator(_liquidator, _isActive);\\n    }\\n\\n    function setInPrivateTransferMode(address _token, bool _inPrivateTransferMode) external onlyAdmin {\\n        IBaseToken(_token).setInPrivateTransferMode(_inPrivateTransferMode);\\n    }\\n\\n    function batchSetBonusRewards(address _vester, address[] memory _accounts, uint256[] memory _amounts) external onlyKeeperAndAbove {\\n        require(_accounts.length == _amounts.length, \\\"Timelock: invalid lengths\\\");\\n\\n        if (!IHandlerTarget(_vester).isHandler(address(this))) {\\n            IHandlerTarget(_vester).setHandler(address(this), true);\\n        }\\n\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            address account = _accounts[i];\\n            uint256 amount = _amounts[i];\\n            IVester(_vester).setBonusRewards(account, amount);\\n        }\\n    }\\n\\n    function transferIn(address _sender, address _token, uint256 _amount) external onlyAdmin {\\n        IERC20(_token).transferFrom(_sender, address(this), _amount);\\n    }\\n\\n    function signalApprove(address _token, address _spender, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"approve\\\", _token, _spender, _amount));\\n        _setPendingAction(action);\\n        emit SignalApprove(_token, _spender, _amount, action);\\n    }\\n\\n    function approve(address _token, address _spender, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"approve\\\", _token, _spender, _amount));\\n        _validateAction(action);\\n        _clearAction(action);\\n        IERC20(_token).approve(_spender, _amount);\\n    }\\n\\n    function signalWithdrawToken(address _target, address _token, address _receiver, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"withdrawToken\\\", _target, _token, _receiver, _amount));\\n        _setPendingAction(action);\\n        emit SignalWithdrawToken(_target, _token, _receiver, _amount, action);\\n    }\\n\\n    function withdrawToken(address _target, address _token, address _receiver, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"withdrawToken\\\", _target, _token, _receiver, _amount));\\n        _validateAction(action);\\n        _clearAction(action);\\n        IBaseToken(_target).withdrawToken(_token, _receiver, _amount);\\n    }\\n\\n    function signalMint(address _token, address _receiver, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"mint\\\", _token, _receiver, _amount));\\n        _setPendingAction(action);\\n        emit SignalMint(_token, _receiver, _amount, action);\\n    }\\n\\n    function processMint(address _token, address _receiver, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"mint\\\", _token, _receiver, _amount));\\n        _validateAction(action);\\n        _clearAction(action);\\n\\n        _mint(_token, _receiver, _amount);\\n    }\\n\\n    function signalSetGov(address _target, address _gov) external override onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setGov\\\", _target, _gov));\\n        _setPendingAction(action);\\n        emit SignalSetGov(_target, _gov, action);\\n    }\\n\\n    function setGov(address _target, address _gov) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setGov\\\", _target, _gov));\\n        _validateAction(action);\\n        _clearAction(action);\\n        ITimelockTarget(_target).setGov(_gov);\\n    }\\n\\n    function signalSetHandler(address _target, address _handler, bool _isActive) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setHandler\\\", _target, _handler, _isActive));\\n        _setPendingAction(action);\\n        emit SignalSetHandler(_target, _handler, _isActive, action);\\n    }\\n\\n    function setHandler(address _target, address _handler, bool _isActive) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setHandler\\\", _target, _handler, _isActive));\\n        _validateAction(action);\\n        _clearAction(action);\\n        IHandlerTarget(_target).setHandler(_handler, _isActive);\\n    }\\n\\n    function signalSetPriceFeed(address _vault, address _priceFeed) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setPriceFeed\\\", _vault, _priceFeed));\\n        _setPendingAction(action);\\n        emit SignalSetPriceFeed(_vault, _priceFeed, action);\\n    }\\n\\n    function setPriceFeed(address _vault, address _priceFeed) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setPriceFeed\\\", _vault, _priceFeed));\\n        _validateAction(action);\\n        _clearAction(action);\\n        IVault(_vault).setPriceFeed(_priceFeed);\\n    }\\n\\n    function signalRedeemUsdg(address _vault, address _token, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"redeemUsdg\\\", _vault, _token, _amount));\\n        _setPendingAction(action);\\n        emit SignalRedeemUsdg(_vault, _token, _amount);\\n    }\\n\\n    function redeemUsdg(address _vault, address _token, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"redeemUsdg\\\", _vault, _token, _amount));\\n        _validateAction(action);\\n        _clearAction(action);\\n\\n        address usdg = IVault(_vault).usdg();\\n        IVault(_vault).setManager(address(this), true);\\n        IUSDG(usdg).addVault(address(this));\\n\\n        IUSDG(usdg).mint(address(this), _amount);\\n        IERC20(usdg).transfer(address(_vault), _amount);\\n\\n        IVault(_vault).sellUSDG(_token, mintReceiver);\\n\\n        IVault(_vault).setManager(address(this), false);\\n        IUSDG(usdg).removeVault(address(this));\\n    }\\n\\n    function signalVaultSetTokenConfig(\\n        address _vault,\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _tokenWeight,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\n            \\\"vaultSetTokenConfig\\\",\\n            _vault,\\n            _token,\\n            _tokenDecimals,\\n            _tokenWeight,\\n            _minProfitBps,\\n            _maxUsdgAmount,\\n            _isStable,\\n            _isShortable\\n        ));\\n\\n        _setPendingAction(action);\\n\\n        emit SignalVaultSetTokenConfig(\\n            _vault,\\n            _token,\\n            _tokenDecimals,\\n            _tokenWeight,\\n            _minProfitBps,\\n            _maxUsdgAmount,\\n            _isStable,\\n            _isShortable\\n        );\\n    }\\n\\n    function vaultSetTokenConfig(\\n        address _vault,\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _tokenWeight,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\n            \\\"vaultSetTokenConfig\\\",\\n            _vault,\\n            _token,\\n            _tokenDecimals,\\n            _tokenWeight,\\n            _minProfitBps,\\n            _maxUsdgAmount,\\n            _isStable,\\n            _isShortable\\n        ));\\n\\n        _validateAction(action);\\n        _clearAction(action);\\n\\n        IVault(_vault).setTokenConfig(\\n            _token,\\n            _tokenDecimals,\\n            _tokenWeight,\\n            _minProfitBps,\\n            _maxUsdgAmount,\\n            _isStable,\\n            _isShortable\\n        );\\n    }\\n\\n    function cancelAction(bytes32 _action) external onlyAdmin {\\n        _clearAction(_action);\\n    }\\n\\n    function _mint(address _token, address _receiver, uint256 _amount) private {\\n        IMintable mintable = IMintable(_token);\\n\\n        if (!mintable.isMinter(address(this))) {\\n            mintable.setMinter(address(this), true);\\n        }\\n\\n        mintable.mint(_receiver, _amount);\\n        require(IERC20(_token).totalSupply() <= maxTokenSupply, \\\"Timelock: maxTokenSupply exceeded\\\");\\n    }\\n\\n    function _setPendingAction(bytes32 _action) private {\\n        require(pendingActions[_action] == 0, \\\"Timelock: action already signalled\\\");\\n        pendingActions[_action] = block.timestamp.add(buffer);\\n        emit SignalPendingAction(_action);\\n    }\\n\\n    function _validateAction(bytes32 _action) private view {\\n        require(pendingActions[_action] != 0, \\\"Timelock: action not signalled\\\");\\n        require(pendingActions[_action] < block.timestamp, \\\"Timelock: action time not yet passed\\\");\\n    }\\n\\n    function _clearAction(bytes32 _action) private {\\n        require(pendingActions[_action] != 0, \\\"Timelock: invalid _action\\\");\\n        delete pendingActions[_action];\\n        emit ClearAction(_action);\\n    }\\n}\\n\"\n    },\n    \"contracts/core/interfaces/IXlxManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IXlxManager {\\n    function usdg() external view returns (address);\\n    function cooldownDuration() external returns (uint256);\\n    function getAumInUsdg(bool maximise) external view returns (uint256);\\n    function lastAddedAt(address _account) external returns (uint256);\\n    function addLiquidity(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minXlx) external returns (uint256);\\n    function addLiquidityForAccount(address _fundingAccount, address _account, address _token, uint256 _amount, uint256 _minUsdg, uint256 _minXlx) external returns (uint256);\\n    function removeLiquidity(address _tokenOut, uint256 _xlxAmount, uint256 _minOut, address _receiver) external returns (uint256);\\n    function removeLiquidityForAccount(address _account, address _tokenOut, uint256 _xlxAmount, uint256 _minOut, address _receiver) external returns (uint256);\\n}\\n\"\n    },\n    \"contracts/staking/Vester.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IRewardTracker.sol\\\";\\nimport \\\"./interfaces/IVester.sol\\\";\\nimport \\\"../tokens/interfaces/IMintable.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\ncontract Vester is IVester, IERC20, ReentrancyGuard, Governable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals = 18;\\n\\n    uint256 public vestingDuration;\\n\\n    address public esToken;\\n    address public pairToken;\\n    address public claimableToken;\\n\\n    address public override rewardTracker;\\n\\n    uint256 public override totalSupply;\\n    uint256 public pairSupply;\\n\\n    bool public hasMaxVestableAmount;\\n\\n    mapping (address => uint256) public balances;\\n    mapping (address => uint256) public override pairAmounts;\\n    mapping (address => uint256) public override cumulativeClaimAmounts;\\n    mapping (address => uint256) public override claimedAmounts;\\n    mapping (address => uint256) public lastVestingTimes;\\n\\n    mapping (address => uint256) public override transferredAverageStakedAmounts;\\n    mapping (address => uint256) public override transferredCumulativeRewards;\\n    mapping (address => uint256) public override cumulativeRewardDeductions;\\n    mapping (address => uint256) public override bonusRewards;\\n\\n    mapping (address => bool) public isHandler;\\n\\n    event Claim(address receiver, uint256 amount);\\n    event Deposit(address account, uint256 amount);\\n    event Withdraw(address account, uint256 claimedAmount, uint256 balance);\\n    event PairTransfer(address indexed from, address indexed to, uint256 value);\\n\\n    constructor (\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _vestingDuration,\\n        address _esToken,\\n        address _pairToken,\\n        address _claimableToken,\\n        address _rewardTracker\\n    ) public {\\n        name = _name;\\n        symbol = _symbol;\\n\\n        vestingDuration = _vestingDuration;\\n\\n        esToken = _esToken;\\n        pairToken = _pairToken;\\n        claimableToken = _claimableToken;\\n\\n        rewardTracker = _rewardTracker;\\n\\n        if (rewardTracker != address(0)) {\\n            hasMaxVestableAmount = true;\\n        }\\n    }\\n\\n    function setHandler(address _handler, bool _isActive) external onlyGov {\\n        isHandler[_handler] = _isActive;\\n    }\\n\\n    function setHasMaxVestableAmount(bool _hasMaxVestableAmount) external onlyGov {\\n        hasMaxVestableAmount = _hasMaxVestableAmount;\\n    }\\n\\n    function deposit(uint256 _amount) external nonReentrant {\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    function depositForAccount(address _account, uint256 _amount) external nonReentrant {\\n        _validateHandler();\\n        _deposit(_account, _amount);\\n    }\\n\\n    function claim() external nonReentrant returns (uint256) {\\n        return _claim(msg.sender, msg.sender);\\n    }\\n\\n    function claimForAccount(address _account, address _receiver) external override nonReentrant returns (uint256) {\\n        _validateHandler();\\n        return _claim(_account, _receiver);\\n    }\\n\\n    // to help users who accidentally send their tokens to this contract\\n    function withdrawToken(address _token, address _account, uint256 _amount) external onlyGov {\\n        IERC20(_token).safeTransfer(_account, _amount);\\n    }\\n\\n    function withdraw() external nonReentrant {\\n        address account = msg.sender;\\n        address _receiver = account;\\n        _claim(account, _receiver);\\n\\n        uint256 claimedAmount = cumulativeClaimAmounts[account];\\n        uint256 balance = balances[account];\\n        uint256 totalVested = balance.add(claimedAmount);\\n        require(totalVested > 0, \\\"Vester: vested amount is zero\\\");\\n\\n        if (hasPairToken()) {\\n            uint256 pairAmount = pairAmounts[account];\\n            _burnPair(account, pairAmount);\\n            IERC20(pairToken).safeTransfer(_receiver, pairAmount);\\n        }\\n\\n        IERC20(esToken).safeTransfer(_receiver, balance);\\n        _burn(account, balance);\\n\\n        delete cumulativeClaimAmounts[account];\\n        delete claimedAmounts[account];\\n        delete lastVestingTimes[account];\\n\\n        emit Withdraw(account, claimedAmount, balance);\\n    }\\n\\n    function transferStakeValues(address _sender, address _receiver) external override nonReentrant {\\n        _validateHandler();\\n\\n        transferredAverageStakedAmounts[_receiver] = getCombinedAverageStakedAmount(_sender);\\n        transferredAverageStakedAmounts[_sender] = 0;\\n\\n        uint256 transferredCumulativeReward = transferredCumulativeRewards[_sender];\\n        uint256 cumulativeReward = IRewardTracker(rewardTracker).cumulativeRewards(_sender);\\n\\n        transferredCumulativeRewards[_receiver] = transferredCumulativeReward.add(cumulativeReward);\\n        cumulativeRewardDeductions[_sender] = cumulativeReward;\\n        transferredCumulativeRewards[_sender] = 0;\\n\\n        bonusRewards[_receiver] = bonusRewards[_sender];\\n        bonusRewards[_sender] = 0;\\n    }\\n\\n    function setTransferredAverageStakedAmounts(address _account, uint256 _amount) external override nonReentrant {\\n        _validateHandler();\\n        transferredAverageStakedAmounts[_account] = _amount;\\n    }\\n\\n    function setTransferredCumulativeRewards(address _account, uint256 _amount) external override nonReentrant {\\n        _validateHandler();\\n        transferredCumulativeRewards[_account] = _amount;\\n    }\\n\\n    function setCumulativeRewardDeductions(address _account, uint256 _amount) external override nonReentrant {\\n        _validateHandler();\\n        cumulativeRewardDeductions[_account] = _amount;\\n    }\\n\\n    function setBonusRewards(address _account, uint256 _amount) external override nonReentrant {\\n        _validateHandler();\\n        bonusRewards[_account] = _amount;\\n    }\\n\\n    function claimable(address _account) public override view returns (uint256) {\\n        uint256 amount = cumulativeClaimAmounts[_account].sub(claimedAmounts[_account]);\\n        uint256 nextClaimable = _getNextClaimableAmount(_account);\\n        return amount.add(nextClaimable);\\n    }\\n\\n    function getMaxVestableAmount(address _account) public override view returns (uint256) {\\n        if (!hasRewardTracker()) { return 0; }\\n\\n        uint256 transferredCumulativeReward = transferredCumulativeRewards[_account];\\n        uint256 bonusReward = bonusRewards[_account];\\n        uint256 cumulativeReward = IRewardTracker(rewardTracker).cumulativeRewards(_account);\\n        uint256 maxVestableAmount = cumulativeReward.add(transferredCumulativeReward).add(bonusReward);\\n\\n        uint256 cumulativeRewardDeduction = cumulativeRewardDeductions[_account];\\n\\n        if (maxVestableAmount < cumulativeRewardDeduction) {\\n            return 0;\\n        }\\n\\n        return maxVestableAmount.sub(cumulativeRewardDeduction);\\n    }\\n\\n    function getCombinedAverageStakedAmount(address _account) public override view returns (uint256) {\\n        uint256 cumulativeReward = IRewardTracker(rewardTracker).cumulativeRewards(_account);\\n        uint256 transferredCumulativeReward = transferredCumulativeRewards[_account];\\n        uint256 totalCumulativeReward = cumulativeReward.add(transferredCumulativeReward);\\n        if (totalCumulativeReward == 0) { return 0; }\\n\\n        uint256 averageStakedAmount = IRewardTracker(rewardTracker).averageStakedAmounts(_account);\\n        uint256 transferredAverageStakedAmount = transferredAverageStakedAmounts[_account];\\n\\n        return averageStakedAmount\\n            .mul(cumulativeReward)\\n            .div(totalCumulativeReward)\\n            .add(\\n                transferredAverageStakedAmount.mul(transferredCumulativeReward).div(totalCumulativeReward)\\n            );\\n    }\\n\\n    function getPairAmount(address _account, uint256 _esAmount) public view returns (uint256) {\\n        if (!hasRewardTracker()) { return 0; }\\n\\n        uint256 combinedAverageStakedAmount = getCombinedAverageStakedAmount(_account);\\n        if (combinedAverageStakedAmount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 maxVestableAmount = getMaxVestableAmount(_account);\\n        if (maxVestableAmount == 0) {\\n            return 0;\\n        }\\n\\n        return _esAmount.mul(combinedAverageStakedAmount).div(maxVestableAmount);\\n    }\\n\\n    function hasRewardTracker() public view returns (bool) {\\n        return rewardTracker != address(0);\\n    }\\n\\n    function hasPairToken() public view returns (bool) {\\n        return pairToken != address(0);\\n    }\\n\\n    function getTotalVested(address _account) public view returns (uint256) {\\n        return balances[_account].add(cumulativeClaimAmounts[_account]);\\n    }\\n\\n    function balanceOf(address _account) public view override returns (uint256) {\\n        return balances[_account];\\n    }\\n\\n    // empty implementation, tokens are non-transferrable\\n    function transfer(address /* recipient */, uint256 /* amount */) public override returns (bool) {\\n        revert(\\\"Vester: non-transferrable\\\");\\n    }\\n\\n    // empty implementation, tokens are non-transferrable\\n    function allowance(address /* owner */, address /* spender */) public view virtual override returns (uint256) {\\n        return 0;\\n    }\\n\\n    // empty implementation, tokens are non-transferrable\\n    function approve(address /* spender */, uint256 /* amount */) public virtual override returns (bool) {\\n        revert(\\\"Vester: non-transferrable\\\");\\n    }\\n\\n    // empty implementation, tokens are non-transferrable\\n    function transferFrom(address /* sender */, address /* recipient */, uint256 /* amount */) public virtual override returns (bool) {\\n        revert(\\\"Vester: non-transferrable\\\");\\n    }\\n\\n    function getVestedAmount(address _account) public override view returns (uint256) {\\n        uint256 balance = balances[_account];\\n        uint256 cumulativeClaimAmount = cumulativeClaimAmounts[_account];\\n        return balance.add(cumulativeClaimAmount);\\n    }\\n\\n    function _mint(address _account, uint256 _amount) private {\\n        require(_account != address(0), \\\"Vester: mint to the zero address\\\");\\n\\n        totalSupply = totalSupply.add(_amount);\\n        balances[_account] = balances[_account].add(_amount);\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    function _mintPair(address _account, uint256 _amount) private {\\n        require(_account != address(0), \\\"Vester: mint to the zero address\\\");\\n\\n        pairSupply = pairSupply.add(_amount);\\n        pairAmounts[_account] = pairAmounts[_account].add(_amount);\\n\\n        emit PairTransfer(address(0), _account, _amount);\\n    }\\n\\n    function _burn(address _account, uint256 _amount) private {\\n        require(_account != address(0), \\\"Vester: burn from the zero address\\\");\\n\\n        balances[_account] = balances[_account].sub(_amount, \\\"Vester: burn amount exceeds balance\\\");\\n        totalSupply = totalSupply.sub(_amount);\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    function _burnPair(address _account, uint256 _amount) private {\\n        require(_account != address(0), \\\"Vester: burn from the zero address\\\");\\n\\n        pairAmounts[_account] = pairAmounts[_account].sub(_amount, \\\"Vester: burn amount exceeds balance\\\");\\n        pairSupply = pairSupply.sub(_amount);\\n\\n        emit PairTransfer(_account, address(0), _amount);\\n    }\\n\\n    function _deposit(address _account, uint256 _amount) private {\\n        require(_amount > 0, \\\"Vester: invalid _amount\\\");\\n\\n        _updateVesting(_account);\\n\\n        IERC20(esToken).safeTransferFrom(_account, address(this), _amount);\\n\\n        _mint(_account, _amount);\\n\\n        if (hasPairToken()) {\\n            uint256 pairAmount = pairAmounts[_account];\\n            uint256 nextPairAmount = getPairAmount(_account, balances[_account]);\\n            if (nextPairAmount > pairAmount) {\\n                uint256 pairAmountDiff = nextPairAmount.sub(pairAmount);\\n                IERC20(pairToken).safeTransferFrom(_account, address(this), pairAmountDiff);\\n                _mintPair(_account, pairAmountDiff);\\n            }\\n        }\\n\\n        if (hasMaxVestableAmount) {\\n            uint256 maxAmount = getMaxVestableAmount(_account);\\n            require(getTotalVested(_account) <= maxAmount, \\\"Vester: max vestable amount exceeded\\\");\\n        }\\n\\n        emit Deposit(_account, _amount);\\n    }\\n\\n    function _updateVesting(address _account) private {\\n        uint256 amount = _getNextClaimableAmount(_account);\\n        lastVestingTimes[_account] = block.timestamp;\\n\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        // transfer claimableAmount from balances to cumulativeClaimAmounts\\n        _burn(_account, amount);\\n        cumulativeClaimAmounts[_account] = cumulativeClaimAmounts[_account].add(amount);\\n\\n        IMintable(esToken).burn(address(this), amount);\\n    }\\n\\n    function _getNextClaimableAmount(address _account) private view returns (uint256) {\\n        uint256 timeDiff = block.timestamp.sub(lastVestingTimes[_account]);\\n\\n        uint256 balance = balances[_account];\\n        if (balance == 0) { return 0; }\\n\\n        uint256 vestedAmount = getVestedAmount(_account);\\n        uint256 claimableAmount = vestedAmount.mul(timeDiff).div(vestingDuration);\\n\\n        if (claimableAmount < balance) {\\n            return claimableAmount;\\n        }\\n\\n        return balance;\\n    }\\n\\n    function _claim(address _account, address _receiver) private returns (uint256) {\\n        _updateVesting(_account);\\n        uint256 amount = claimable(_account);\\n        claimedAmounts[_account] = claimedAmounts[_account].add(amount);\\n        IERC20(claimableToken).safeTransfer(_receiver, amount);\\n        emit Claim(_account, amount);\\n        return amount;\\n    }\\n\\n    function _validateHandler() private view {\\n        require(isHandler[msg.sender], \\\"Vester: forbidden\\\");\\n    }\\n}\\n\"\n    },\n    \"contracts/staking/interfaces/IRewardTracker.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardTracker {\\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n    function stakedAmounts(address _account) external view returns (uint256);\\n    function updateRewards() external;\\n    function stake(address _depositToken, uint256 _amount) external;\\n    function stakeForAccount(address _fundingAccount, address _account, address _depositToken, uint256 _amount) external;\\n    function unstake(address _depositToken, uint256 _amount) external;\\n    function unstakeForAccount(address _account, address _depositToken, uint256 _amount, address _receiver) external;\\n    function tokensPerInterval() external view returns (uint256);\\n    function claim(address _receiver) external returns (uint256);\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n    function claimable(address _account) external view returns (uint256);\\n    function averageStakedAmounts(address _account) external view returns (uint256);\\n    function cumulativeRewards(address _account) external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/tokens/MintableBaseToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./BaseToken.sol\\\";\\nimport \\\"./interfaces/IMintable.sol\\\";\\n\\ncontract MintableBaseToken is BaseToken, IMintable {\\n\\n    mapping (address => bool) public override isMinter;\\n\\n    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) public BaseToken(_name, _symbol, _initialSupply) {\\n    }\\n\\n    modifier onlyMinter() {\\n        require(isMinter[msg.sender], \\\"MintableBaseToken: forbidden\\\");\\n        _;\\n    }\\n\\n    function setMinter(address _minter, bool _isActive) external override onlyGov {\\n        isMinter[_minter] = _isActive;\\n    }\\n\\n    function mint(address _account, uint256 _amount) external override onlyMinter {\\n        _mint(_account, _amount);\\n    }\\n\\n    function burn(address _account, uint256 _amount) external override onlyMinter {\\n        _burn(_account, _amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/tokens/BaseToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IYieldTracker.sol\\\";\\nimport \\\"./interfaces/IBaseToken.sol\\\";\\n\\ncontract BaseToken is IERC20, IBaseToken {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public constant decimals = 18;\\n\\n    uint256 public override totalSupply;\\n    uint256 public nonStakingSupply;\\n\\n    address public gov;\\n\\n    mapping (address => uint256) public balances;\\n    mapping (address => mapping (address => uint256)) public allowances;\\n\\n    address[] public yieldTrackers;\\n    mapping (address => bool) public nonStakingAccounts;\\n    mapping (address => bool) public admins;\\n\\n    bool public inPrivateTransferMode;\\n    mapping (address => bool) public isHandler;\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"BaseToken: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(admins[msg.sender], \\\"BaseToken: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) public {\\n        name = _name;\\n        symbol = _symbol;\\n        gov = msg.sender;\\n        _mint(msg.sender, _initialSupply);\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n\\n    function setInfo(string memory _name, string memory _symbol) external onlyGov {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    function setYieldTrackers(address[] memory _yieldTrackers) external onlyGov {\\n        yieldTrackers = _yieldTrackers;\\n    }\\n\\n    function addAdmin(address _account) external onlyGov {\\n        admins[_account] = true;\\n    }\\n\\n    function removeAdmin(address _account) external override onlyGov {\\n        admins[_account] = false;\\n    }\\n\\n    // to help users who accidentally send their tokens to this contract\\n    function withdrawToken(address _token, address _account, uint256 _amount) external override onlyGov {\\n        IERC20(_token).safeTransfer(_account, _amount);\\n    }\\n\\n    function setInPrivateTransferMode(bool _inPrivateTransferMode) external override onlyGov {\\n        inPrivateTransferMode = _inPrivateTransferMode;\\n    }\\n\\n    function setHandler(address _handler, bool _isActive) external onlyGov {\\n        isHandler[_handler] = _isActive;\\n    }\\n\\n    function addNonStakingAccount(address _account) external onlyAdmin {\\n        require(!nonStakingAccounts[_account], \\\"BaseToken: _account already marked\\\");\\n        _updateRewards(_account);\\n        nonStakingAccounts[_account] = true;\\n        nonStakingSupply = nonStakingSupply.add(balances[_account]);\\n    }\\n\\n    function removeNonStakingAccount(address _account) external onlyAdmin {\\n        require(nonStakingAccounts[_account], \\\"BaseToken: _account not marked\\\");\\n        _updateRewards(_account);\\n        nonStakingAccounts[_account] = false;\\n        nonStakingSupply = nonStakingSupply.sub(balances[_account]);\\n    }\\n\\n    function recoverClaim(address _account, address _receiver) external onlyAdmin {\\n        for (uint256 i = 0; i < yieldTrackers.length; i++) {\\n            address yieldTracker = yieldTrackers[i];\\n            IYieldTracker(yieldTracker).claim(_account, _receiver);\\n        }\\n    }\\n\\n    function claim(address _receiver) external {\\n        for (uint256 i = 0; i < yieldTrackers.length; i++) {\\n            address yieldTracker = yieldTrackers[i];\\n            IYieldTracker(yieldTracker).claim(msg.sender, _receiver);\\n        }\\n    }\\n\\n    function totalStaked() external view override returns (uint256) {\\n        return totalSupply.sub(nonStakingSupply);\\n    }\\n\\n    function balanceOf(address _account) external view override returns (uint256) {\\n        return balances[_account];\\n    }\\n\\n    function stakedBalance(address _account) external view override returns (uint256) {\\n        if (nonStakingAccounts[_account]) {\\n            return 0;\\n        }\\n        return balances[_account];\\n    }\\n\\n    function transfer(address _recipient, uint256 _amount) external override returns (bool) {\\n        _transfer(msg.sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address _spender) external view override returns (uint256) {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    function approve(address _spender, uint256 _amount) external override returns (bool) {\\n        _approve(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external override returns (bool) {\\n        if (isHandler[msg.sender]) {\\n            _transfer(_sender, _recipient, _amount);\\n            return true;\\n        }\\n        uint256 nextAllowance = allowances[_sender][msg.sender].sub(_amount, \\\"BaseToken: transfer amount exceeds allowance\\\");\\n        _approve(_sender, msg.sender, nextAllowance);\\n        _transfer(_sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function _mint(address _account, uint256 _amount) internal {\\n        require(_account != address(0), \\\"BaseToken: mint to the zero address\\\");\\n\\n        _updateRewards(_account);\\n\\n        totalSupply = totalSupply.add(_amount);\\n        balances[_account] = balances[_account].add(_amount);\\n\\n        if (nonStakingAccounts[_account]) {\\n            nonStakingSupply = nonStakingSupply.add(_amount);\\n        }\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    function _burn(address _account, uint256 _amount) internal {\\n        require(_account != address(0), \\\"BaseToken: burn from the zero address\\\");\\n\\n        _updateRewards(_account);\\n\\n        balances[_account] = balances[_account].sub(_amount, \\\"BaseToken: burn amount exceeds balance\\\");\\n        totalSupply = totalSupply.sub(_amount);\\n\\n        if (nonStakingAccounts[_account]) {\\n            nonStakingSupply = nonStakingSupply.sub(_amount);\\n        }\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\\n        require(_sender != address(0), \\\"BaseToken: transfer from the zero address\\\");\\n        require(_recipient != address(0), \\\"BaseToken: transfer to the zero address\\\");\\n\\n        if (inPrivateTransferMode) {\\n            require(isHandler[msg.sender], \\\"BaseToken: msg.sender not whitelisted\\\");\\n        }\\n\\n        _updateRewards(_sender);\\n        _updateRewards(_recipient);\\n\\n        balances[_sender] = balances[_sender].sub(_amount, \\\"BaseToken: transfer amount exceeds balance\\\");\\n        balances[_recipient] = balances[_recipient].add(_amount);\\n\\n        if (nonStakingAccounts[_sender]) {\\n            nonStakingSupply = nonStakingSupply.sub(_amount);\\n        }\\n        if (nonStakingAccounts[_recipient]) {\\n            nonStakingSupply = nonStakingSupply.add(_amount);\\n        }\\n\\n        emit Transfer(_sender, _recipient,_amount);\\n    }\\n\\n    function _approve(address _owner, address _spender, uint256 _amount) private {\\n        require(_owner != address(0), \\\"BaseToken: approve from the zero address\\\");\\n        require(_spender != address(0), \\\"BaseToken: approve to the zero address\\\");\\n\\n        allowances[_owner][_spender] = _amount;\\n\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    function _updateRewards(address _account) private {\\n        for (uint256 i = 0; i < yieldTrackers.length; i++) {\\n            address yieldTracker = yieldTrackers[i];\\n            IYieldTracker(yieldTracker).updateRewards(_account);\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/tokens/interfaces/IYieldTracker.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IYieldTracker {\\n    function claim(address _account, address _receiver) external returns (uint256);\\n    function updateRewards(address _account) external;\\n    function getTokensPerInterval() external view returns (uint256);\\n    function claimable(address _account) external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/xdx/XLX.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../tokens/MintableBaseToken.sol\\\";\\n\\ncontract XLX is MintableBaseToken {\\n    constructor() public MintableBaseToken(\\\"XDX LP\\\", \\\"XLX\\\", 0) {\\n    }\\n\\n    function id() external pure returns (string memory _name) {\\n        return \\\"XLX\\\";\\n    }\\n}\\n\"\n    },\n    \"contracts/xdx/XDX.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../tokens/MintableBaseToken.sol\\\";\\n\\ncontract XDX is MintableBaseToken {\\n    constructor() public MintableBaseToken(\\\"XDX\\\", \\\"XDX\\\", 10000000000000000000000000) {\\n    }\\n\\n    function id() external pure returns (string memory _name) {\\n        return \\\"XDX\\\";\\n    }\\n}\\n\"\n    },\n    \"contracts/xdx/EsXDX.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../tokens/MintableBaseToken.sol\\\";\\n\\ncontract EsXDX is MintableBaseToken {\\n    constructor() public MintableBaseToken(\\\"Escrowed XDX\\\", \\\"esXDX\\\", 0) {\\n    }\\n\\n    function id() external pure returns (string memory _name) {\\n        return \\\"esXDX\\\";\\n    }\\n}\\n\"\n    },\n    \"contracts/tokens/SnapshotToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./MintableBaseToken.sol\\\";\\n\\ncontract SnapshotToken is MintableBaseToken {\\n    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) public MintableBaseToken(_name, _symbol, _initialSupply) {\\n    }\\n\\n    function batchMint(address[] memory _accounts, uint256[] memory _amounts) external onlyMinter {\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            address account = _accounts[i];\\n            uint256 amount = _amounts[i];\\n            _mint(account, amount);\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/peripherals/PriceFeedTimelock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./interfaces/ITimelockTarget.sol\\\";\\nimport \\\"./interfaces/IHandlerTarget.sol\\\";\\nimport \\\"../access/interfaces/IAdmin.sol\\\";\\nimport \\\"../core/interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../oracle/interfaces/IFastPriceFeed.sol\\\";\\nimport \\\"../referrals/interfaces/IReferralStorage.sol\\\";\\nimport \\\"../tokens/interfaces/IYieldToken.sol\\\";\\nimport \\\"../tokens/interfaces/IBaseToken.sol\\\";\\nimport \\\"../tokens/interfaces/IMintable.sol\\\";\\nimport \\\"../tokens/interfaces/IUSDG.sol\\\";\\nimport \\\"../staking/interfaces/IVester.sol\\\";\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\n\\ncontract PriceFeedTimelock {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant MAX_BUFFER = 5 days;\\n\\n    uint256 public buffer;\\n    address public admin;\\n\\n    address public tokenManager;\\n\\n    mapping (bytes32 => uint256) public pendingActions;\\n\\n    mapping (address => bool) public isHandler;\\n    mapping (address => bool) public isKeeper;\\n\\n    event SignalPendingAction(bytes32 action);\\n    event SignalApprove(address token, address spender, uint256 amount, bytes32 action);\\n    event SignalWithdrawToken(address target, address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalSetGov(address target, address gov, bytes32 action);\\n    event SignalSetPriceFeedWatcher(address fastPriceFeed, address account, bool isActive);\\n    event SignalPriceFeedSetTokenConfig(\\n        address vaultPriceFeed,\\n        address token,\\n        address priceFeed,\\n        uint256 priceDecimals,\\n        bool isStrictStable\\n    );\\n    event ClearAction(bytes32 action);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Timelock: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyHandlerAndAbove() {\\n        require(msg.sender == admin || isHandler[msg.sender], \\\"Timelock: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeperAndAbove() {\\n        require(msg.sender == admin || isHandler[msg.sender] || isKeeper[msg.sender], \\\"Timelock: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyTokenManager() {\\n        require(msg.sender == tokenManager, \\\"Timelock: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _admin,\\n        uint256 _buffer,\\n        address _tokenManager\\n    ) public {\\n        require(_buffer <= MAX_BUFFER, \\\"Timelock: invalid _buffer\\\");\\n        admin = _admin;\\n        buffer = _buffer;\\n        tokenManager = _tokenManager;\\n    }\\n\\n    function setAdmin(address _admin) external onlyTokenManager {\\n        admin = _admin;\\n    }\\n\\n    function setExternalAdmin(address _target, address _admin) external onlyAdmin {\\n        require(_target != address(this), \\\"Timelock: invalid _target\\\");\\n        IAdmin(_target).setAdmin(_admin);\\n    }\\n\\n    function setContractHandler(address _handler, bool _isActive) external onlyAdmin {\\n        isHandler[_handler] = _isActive;\\n    }\\n\\n    function setKeeper(address _keeper, bool _isActive) external onlyAdmin {\\n        isKeeper[_keeper] = _isActive;\\n    }\\n\\n    function setBuffer(uint256 _buffer) external onlyAdmin {\\n        require(_buffer <= MAX_BUFFER, \\\"Timelock: invalid _buffer\\\");\\n        require(_buffer > buffer, \\\"Timelock: buffer cannot be decreased\\\");\\n        buffer = _buffer;\\n    }\\n\\n    function setIsAmmEnabled(address _priceFeed, bool _isEnabled) external onlyAdmin {\\n        IVaultPriceFeed(_priceFeed).setIsAmmEnabled(_isEnabled);\\n    }\\n\\n    function setIsSecondaryPriceEnabled(address _priceFeed, bool _isEnabled) external onlyAdmin {\\n        IVaultPriceFeed(_priceFeed).setIsSecondaryPriceEnabled(_isEnabled);\\n    }\\n\\n    function setMaxStrictPriceDeviation(address _priceFeed, uint256 _maxStrictPriceDeviation) external onlyAdmin {\\n        IVaultPriceFeed(_priceFeed).setMaxStrictPriceDeviation(_maxStrictPriceDeviation);\\n    }\\n\\n    function setUseV2Pricing(address _priceFeed, bool _useV2Pricing) external onlyAdmin {\\n        IVaultPriceFeed(_priceFeed).setUseV2Pricing(_useV2Pricing);\\n    }\\n\\n    function setAdjustment(address _priceFeed, address _token, bool _isAdditive, uint256 _adjustmentBps) external onlyKeeperAndAbove {\\n        IVaultPriceFeed(_priceFeed).setAdjustment(_token, _isAdditive, _adjustmentBps);\\n    }\\n\\n    function setSpreadBasisPoints(address _priceFeed, address _token, uint256 _spreadBasisPoints) external onlyKeeperAndAbove {\\n        IVaultPriceFeed(_priceFeed).setSpreadBasisPoints(_token, _spreadBasisPoints);\\n    }\\n\\n    function setPriceSampleSpace(address _priceFeed,uint256 _priceSampleSpace) external onlyHandlerAndAbove {\\n        require(_priceSampleSpace <= 5, \\\"Invalid _priceSampleSpace\\\");\\n        IVaultPriceFeed(_priceFeed).setPriceSampleSpace(_priceSampleSpace);\\n    }\\n\\n    function setVaultPriceFeed(address _fastPriceFeed, address _vaultPriceFeed) external onlyAdmin {\\n        IFastPriceFeed(_fastPriceFeed).setVaultPriceFeed(_vaultPriceFeed);\\n    }\\n\\n    function setPriceDuration(address _fastPriceFeed, uint256 _priceDuration) external onlyHandlerAndAbove {\\n        IFastPriceFeed(_fastPriceFeed).setPriceDuration(_priceDuration);\\n    }\\n\\n    function setMaxPriceUpdateDelay(address _fastPriceFeed, uint256 _maxPriceUpdateDelay) external onlyHandlerAndAbove {\\n        IFastPriceFeed(_fastPriceFeed).setMaxPriceUpdateDelay(_maxPriceUpdateDelay);\\n    }\\n\\n    function setSpreadBasisPointsIfInactive(address _fastPriceFeed, uint256 _spreadBasisPointsIfInactive) external onlyAdmin {\\n        IFastPriceFeed(_fastPriceFeed).setSpreadBasisPointsIfInactive(_spreadBasisPointsIfInactive);\\n    }\\n\\n    function setSpreadBasisPointsIfChainError(address _fastPriceFeed, uint256 _spreadBasisPointsIfChainError) external onlyAdmin {\\n        IFastPriceFeed(_fastPriceFeed).setSpreadBasisPointsIfChainError(_spreadBasisPointsIfChainError);\\n    }\\n\\n    function setMinBlockInterval(address _fastPriceFeed, uint256 _minBlockInterval) external onlyAdmin {\\n        IFastPriceFeed(_fastPriceFeed).setMinBlockInterval(_minBlockInterval);\\n    }\\n\\n    function setIsSpreadEnabled(address _fastPriceFeed, bool _isSpreadEnabled) external onlyAdmin {\\n        IFastPriceFeed(_fastPriceFeed).setIsSpreadEnabled(_isSpreadEnabled);\\n    }\\n\\n    function setMaxDeviationBasisPoints(address _fastPriceFeed, uint256 _maxDeviationBasisPoints) external onlyAdmin {\\n        IFastPriceFeed(_fastPriceFeed).setMaxDeviationBasisPoints(_maxDeviationBasisPoints);\\n    }\\n\\n    function setMaxCumulativeDeltaDiffs(address _fastPriceFeed, address[] memory _tokens,  uint256[] memory _maxCumulativeDeltaDiffs) external onlyAdmin {\\n        IFastPriceFeed(_fastPriceFeed).setMaxCumulativeDeltaDiffs(_tokens, _maxCumulativeDeltaDiffs);\\n    }\\n\\n    function setPriceDataInterval(address _fastPriceFeed, uint256 _priceDataInterval) external onlyAdmin {\\n        IFastPriceFeed(_fastPriceFeed).setPriceDataInterval(_priceDataInterval);\\n    }\\n\\n    function transferIn(address _sender, address _token, uint256 _amount) external onlyAdmin {\\n        IERC20(_token).transferFrom(_sender, address(this), _amount);\\n    }\\n\\n    function signalApprove(address _token, address _spender, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"approve\\\", _token, _spender, _amount));\\n        _setPendingAction(action);\\n        emit SignalApprove(_token, _spender, _amount, action);\\n    }\\n\\n    function approve(address _token, address _spender, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"approve\\\", _token, _spender, _amount));\\n        _validateAction(action);\\n        _clearAction(action);\\n        IERC20(_token).approve(_spender, _amount);\\n    }\\n\\n    function signalWithdrawToken(address _target, address _token, address _receiver, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"withdrawToken\\\", _target, _token, _receiver, _amount));\\n        _setPendingAction(action);\\n        emit SignalWithdrawToken(_target, _token, _receiver, _amount, action);\\n    }\\n\\n    function withdrawToken(address _target, address _token, address _receiver, uint256 _amount) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"withdrawToken\\\", _target, _token, _receiver, _amount));\\n        _validateAction(action);\\n        _clearAction(action);\\n        IBaseToken(_target).withdrawToken(_token, _receiver, _amount);\\n    }\\n\\n    function signalSetGov(address _target, address _gov) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setGov\\\", _target, _gov));\\n        _setPendingAction(action);\\n        emit SignalSetGov(_target, _gov, action);\\n    }\\n\\n    function setGov(address _target, address _gov) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setGov\\\", _target, _gov));\\n        _validateAction(action);\\n        _clearAction(action);\\n        ITimelockTarget(_target).setGov(_gov);\\n    }\\n\\n    function signalSetPriceFeedWatcher(address _fastPriceFeed, address _account, bool _isActive) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setPriceFeedWatcher\\\", _fastPriceFeed, _account, _isActive));\\n        _setPendingAction(action);\\n        emit SignalSetPriceFeedWatcher(_fastPriceFeed, _account, _isActive);\\n    }\\n\\n    function setPriceFeedWatcher(address _fastPriceFeed, address _account, bool _isActive) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setPriceFeedWatcher\\\", _fastPriceFeed, _account, _isActive));\\n        _validateAction(action);\\n        _clearAction(action);\\n        IFastPriceFeed(_fastPriceFeed).setSigner(_account, _isActive);\\n    }\\n\\n    function signalSetPriceFeedUpdater(address _fastPriceFeed, address _account, bool _isActive) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setPriceFeedUpdater\\\", _fastPriceFeed, _account, _isActive));\\n        _setPendingAction(action);\\n        emit SignalSetPriceFeedWatcher(_fastPriceFeed, _account, _isActive);\\n    }\\n\\n    function setPriceFeedUpdater(address _fastPriceFeed, address _account, bool _isActive) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\\"setPriceFeedUpdater\\\", _fastPriceFeed, _account, _isActive));\\n        _validateAction(action);\\n        _clearAction(action);\\n        IFastPriceFeed(_fastPriceFeed).setUpdater(_account, _isActive);\\n    }\\n\\n    function signalPriceFeedSetTokenConfig(\\n        address _vaultPriceFeed,\\n        address _token,\\n        address _priceFeed,\\n        uint256 _priceDecimals,\\n        bool _isStrictStable\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\n            \\\"priceFeedSetTokenConfig\\\",\\n            _vaultPriceFeed,\\n            _token,\\n            _priceFeed,\\n            _priceDecimals,\\n            _isStrictStable\\n        ));\\n\\n        _setPendingAction(action);\\n\\n        emit SignalPriceFeedSetTokenConfig(\\n            _vaultPriceFeed,\\n            _token,\\n            _priceFeed,\\n            _priceDecimals,\\n            _isStrictStable\\n        );\\n    }\\n\\n    function priceFeedSetTokenConfig(\\n        address _vaultPriceFeed,\\n        address _token,\\n        address _priceFeed,\\n        uint256 _priceDecimals,\\n        bool _isStrictStable\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(abi.encodePacked(\\n            \\\"priceFeedSetTokenConfig\\\",\\n            _vaultPriceFeed,\\n            _token,\\n            _priceFeed,\\n            _priceDecimals,\\n            _isStrictStable\\n        ));\\n\\n        _validateAction(action);\\n        _clearAction(action);\\n\\n        IVaultPriceFeed(_vaultPriceFeed).setTokenConfig(\\n            _token,\\n            _priceFeed,\\n            _priceDecimals,\\n            _isStrictStable\\n        );\\n    }\\n\\n    function cancelAction(bytes32 _action) external onlyAdmin {\\n        _clearAction(_action);\\n    }\\n\\n    function _setPendingAction(bytes32 _action) private {\\n        pendingActions[_action] = block.timestamp.add(buffer);\\n        emit SignalPendingAction(_action);\\n    }\\n\\n    function _validateAction(bytes32 _action) private view {\\n        require(pendingActions[_action] != 0, \\\"Timelock: action not signalled\\\");\\n        require(pendingActions[_action] < block.timestamp, \\\"Timelock: action time not yet passed\\\");\\n    }\\n\\n    function _clearAction(bytes32 _action) private {\\n        require(pendingActions[_action] != 0, \\\"Timelock: invalid _action\\\");\\n        delete pendingActions[_action];\\n        emit ClearAction(_action);\\n    }\\n}\\n\"\n    },\n    \"contracts/oracle/interfaces/IFastPriceFeed.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IFastPriceFeed {\\n    function lastUpdatedAt() external view returns (uint256);\\n    function lastUpdatedBlock() external view returns (uint256);\\n    function setSigner(address _account, bool _isActive) external;\\n    function setUpdater(address _account, bool _isActive) external;\\n    function setPriceDuration(uint256 _priceDuration) external;\\n    function setMaxPriceUpdateDelay(uint256 _maxPriceUpdateDelay) external;\\n    function setSpreadBasisPointsIfInactive(uint256 _spreadBasisPointsIfInactive) external;\\n    function setSpreadBasisPointsIfChainError(uint256 _spreadBasisPointsIfChainError) external;\\n    function setMinBlockInterval(uint256 _minBlockInterval) external;\\n    function setIsSpreadEnabled(bool _isSpreadEnabled) external;\\n    function setMaxDeviationBasisPoints(uint256 _maxDeviationBasisPoints) external;\\n    function setMaxCumulativeDeltaDiffs(address[] memory _tokens,  uint256[] memory _maxCumulativeDeltaDiffs) external;\\n    function setPriceDataInterval(uint256 _priceDataInterval) external;\\n    function setVaultPriceFeed(address _vaultPriceFeed) external;\\n}\\n\"\n    },\n    \"contracts/tokens/USDG.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./interfaces/IUSDG.sol\\\";\\nimport \\\"./YieldToken.sol\\\";\\n\\ncontract USDG is YieldToken, IUSDG {\\n\\n    mapping (address => bool) public vaults;\\n\\n    modifier onlyVault() {\\n        require(vaults[msg.sender], \\\"USDG: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(address _vault) public YieldToken(\\\"USD Gambit\\\", \\\"USDG\\\", 0) {\\n        vaults[_vault] = true;\\n    }\\n\\n    function addVault(address _vault) external override onlyGov {\\n        vaults[_vault] = true;\\n    }\\n\\n    function removeVault(address _vault) external override onlyGov {\\n        vaults[_vault] = false;\\n    }\\n\\n    function mint(address _account, uint256 _amount) external override onlyVault {\\n        _mint(_account, _amount);\\n    }\\n\\n    function burn(address _account, uint256 _amount) external override onlyVault {\\n        _burn(_account, _amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/tokens/YieldToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IYieldTracker.sol\\\";\\nimport \\\"./interfaces/IYieldToken.sol\\\";\\n\\ncontract YieldToken is IERC20, IYieldToken {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public constant decimals = 18;\\n\\n    uint256 public override totalSupply;\\n    uint256 public nonStakingSupply;\\n\\n    address public gov;\\n\\n    mapping (address => uint256) public balances;\\n    mapping (address => mapping (address => uint256)) public allowances;\\n\\n    address[] public yieldTrackers;\\n    mapping (address => bool) public nonStakingAccounts;\\n    mapping (address => bool) public admins;\\n\\n    bool public inWhitelistMode;\\n    mapping (address => bool) public whitelistedHandlers;\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"YieldToken: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(admins[msg.sender], \\\"YieldToken: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) public {\\n        name = _name;\\n        symbol = _symbol;\\n        gov = msg.sender;\\n        admins[msg.sender] = true;\\n        _mint(msg.sender, _initialSupply);\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n\\n    function setInfo(string memory _name, string memory _symbol) external onlyGov {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    function setYieldTrackers(address[] memory _yieldTrackers) external onlyGov {\\n        yieldTrackers = _yieldTrackers;\\n    }\\n\\n    function addAdmin(address _account) external onlyGov {\\n        admins[_account] = true;\\n    }\\n\\n    function removeAdmin(address _account) external override onlyGov {\\n        admins[_account] = false;\\n    }\\n\\n    // to help users who accidentally send their tokens to this contract\\n    function withdrawToken(address _token, address _account, uint256 _amount) external onlyGov {\\n        IERC20(_token).safeTransfer(_account, _amount);\\n    }\\n\\n    function setInWhitelistMode(bool _inWhitelistMode) external onlyGov {\\n        inWhitelistMode = _inWhitelistMode;\\n    }\\n\\n    function setWhitelistedHandler(address _handler, bool _isWhitelisted) external onlyGov {\\n        whitelistedHandlers[_handler] = _isWhitelisted;\\n    }\\n\\n    function addNonStakingAccount(address _account) external onlyAdmin {\\n        require(!nonStakingAccounts[_account], \\\"YieldToken: _account already marked\\\");\\n        _updateRewards(_account);\\n        nonStakingAccounts[_account] = true;\\n        nonStakingSupply = nonStakingSupply.add(balances[_account]);\\n    }\\n\\n    function removeNonStakingAccount(address _account) external onlyAdmin {\\n        require(nonStakingAccounts[_account], \\\"YieldToken: _account not marked\\\");\\n        _updateRewards(_account);\\n        nonStakingAccounts[_account] = false;\\n        nonStakingSupply = nonStakingSupply.sub(balances[_account]);\\n    }\\n\\n    function recoverClaim(address _account, address _receiver) external onlyAdmin {\\n        for (uint256 i = 0; i < yieldTrackers.length; i++) {\\n            address yieldTracker = yieldTrackers[i];\\n            IYieldTracker(yieldTracker).claim(_account, _receiver);\\n        }\\n    }\\n\\n    function claim(address _receiver) external {\\n        for (uint256 i = 0; i < yieldTrackers.length; i++) {\\n            address yieldTracker = yieldTrackers[i];\\n            IYieldTracker(yieldTracker).claim(msg.sender, _receiver);\\n        }\\n    }\\n\\n    function totalStaked() external view override returns (uint256) {\\n        return totalSupply.sub(nonStakingSupply);\\n    }\\n\\n    function balanceOf(address _account) external view override returns (uint256) {\\n        return balances[_account];\\n    }\\n\\n    function stakedBalance(address _account) external view override returns (uint256) {\\n        if (nonStakingAccounts[_account]) {\\n            return 0;\\n        }\\n        return balances[_account];\\n    }\\n\\n    function transfer(address _recipient, uint256 _amount) external override returns (bool) {\\n        _transfer(msg.sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address _spender) external view override returns (uint256) {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    function approve(address _spender, uint256 _amount) external override returns (bool) {\\n        _approve(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external override returns (bool) {\\n        uint256 nextAllowance = allowances[_sender][msg.sender].sub(_amount, \\\"YieldToken: transfer amount exceeds allowance\\\");\\n        _approve(_sender, msg.sender, nextAllowance);\\n        _transfer(_sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function _mint(address _account, uint256 _amount) internal {\\n        require(_account != address(0), \\\"YieldToken: mint to the zero address\\\");\\n\\n        _updateRewards(_account);\\n\\n        totalSupply = totalSupply.add(_amount);\\n        balances[_account] = balances[_account].add(_amount);\\n\\n        if (nonStakingAccounts[_account]) {\\n            nonStakingSupply = nonStakingSupply.add(_amount);\\n        }\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    function _burn(address _account, uint256 _amount) internal {\\n        require(_account != address(0), \\\"YieldToken: burn from the zero address\\\");\\n\\n        _updateRewards(_account);\\n\\n        balances[_account] = balances[_account].sub(_amount, \\\"YieldToken: burn amount exceeds balance\\\");\\n        totalSupply = totalSupply.sub(_amount);\\n\\n        if (nonStakingAccounts[_account]) {\\n            nonStakingSupply = nonStakingSupply.sub(_amount);\\n        }\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\\n        require(_sender != address(0), \\\"YieldToken: transfer from the zero address\\\");\\n        require(_recipient != address(0), \\\"YieldToken: transfer to the zero address\\\");\\n\\n        if (inWhitelistMode) {\\n            require(whitelistedHandlers[msg.sender], \\\"YieldToken: msg.sender not whitelisted\\\");\\n        }\\n\\n        _updateRewards(_sender);\\n        _updateRewards(_recipient);\\n\\n        balances[_sender] = balances[_sender].sub(_amount, \\\"YieldToken: transfer amount exceeds balance\\\");\\n        balances[_recipient] = balances[_recipient].add(_amount);\\n\\n        if (nonStakingAccounts[_sender]) {\\n            nonStakingSupply = nonStakingSupply.sub(_amount);\\n        }\\n        if (nonStakingAccounts[_recipient]) {\\n            nonStakingSupply = nonStakingSupply.add(_amount);\\n        }\\n\\n        emit Transfer(_sender, _recipient,_amount);\\n    }\\n\\n    function _approve(address _owner, address _spender, uint256 _amount) private {\\n        require(_owner != address(0), \\\"YieldToken: approve from the zero address\\\");\\n        require(_spender != address(0), \\\"YieldToken: approve to the zero address\\\");\\n\\n        allowances[_owner][_spender] = _amount;\\n\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    function _updateRewards(address _account) private {\\n        for (uint256 i = 0; i < yieldTrackers.length; i++) {\\n            address yieldTracker = yieldTrackers[i];\\n            IYieldTracker(yieldTracker).updateRewards(_account);\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/tokens/YieldTracker.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IDistributor.sol\\\";\\nimport \\\"./interfaces/IYieldTracker.sol\\\";\\nimport \\\"./interfaces/IYieldToken.sol\\\";\\n\\n// code adapated from https://github.com/trusttoken/smart-contracts/blob/master/contracts/truefi/TrueFarm.sol\\ncontract YieldTracker is IYieldTracker, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant PRECISION = 1e30;\\n\\n    address public gov;\\n    address public yieldToken;\\n    address public distributor;\\n\\n    uint256 public cumulativeRewardPerToken;\\n    mapping (address => uint256) public claimableReward;\\n    mapping (address => uint256) public previousCumulatedRewardPerToken;\\n\\n    event Claim(address receiver, uint256 amount);\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"YieldTracker: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(address _yieldToken) public {\\n        gov = msg.sender;\\n        yieldToken = _yieldToken;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n\\n    function setDistributor(address _distributor) external onlyGov {\\n        distributor = _distributor;\\n    }\\n\\n    // to help users who accidentally send their tokens to this contract\\n    function withdrawToken(address _token, address _account, uint256 _amount) external onlyGov {\\n        IERC20(_token).safeTransfer(_account, _amount);\\n    }\\n\\n    function claim(address _account, address _receiver) external override returns (uint256) {\\n        require(msg.sender == yieldToken, \\\"YieldTracker: forbidden\\\");\\n        updateRewards(_account);\\n\\n        uint256 tokenAmount = claimableReward[_account];\\n        claimableReward[_account] = 0;\\n\\n        address rewardToken = IDistributor(distributor).getRewardToken(address(this));\\n        IERC20(rewardToken).safeTransfer(_receiver, tokenAmount);\\n        emit Claim(_account, tokenAmount);\\n\\n        return tokenAmount;\\n    }\\n\\n    function getTokensPerInterval() external override view returns (uint256) {\\n        return IDistributor(distributor).tokensPerInterval(address(this));\\n    }\\n\\n    function claimable(address _account) external override view returns (uint256) {\\n        uint256 stakedBalance = IYieldToken(yieldToken).stakedBalance(_account);\\n        if (stakedBalance == 0) {\\n            return claimableReward[_account];\\n        }\\n        uint256 pendingRewards = IDistributor(distributor).getDistributionAmount(address(this)).mul(PRECISION);\\n        uint256 totalStaked = IYieldToken(yieldToken).totalStaked();\\n        uint256 nextCumulativeRewardPerToken = cumulativeRewardPerToken.add(pendingRewards.div(totalStaked));\\n        return claimableReward[_account].add(\\n            stakedBalance.mul(nextCumulativeRewardPerToken.sub(previousCumulatedRewardPerToken[_account])).div(PRECISION));\\n    }\\n\\n    function updateRewards(address _account) public override nonReentrant {\\n        uint256 blockReward;\\n\\n        if (distributor != address(0)) {\\n            blockReward = IDistributor(distributor).distribute();\\n        }\\n\\n        uint256 _cumulativeRewardPerToken = cumulativeRewardPerToken;\\n        uint256 totalStaked = IYieldToken(yieldToken).totalStaked();\\n        // only update cumulativeRewardPerToken when there are stakers, i.e. when totalStaked > 0\\n        // if blockReward == 0, then there will be no change to cumulativeRewardPerToken\\n        if (totalStaked > 0 && blockReward > 0) {\\n            _cumulativeRewardPerToken = _cumulativeRewardPerToken.add(blockReward.mul(PRECISION).div(totalStaked));\\n            cumulativeRewardPerToken = _cumulativeRewardPerToken;\\n        }\\n\\n        // cumulativeRewardPerToken can only increase\\n        // so if cumulativeRewardPerToken is zero, it means there are no rewards yet\\n        if (_cumulativeRewardPerToken == 0) {\\n            return;\\n        }\\n\\n        if (_account != address(0)) {\\n            uint256 stakedBalance = IYieldToken(yieldToken).stakedBalance(_account);\\n            uint256 _previousCumulatedReward = previousCumulatedRewardPerToken[_account];\\n            uint256 _claimableReward = claimableReward[_account].add(\\n                stakedBalance.mul(_cumulativeRewardPerToken.sub(_previousCumulatedReward)).div(PRECISION)\\n            );\\n\\n            claimableReward[_account] = _claimableReward;\\n            previousCumulatedRewardPerToken[_account] = _cumulativeRewardPerToken;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/tokens/interfaces/IDistributor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IDistributor {\\n    function distribute() external returns (uint256);\\n    function getRewardToken(address _receiver) external view returns (address);\\n    function getDistributionAmount(address _receiver) external view returns (uint256);\\n    function tokensPerInterval(address _receiver) external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/peripherals/Reader.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\nimport \\\"../core/interfaces/IVault.sol\\\";\\nimport \\\"../core/interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../tokens/interfaces/IYieldTracker.sol\\\";\\nimport \\\"../tokens/interfaces/IYieldToken.sol\\\";\\nimport \\\"../amm/interfaces/IPancakeFactory.sol\\\";\\n\\nimport \\\"../staking/interfaces/IVester.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\ncontract Reader is Governable {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant POSITION_PROPS_LENGTH = 9;\\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\\n    uint256 public constant USDG_DECIMALS = 18;\\n\\n    bool public hasMaxGlobalShortSizes;\\n\\n    function setConfig(bool _hasMaxGlobalShortSizes) public onlyGov {\\n        hasMaxGlobalShortSizes = _hasMaxGlobalShortSizes;\\n    }\\n\\n    function getMaxAmountIn(IVault _vault, address _tokenIn, address _tokenOut) public view returns (uint256) {\\n        uint256 priceIn = _vault.getMinPrice(_tokenIn);\\n        uint256 priceOut = _vault.getMaxPrice(_tokenOut);\\n\\n        uint256 tokenInDecimals = _vault.tokenDecimals(_tokenIn);\\n        uint256 tokenOutDecimals = _vault.tokenDecimals(_tokenOut);\\n\\n        uint256 amountIn;\\n\\n        {\\n            uint256 poolAmount = _vault.poolAmounts(_tokenOut);\\n            uint256 reservedAmount = _vault.reservedAmounts(_tokenOut);\\n            uint256 bufferAmount = _vault.bufferAmounts(_tokenOut);\\n            uint256 subAmount = reservedAmount > bufferAmount ? reservedAmount : bufferAmount;\\n            if (subAmount >= poolAmount) {\\n                return 0;\\n            }\\n            uint256 availableAmount = poolAmount.sub(subAmount);\\n            amountIn = availableAmount.mul(priceOut).div(priceIn).mul(10 ** tokenInDecimals).div(10 ** tokenOutDecimals);\\n        }\\n\\n        uint256 maxUsdgAmount = _vault.maxUsdgAmounts(_tokenIn);\\n\\n        if (maxUsdgAmount != 0) {\\n            if (maxUsdgAmount < _vault.usdgAmounts(_tokenIn)) {\\n                return 0;\\n            }\\n\\n            uint256 maxAmountIn = maxUsdgAmount.sub(_vault.usdgAmounts(_tokenIn));\\n            maxAmountIn = maxAmountIn.mul(10 ** tokenInDecimals).div(10 ** USDG_DECIMALS);\\n            maxAmountIn = maxAmountIn.mul(PRICE_PRECISION).div(priceIn);\\n\\n            if (amountIn > maxAmountIn) {\\n                return maxAmountIn;\\n            }\\n        }\\n\\n        return amountIn;\\n    }\\n\\n    function getAmountOut(IVault _vault, address _tokenIn, address _tokenOut, uint256 _amountIn) public view returns (uint256, uint256) {\\n        uint256 priceIn = _vault.getMinPrice(_tokenIn);\\n\\n        uint256 tokenInDecimals = _vault.tokenDecimals(_tokenIn);\\n        uint256 tokenOutDecimals = _vault.tokenDecimals(_tokenOut);\\n\\n        uint256 feeBasisPoints;\\n        {\\n            uint256 usdgAmount = _amountIn.mul(priceIn).div(PRICE_PRECISION);\\n            usdgAmount = usdgAmount.mul(10 ** USDG_DECIMALS).div(10 ** tokenInDecimals);\\n\\n            bool isStableSwap = _vault.stableTokens(_tokenIn) && _vault.stableTokens(_tokenOut);\\n            uint256 baseBps = isStableSwap ? _vault.stableSwapFeeBasisPoints() : _vault.swapFeeBasisPoints();\\n            uint256 taxBps = isStableSwap ? _vault.stableTaxBasisPoints() : _vault.taxBasisPoints();\\n            uint256 feesBasisPoints0 = _vault.getFeeBasisPoints(_tokenIn, usdgAmount, baseBps, taxBps, true);\\n            uint256 feesBasisPoints1 = _vault.getFeeBasisPoints(_tokenOut, usdgAmount, baseBps, taxBps, false);\\n            // use the higher of the two fee basis points\\n            feeBasisPoints = feesBasisPoints0 > feesBasisPoints1 ? feesBasisPoints0 : feesBasisPoints1;\\n        }\\n\\n        uint256 priceOut = _vault.getMaxPrice(_tokenOut);\\n        uint256 amountOut = _amountIn.mul(priceIn).div(priceOut);\\n        amountOut = amountOut.mul(10 ** tokenOutDecimals).div(10 ** tokenInDecimals);\\n\\n        uint256 amountOutAfterFees = amountOut.mul(BASIS_POINTS_DIVISOR.sub(feeBasisPoints)).div(BASIS_POINTS_DIVISOR);\\n        uint256 feeAmount = amountOut.sub(amountOutAfterFees);\\n\\n        return (amountOutAfterFees, feeAmount);\\n    }\\n\\n    function getFeeBasisPoints(IVault _vault, address _tokenIn, address _tokenOut, uint256 _amountIn) public view returns (uint256, uint256, uint256) {\\n        uint256 priceIn = _vault.getMinPrice(_tokenIn);\\n        uint256 tokenInDecimals = _vault.tokenDecimals(_tokenIn);\\n\\n        uint256 usdgAmount = _amountIn.mul(priceIn).div(PRICE_PRECISION);\\n        usdgAmount = usdgAmount.mul(10 ** USDG_DECIMALS).div(10 ** tokenInDecimals);\\n\\n        bool isStableSwap = _vault.stableTokens(_tokenIn) && _vault.stableTokens(_tokenOut);\\n        uint256 baseBps = isStableSwap ? _vault.stableSwapFeeBasisPoints() : _vault.swapFeeBasisPoints();\\n        uint256 taxBps = isStableSwap ? _vault.stableTaxBasisPoints() : _vault.taxBasisPoints();\\n        uint256 feesBasisPoints0 = _vault.getFeeBasisPoints(_tokenIn, usdgAmount, baseBps, taxBps, true);\\n        uint256 feesBasisPoints1 = _vault.getFeeBasisPoints(_tokenOut, usdgAmount, baseBps, taxBps, false);\\n        // use the higher of the two fee basis points\\n        uint256 feeBasisPoints = feesBasisPoints0 > feesBasisPoints1 ? feesBasisPoints0 : feesBasisPoints1;\\n\\n        return (feeBasisPoints, feesBasisPoints0, feesBasisPoints1);\\n    }\\n\\n    function getFees(address _vault, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            amounts[i] = IVault(_vault).feeReserves(_tokens[i]);\\n        }\\n        return amounts;\\n    }\\n\\n    function getTotalStaked(address[] memory _yieldTokens) public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](_yieldTokens.length);\\n        for (uint256 i = 0; i < _yieldTokens.length; i++) {\\n            IYieldToken yieldToken = IYieldToken(_yieldTokens[i]);\\n            amounts[i] = yieldToken.totalStaked();\\n        }\\n        return amounts;\\n    }\\n\\n    function getStakingInfo(address _account, address[] memory _yieldTrackers) public view returns (uint256[] memory) {\\n        uint256 propsLength = 2;\\n        uint256[] memory amounts = new uint256[](_yieldTrackers.length * propsLength);\\n        for (uint256 i = 0; i < _yieldTrackers.length; i++) {\\n            IYieldTracker yieldTracker = IYieldTracker(_yieldTrackers[i]);\\n            amounts[i * propsLength] = yieldTracker.claimable(_account);\\n            amounts[i * propsLength + 1] = yieldTracker.getTokensPerInterval();\\n        }\\n        return amounts;\\n    }\\n\\n    function getVestingInfo(address _account, address[] memory _vesters) public view returns (uint256[] memory) {\\n        uint256 propsLength = 7;\\n        uint256[] memory amounts = new uint256[](_vesters.length * propsLength);\\n        for (uint256 i = 0; i < _vesters.length; i++) {\\n            IVester vester = IVester(_vesters[i]);\\n            amounts[i * propsLength] = vester.pairAmounts(_account);\\n            amounts[i * propsLength + 1] = vester.getVestedAmount(_account);\\n            amounts[i * propsLength + 2] = IERC20(_vesters[i]).balanceOf(_account);\\n            amounts[i * propsLength + 3] = vester.claimedAmounts(_account);\\n            amounts[i * propsLength + 4] = vester.claimable(_account);\\n            amounts[i * propsLength + 5] = vester.getMaxVestableAmount(_account);\\n            amounts[i * propsLength + 6] = vester.getCombinedAverageStakedAmount(_account);\\n        }\\n        return amounts;\\n    }\\n\\n    function getPairInfo(address _factory, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256 inputLength = 2;\\n        uint256 propsLength = 2;\\n        uint256[] memory amounts = new uint256[](_tokens.length / inputLength * propsLength);\\n        for (uint256 i = 0; i < _tokens.length / inputLength; i++) {\\n            address token0 = _tokens[i * inputLength];\\n            address token1 = _tokens[i * inputLength + 1];\\n            address pair = IPancakeFactory(_factory).getPair(token0, token1);\\n\\n            amounts[i * propsLength] = IERC20(token0).balanceOf(pair);\\n            amounts[i * propsLength + 1] = IERC20(token1).balanceOf(pair);\\n        }\\n        return amounts;\\n    }\\n\\n    function getFundingRates(address _vault, address _weth, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256 propsLength = 2;\\n        uint256[] memory fundingRates = new uint256[](_tokens.length * propsLength);\\n        IVault vault = IVault(_vault);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                token = _weth;\\n            }\\n\\n            uint256 fundingRateFactor = vault.stableTokens(token) ? vault.stableFundingRateFactor() : vault.fundingRateFactor();\\n            uint256 reservedAmount = vault.reservedAmounts(token);\\n            uint256 poolAmount = vault.poolAmounts(token);\\n\\n            if (poolAmount > 0) {\\n                fundingRates[i * propsLength] = fundingRateFactor.mul(reservedAmount).div(poolAmount);\\n            }\\n\\n            if (vault.cumulativeFundingRates(token) > 0) {\\n                uint256 nextRate = vault.getNextFundingRate(token);\\n                uint256 baseRate = vault.cumulativeFundingRates(token);\\n                fundingRates[i * propsLength + 1] = baseRate.add(nextRate);\\n            }\\n        }\\n\\n        return fundingRates;\\n    }\\n\\n    function getTokenSupply(IERC20 _token, address[] memory _excludedAccounts) public view returns (uint256) {\\n        uint256 supply = _token.totalSupply();\\n        for (uint256 i = 0; i < _excludedAccounts.length; i++) {\\n            address account = _excludedAccounts[i];\\n            uint256 balance = _token.balanceOf(account);\\n            supply = supply.sub(balance);\\n        }\\n        return supply;\\n    }\\n\\n    function getTotalBalance(IERC20 _token, address[] memory _accounts) public view returns (uint256) {\\n        uint256 totalBalance = 0;\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            address account = _accounts[i];\\n            uint256 balance = _token.balanceOf(account);\\n            totalBalance = totalBalance.add(balance);\\n        }\\n        return totalBalance;\\n    }\\n\\n    function getTokenBalances(address _account, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256[] memory balances = new uint256[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                balances[i] = _account.balance;\\n                continue;\\n            }\\n            balances[i] = IERC20(token).balanceOf(_account);\\n        }\\n        return balances;\\n    }\\n\\n    function getTokenBalancesWithSupplies(address _account, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256 propsLength = 2;\\n        uint256[] memory balances = new uint256[](_tokens.length * propsLength);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                balances[i * propsLength] = _account.balance;\\n                balances[i * propsLength + 1] = 0;\\n                continue;\\n            }\\n            balances[i * propsLength] = IERC20(token).balanceOf(_account);\\n            balances[i * propsLength + 1] = IERC20(token).totalSupply();\\n        }\\n        return balances;\\n    }\\n\\n    function getPrices(IVaultPriceFeed _priceFeed, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256 propsLength = 6;\\n\\n        uint256[] memory amounts = new uint256[](_tokens.length * propsLength);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            amounts[i * propsLength] = _priceFeed.getPrice(token, true, true, false);\\n            amounts[i * propsLength + 1] = _priceFeed.getPrice(token, false, true, false);\\n            amounts[i * propsLength + 2] = _priceFeed.getPrimaryPrice(token, true);\\n            amounts[i * propsLength + 3] = _priceFeed.getPrimaryPrice(token, false);\\n            amounts[i * propsLength + 4] = _priceFeed.isAdjustmentAdditive(token) ? 1 : 0;\\n            amounts[i * propsLength + 5] = _priceFeed.adjustmentBasisPoints(token);\\n        }\\n\\n        return amounts;\\n    }\\n\\n    function getVaultTokenInfo(address _vault, address _weth, uint256 _usdgAmount, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256 propsLength = 10;\\n\\n        IVault vault = IVault(_vault);\\n        IVaultPriceFeed priceFeed = IVaultPriceFeed(vault.priceFeed());\\n\\n        uint256[] memory amounts = new uint256[](_tokens.length * propsLength);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                token = _weth;\\n            }\\n            amounts[i * propsLength] = vault.poolAmounts(token);\\n            amounts[i * propsLength + 1] = vault.reservedAmounts(token);\\n            amounts[i * propsLength + 2] = vault.usdgAmounts(token);\\n            amounts[i * propsLength + 3] = vault.getRedemptionAmount(token, _usdgAmount);\\n            amounts[i * propsLength + 4] = vault.tokenWeights(token);\\n            amounts[i * propsLength + 5] = vault.getMinPrice(token);\\n            amounts[i * propsLength + 6] = vault.getMaxPrice(token);\\n            amounts[i * propsLength + 7] = vault.guaranteedUsd(token);\\n            amounts[i * propsLength + 8] = priceFeed.getPrimaryPrice(token, false);\\n            amounts[i * propsLength + 9] = priceFeed.getPrimaryPrice(token, true);\\n        }\\n\\n        return amounts;\\n    }\\n\\n    function getFullVaultTokenInfo(address _vault, address _weth, uint256 _usdgAmount, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256 propsLength = 12;\\n\\n        IVault vault = IVault(_vault);\\n        IVaultPriceFeed priceFeed = IVaultPriceFeed(vault.priceFeed());\\n\\n        uint256[] memory amounts = new uint256[](_tokens.length * propsLength);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                token = _weth;\\n            }\\n            amounts[i * propsLength] = vault.poolAmounts(token);\\n            amounts[i * propsLength + 1] = vault.reservedAmounts(token);\\n            amounts[i * propsLength + 2] = vault.usdgAmounts(token);\\n            amounts[i * propsLength + 3] = vault.getRedemptionAmount(token, _usdgAmount);\\n            amounts[i * propsLength + 4] = vault.tokenWeights(token);\\n            amounts[i * propsLength + 5] = vault.bufferAmounts(token);\\n            amounts[i * propsLength + 6] = vault.maxUsdgAmounts(token);\\n            amounts[i * propsLength + 7] = vault.getMinPrice(token);\\n            amounts[i * propsLength + 8] = vault.getMaxPrice(token);\\n            amounts[i * propsLength + 9] = vault.guaranteedUsd(token);\\n            amounts[i * propsLength + 10] = priceFeed.getPrimaryPrice(token, false);\\n            amounts[i * propsLength + 11] = priceFeed.getPrimaryPrice(token, true);\\n        }\\n\\n        return amounts;\\n    }\\n\\n    function getVaultTokenInfoV2(address _vault, address _weth, uint256 _usdgAmount, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256 propsLength = 14;\\n\\n        IVault vault = IVault(_vault);\\n        IVaultPriceFeed priceFeed = IVaultPriceFeed(vault.priceFeed());\\n\\n        uint256[] memory amounts = new uint256[](_tokens.length * propsLength);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                token = _weth;\\n            }\\n\\n            uint256 maxGlobalShortSize = hasMaxGlobalShortSizes ? vault.maxGlobalShortSizes(token) : 0;\\n            amounts[i * propsLength] = vault.poolAmounts(token);\\n            amounts[i * propsLength + 1] = vault.reservedAmounts(token);\\n            amounts[i * propsLength + 2] = vault.usdgAmounts(token);\\n            amounts[i * propsLength + 3] = vault.getRedemptionAmount(token, _usdgAmount);\\n            amounts[i * propsLength + 4] = vault.tokenWeights(token);\\n            amounts[i * propsLength + 5] = vault.bufferAmounts(token);\\n            amounts[i * propsLength + 6] = vault.maxUsdgAmounts(token);\\n            amounts[i * propsLength + 7] = vault.globalShortSizes(token);\\n            amounts[i * propsLength + 8] = maxGlobalShortSize;\\n            amounts[i * propsLength + 9] = vault.getMinPrice(token);\\n            amounts[i * propsLength + 10] = vault.getMaxPrice(token);\\n            amounts[i * propsLength + 11] = vault.guaranteedUsd(token);\\n            amounts[i * propsLength + 12] = priceFeed.getPrimaryPrice(token, false);\\n            amounts[i * propsLength + 13] = priceFeed.getPrimaryPrice(token, true);\\n        }\\n\\n        return amounts;\\n    }\\n\\n    function getPositions(address _vault, address _account, address[] memory _collateralTokens, address[] memory _indexTokens, bool[] memory _isLong) public view returns(uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](_collateralTokens.length * POSITION_PROPS_LENGTH);\\n\\n        for (uint256 i = 0; i < _collateralTokens.length; i++) {\\n            {\\n            (uint256 size,\\n             uint256 collateral,\\n             uint256 averagePrice,\\n             uint256 entryFundingRate,\\n             /* reserveAmount */,\\n             uint256 realisedPnl,\\n             bool hasRealisedProfit,\\n             uint256 lastIncreasedTime) = IVault(_vault).getPosition(_account, _collateralTokens[i], _indexTokens[i], _isLong[i]);\\n\\n            amounts[i * POSITION_PROPS_LENGTH] = size;\\n            amounts[i * POSITION_PROPS_LENGTH + 1] = collateral;\\n            amounts[i * POSITION_PROPS_LENGTH + 2] = averagePrice;\\n            amounts[i * POSITION_PROPS_LENGTH + 3] = entryFundingRate;\\n            amounts[i * POSITION_PROPS_LENGTH + 4] = hasRealisedProfit ? 1 : 0;\\n            amounts[i * POSITION_PROPS_LENGTH + 5] = realisedPnl;\\n            amounts[i * POSITION_PROPS_LENGTH + 6] = lastIncreasedTime;\\n            }\\n\\n            uint256 size = amounts[i * POSITION_PROPS_LENGTH];\\n            uint256 averagePrice = amounts[i * POSITION_PROPS_LENGTH + 2];\\n            uint256 lastIncreasedTime = amounts[i * POSITION_PROPS_LENGTH + 6];\\n            if (averagePrice > 0) {\\n                (bool hasProfit, uint256 delta) = IVault(_vault).getDelta(_indexTokens[i], size, averagePrice, _isLong[i], lastIncreasedTime);\\n                amounts[i * POSITION_PROPS_LENGTH + 7] = hasProfit ? 1 : 0;\\n                amounts[i * POSITION_PROPS_LENGTH + 8] = delta;\\n            }\\n        }\\n\\n        return amounts;\\n    }\\n}\\n\"\n    },\n    \"contracts/amm/interfaces/IPancakeFactory.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPancakeFactory {\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\"\n    },\n    \"contracts/amm/PancakeFactory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./interfaces/IPancakeFactory.sol\\\";\\n\\ncontract PancakeFactory is IPancakeFactory {\\n    address public btc;\\n    address public bnb;\\n    address public busd;\\n\\n    address public bnbBusdPair;\\n    address public btcBnbPair;\\n\\n    constructor(address[] memory _addresses) public {\\n        btc = _addresses[0];\\n        bnb = _addresses[1];\\n        busd = _addresses[2];\\n\\n        bnbBusdPair = _addresses[3];\\n        btcBnbPair = _addresses[4];\\n    }\\n\\n    function getPair(address tokenA, address tokenB) external override view returns (address) {\\n        if (tokenA == busd && tokenB == bnb) {\\n            return bnbBusdPair;\\n        }\\n        if (tokenA == bnb && tokenB == btc) {\\n            return btcBnbPair;\\n        }\\n        revert(\\\"Invalid tokens\\\");\\n    }\\n}\\n\"\n    },\n    \"contracts/peripherals/VaultReader.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../core/interfaces/IVault.sol\\\";\\nimport \\\"../core/interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../core/interfaces/IBasePositionManager.sol\\\";\\n\\ncontract VaultReader {\\n    function getVaultTokenInfoV3(address _vault, address _positionManager, address _weth, uint256 _usdgAmount, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256 propsLength = 14;\\n\\n        IVault vault = IVault(_vault);\\n        IVaultPriceFeed priceFeed = IVaultPriceFeed(vault.priceFeed());\\n        IBasePositionManager positionManager = IBasePositionManager(_positionManager);\\n\\n        uint256[] memory amounts = new uint256[](_tokens.length * propsLength);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                token = _weth;\\n            }\\n\\n            amounts[i * propsLength] = vault.poolAmounts(token);\\n            amounts[i * propsLength + 1] = vault.reservedAmounts(token);\\n            amounts[i * propsLength + 2] = vault.usdgAmounts(token);\\n            amounts[i * propsLength + 3] = vault.getRedemptionAmount(token, _usdgAmount);\\n            amounts[i * propsLength + 4] = vault.tokenWeights(token);\\n            amounts[i * propsLength + 5] = vault.bufferAmounts(token);\\n            amounts[i * propsLength + 6] = vault.maxUsdgAmounts(token);\\n            amounts[i * propsLength + 7] = vault.globalShortSizes(token);\\n            amounts[i * propsLength + 8] = positionManager.maxGlobalShortSizes(token);\\n            amounts[i * propsLength + 9] = vault.getMinPrice(token);\\n            amounts[i * propsLength + 10] = vault.getMaxPrice(token);\\n            amounts[i * propsLength + 11] = vault.guaranteedUsd(token);\\n            amounts[i * propsLength + 12] = priceFeed.getPrimaryPrice(token, false);\\n            amounts[i * propsLength + 13] = priceFeed.getPrimaryPrice(token, true);\\n        }\\n\\n        return amounts;\\n    }\\n\\n    function getVaultTokenInfoV4(address _vault, address _positionManager, address _weth, uint256 _usdgAmount, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256 propsLength = 15;\\n\\n        IVault vault = IVault(_vault);\\n        IVaultPriceFeed priceFeed = IVaultPriceFeed(vault.priceFeed());\\n        IBasePositionManager positionManager = IBasePositionManager(_positionManager);\\n\\n        uint256[] memory amounts = new uint256[](_tokens.length * propsLength);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                token = _weth;\\n            }\\n\\n            amounts[i * propsLength] = vault.poolAmounts(token);\\n            amounts[i * propsLength + 1] = vault.reservedAmounts(token);\\n            amounts[i * propsLength + 2] = vault.usdgAmounts(token);\\n            amounts[i * propsLength + 3] = vault.getRedemptionAmount(token, _usdgAmount);\\n            amounts[i * propsLength + 4] = vault.tokenWeights(token);\\n            amounts[i * propsLength + 5] = vault.bufferAmounts(token);\\n            amounts[i * propsLength + 6] = vault.maxUsdgAmounts(token);\\n            amounts[i * propsLength + 7] = vault.globalShortSizes(token);\\n            amounts[i * propsLength + 8] = positionManager.maxGlobalShortSizes(token);\\n            amounts[i * propsLength + 9] = positionManager.maxGlobalLongSizes(token);\\n            amounts[i * propsLength + 10] = vault.getMinPrice(token);\\n            amounts[i * propsLength + 11] = vault.getMaxPrice(token);\\n            amounts[i * propsLength + 12] = vault.guaranteedUsd(token);\\n            amounts[i * propsLength + 13] = priceFeed.getPrimaryPrice(token, false);\\n            amounts[i * propsLength + 14] = priceFeed.getPrimaryPrice(token, true);\\n        }\\n\\n        return amounts;\\n    }\\n}\\n\"\n    },\n    \"contracts/core/interfaces/IBasePositionManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IBasePositionManager {\\n    function maxGlobalLongSizes(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/core/BasePositionManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/Address.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IOrderBook.sol\\\";\\nimport \\\"./interfaces/IBasePositionManager.sol\\\";\\n\\nimport \\\"../access/Governable.sol\\\";\\nimport \\\"../peripherals/interfaces/ITimelock.sol\\\";\\n\\nimport \\\"../referrals/interfaces/IReferralStorage.sol\\\";\\n\\ncontract BasePositionManager is IBasePositionManager, ReentrancyGuard, Governable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n\\n    address public admin;\\n\\n    address public vault;\\n    address public router;\\n    address public weth;\\n\\n    // to prevent using the deposit and withdrawal of collateral as a zero fee swap,\\n    // there is a small depositFee charged if a collateral deposit results in the decrease\\n    // of leverage for an existing position\\n    // increasePositionBufferBps allows for a small amount of decrease of leverage\\n    uint256 public depositFee;\\n    uint256 public increasePositionBufferBps = 100;\\n\\n    address public referralStorage;\\n\\n    mapping (address => uint256) public feeReserves;\\n\\n    mapping (address => uint256) public override maxGlobalLongSizes;\\n    mapping (address => uint256) public override maxGlobalShortSizes;\\n\\n    event SetDepositFee(uint256 depositFee);\\n    event SetIncreasePositionBufferBps(uint256 increasePositionBufferBps);\\n    event SetReferralStorage(address referralStorage);\\n    event SetAdmin(address admin);\\n    event WithdrawFees(address token, address receiver, uint256 amount);\\n\\n    event SetMaxGlobalSizes(\\n        address[] tokens,\\n        uint256[] longSizes,\\n        uint256[] shortSizes\\n    );\\n\\n    event IncreasePositionReferral(\\n        address account,\\n        uint256 sizeDelta,\\n        uint256 marginFeeBasisPoints,\\n        bytes32 referralCode,\\n        address referrer\\n    );\\n\\n    event DecreasePositionReferral(\\n        address account,\\n        uint256 sizeDelta,\\n        uint256 marginFeeBasisPoints,\\n        bytes32 referralCode,\\n        address referrer\\n    );\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"BasePositionManager: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _vault,\\n        address _router,\\n        address _weth,\\n        uint256 _depositFee\\n    ) public {\\n        vault = _vault;\\n        router = _router;\\n        weth = _weth;\\n        depositFee = _depositFee;\\n\\n        admin = msg.sender;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == weth, \\\"BasePositionManager: invalid sender\\\");\\n    }\\n\\n    function setAdmin(address _admin) external onlyGov {\\n        admin = _admin;\\n        emit SetAdmin(_admin);\\n    }\\n\\n    function setDepositFee(uint256 _depositFee) external onlyAdmin {\\n        depositFee = _depositFee;\\n        emit SetDepositFee(_depositFee);\\n    }\\n\\n    function setIncreasePositionBufferBps(uint256 _increasePositionBufferBps) external onlyAdmin {\\n        increasePositionBufferBps = _increasePositionBufferBps;\\n        emit SetIncreasePositionBufferBps(_increasePositionBufferBps);\\n    }\\n\\n    function setReferralStorage(address _referralStorage) external onlyAdmin {\\n        referralStorage = _referralStorage;\\n        emit SetReferralStorage(_referralStorage);\\n    }\\n\\n    function setMaxGlobalSizes(\\n        address[] memory _tokens,\\n        uint256[] memory _longSizes,\\n        uint256[] memory _shortSizes\\n    ) external onlyAdmin {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            maxGlobalLongSizes[token] = _longSizes[i];\\n            maxGlobalShortSizes[token] = _shortSizes[i];\\n        }\\n\\n        emit SetMaxGlobalSizes(_tokens, _longSizes, _shortSizes);\\n    }\\n\\n    function withdrawFees(address _token, address _receiver) external onlyAdmin {\\n        uint256 amount = feeReserves[_token];\\n        if (amount == 0) { return; }\\n\\n        feeReserves[_token] = 0;\\n        IERC20(_token).safeTransfer(_receiver, amount);\\n\\n        emit WithdrawFees(_token, _receiver, amount);\\n    }\\n\\n    function approve(address _token, address _spender, uint256 _amount) external onlyGov {\\n        IERC20(_token).approve(_spender, _amount);\\n    }\\n\\n    function sendValue(address payable _receiver, uint256 _amount) external onlyGov {\\n        _receiver.sendValue(_amount);\\n    }\\n\\n    function _increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong, uint256 _price) internal {\\n        address _vault = vault;\\n\\n        if (_isLong) {\\n            require(IVault(_vault).getMaxPrice(_indexToken) <= _price, \\\"BasePositionManager: mark price higher than limit\\\");\\n        } else {\\n            require(IVault(_vault).getMinPrice(_indexToken) >= _price, \\\"BasePositionManager: mark price lower than limit\\\");\\n        }\\n\\n        if (_isLong) {\\n            uint256 maxGlobalLongSize = maxGlobalLongSizes[_indexToken];\\n            if (maxGlobalLongSize > 0 && IVault(_vault).guaranteedUsd(_indexToken).add(_sizeDelta) > maxGlobalLongSize) {\\n                revert(\\\"BasePositionManager: max global longs exceeded\\\");\\n            }\\n        } else {\\n            uint256 maxGlobalShortSize = maxGlobalShortSizes[_indexToken];\\n            if (maxGlobalShortSize > 0 && IVault(_vault).globalShortSizes(_indexToken).add(_sizeDelta) > maxGlobalShortSize) {\\n                revert(\\\"BasePositionManager: max global shorts exceeded\\\");\\n            }\\n        }\\n\\n        address timelock = IVault(_vault).gov();\\n\\n        ITimelock(timelock).enableLeverage(_vault);\\n        IRouter(router).pluginIncreasePosition(_account, _collateralToken, _indexToken, _sizeDelta, _isLong);\\n        ITimelock(timelock).disableLeverage(_vault);\\n\\n        _emitIncreasePositionReferral(_account, _sizeDelta);\\n    }\\n\\n    function _decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver, uint256 _price) internal returns (uint256) {\\n        address _vault = vault;\\n\\n        if (_isLong) {\\n            require(IVault(_vault).getMinPrice(_indexToken) >= _price, \\\"BasePositionManager: mark price lower than limit\\\");\\n        } else {\\n            require(IVault(_vault).getMaxPrice(_indexToken) <= _price, \\\"BasePositionManager: mark price higher than limit\\\");\\n        }\\n\\n        address timelock = IVault(_vault).gov();\\n\\n        ITimelock(timelock).enableLeverage(_vault);\\n        uint256 amountOut = IRouter(router).pluginDecreasePosition(_account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, _receiver);\\n        ITimelock(timelock).disableLeverage(_vault);\\n\\n        _emitDecreasePositionReferral(_account, _sizeDelta);\\n\\n        return amountOut;\\n    }\\n\\n    function _emitIncreasePositionReferral(address _account, uint256 _sizeDelta) internal {\\n        address _referralStorage = referralStorage;\\n        if (_referralStorage == address(0)) {\\n            return;\\n        }\\n\\n        (bytes32 referralCode, address referrer) = IReferralStorage(_referralStorage).getTraderReferralInfo(_account);\\n        emit IncreasePositionReferral(\\n            _account,\\n            _sizeDelta,\\n            IVault(vault).marginFeeBasisPoints(),\\n            referralCode,\\n            referrer\\n        );\\n    }\\n\\n    function _emitDecreasePositionReferral(address _account, uint256 _sizeDelta) internal {\\n        address _referralStorage = referralStorage;\\n        if (_referralStorage == address(0)) {\\n            return;\\n        }\\n\\n        (bytes32 referralCode, address referrer) = IReferralStorage(_referralStorage).getTraderReferralInfo(_account);\\n\\n        if (referralCode == bytes32(0)) {\\n            return;\\n        }\\n\\n        emit DecreasePositionReferral(\\n            _account,\\n            _sizeDelta,\\n            IVault(vault).marginFeeBasisPoints(),\\n            referralCode,\\n            referrer\\n        );\\n    }\\n\\n    function _swap(address[] memory _path, uint256 _minOut, address _receiver) internal returns (uint256) {\\n        if (_path.length == 2) {\\n            return _vaultSwap(_path[0], _path[1], _minOut, _receiver);\\n        }\\n        revert(\\\"BasePositionManager: invalid _path.length\\\");\\n    }\\n\\n    function _vaultSwap(address _tokenIn, address _tokenOut, uint256 _minOut, address _receiver) internal returns (uint256) {\\n        uint256 amountOut = IVault(vault).swap(_tokenIn, _tokenOut, _receiver);\\n        require(amountOut >= _minOut, \\\"BasePositionManager: insufficient amountOut\\\");\\n        return amountOut;\\n    }\\n\\n    function _transferInETH() internal {\\n        if (msg.value != 0) {\\n            IWETH(weth).deposit{value: msg.value}();\\n        }\\n    }\\n\\n    function _transferOutETH(uint256 _amountOut, address payable _receiver) internal {\\n        IWETH(weth).withdraw(_amountOut);\\n        _receiver.sendValue(_amountOut);\\n    }\\n\\n    function _transferOutETHWithGasLimit(uint256 _amountOut, address payable _receiver) internal {\\n        IWETH(weth).withdraw(_amountOut);\\n        _receiver.transfer(_amountOut);\\n    }\\n\\n    function _collectFees(\\n        address _account,\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        address _indexToken,\\n        bool _isLong,\\n        uint256 _sizeDelta\\n    ) internal returns (uint256) {\\n        bool shouldDeductFee = _shouldDeductFee(\\n            _account,\\n            _path,\\n            _amountIn,\\n            _indexToken,\\n            _isLong,\\n            _sizeDelta\\n        );\\n\\n        if (shouldDeductFee) {\\n            uint256 afterFeeAmount = _amountIn.mul(BASIS_POINTS_DIVISOR.sub(depositFee)).div(BASIS_POINTS_DIVISOR);\\n            uint256 feeAmount = _amountIn.sub(afterFeeAmount);\\n            address feeToken = _path[_path.length - 1];\\n            feeReserves[feeToken] = feeReserves[feeToken].add(feeAmount);\\n            return afterFeeAmount;\\n        }\\n\\n        return _amountIn;\\n    }\\n\\n    function _shouldDeductFee(\\n        address _account,\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        address _indexToken,\\n        bool _isLong,\\n        uint256 _sizeDelta\\n    ) internal view returns (bool) {\\n        // if the position is a short, do not charge a fee\\n        if (!_isLong) { return false; }\\n\\n        // if the position size is not increasing, this is a collateral deposit\\n        if (_sizeDelta == 0) { return true; }\\n\\n        address collateralToken = _path[_path.length - 1];\\n\\n        IVault _vault = IVault(vault);\\n        (uint256 size, uint256 collateral, , , , , , ) = _vault.getPosition(_account, collateralToken, _indexToken, _isLong);\\n\\n        // if there is no existing position, do not charge a fee\\n        if (size == 0) { return false; }\\n\\n        uint256 nextSize = size.add(_sizeDelta);\\n        uint256 collateralDelta = _vault.tokenToUsdMin(collateralToken, _amountIn);\\n        uint256 nextCollateral = collateral.add(collateralDelta);\\n\\n        uint256 prevLeverage = size.mul(BASIS_POINTS_DIVISOR).div(collateral);\\n        // allow for a maximum of a increasePositionBufferBps decrease since there might be some swap fees taken from the collateral\\n        uint256 nextLeverage = nextSize.mul(BASIS_POINTS_DIVISOR + increasePositionBufferBps).div(nextCollateral);\\n\\n        // deduct a fee if the leverage is decreased\\n        return nextLeverage < prevLeverage;\\n    }\\n}\\n\"\n    },\n    \"contracts/tokens/interfaces/IWETH.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\n    },\n    \"contracts/core/interfaces/IOrderBook.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IOrderBook {\\n\\tfunction getSwapOrder(address _account, uint256 _orderIndex) external view returns (\\n        address path0, \\n        address path1,\\n        address path2,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    );\\n\\n    function getIncreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address purchaseToken, \\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function getDecreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function executeSwapOrder(address, uint256, address payable) external;\\n    function executeDecreaseOrder(address, uint256, address payable) external;\\n    function executeIncreaseOrder(address, uint256, address payable) external;\\n}\\n\"\n    },\n    \"contracts/core/PositionRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IPositionRouter.sol\\\";\\n\\nimport \\\"../peripherals/interfaces/ITimelock.sol\\\";\\nimport \\\"./BasePositionManager.sol\\\";\\n\\ncontract PositionRouter is BasePositionManager, IPositionRouter {\\n\\n    struct IncreasePositionRequest {\\n        address account;\\n        address[] path;\\n        address indexToken;\\n        uint256 amountIn;\\n        uint256 minOut;\\n        uint256 sizeDelta;\\n        bool isLong;\\n        uint256 acceptablePrice;\\n        uint256 executionFee;\\n        uint256 blockNumber;\\n        uint256 blockTime;\\n        bool hasCollateralInETH;\\n    }\\n\\n    struct DecreasePositionRequest {\\n        address account;\\n        address[] path;\\n        address indexToken;\\n        uint256 collateralDelta;\\n        uint256 sizeDelta;\\n        bool isLong;\\n        address receiver;\\n        uint256 acceptablePrice;\\n        uint256 minOut;\\n        uint256 executionFee;\\n        uint256 blockNumber;\\n        uint256 blockTime;\\n        bool withdrawETH;\\n    }\\n\\n    uint256 public minExecutionFee;\\n\\n    uint256 public minBlockDelayKeeper;\\n    uint256 public minTimeDelayPublic;\\n    uint256 public maxTimeDelay;\\n\\n    bool public isLeverageEnabled = true;\\n\\n    bytes32[] public increasePositionRequestKeys;\\n    bytes32[] public decreasePositionRequestKeys;\\n\\n    uint256 public override increasePositionRequestKeysStart;\\n    uint256 public override decreasePositionRequestKeysStart;\\n\\n    mapping (address => bool) public isPositionKeeper;\\n\\n    mapping (address => uint256) public increasePositionsIndex;\\n    mapping (bytes32 => IncreasePositionRequest) public increasePositionRequests;\\n\\n    mapping (address => uint256) public decreasePositionsIndex;\\n    mapping (bytes32 => DecreasePositionRequest) public decreasePositionRequests;\\n\\n    event CreateIncreasePosition(\\n        address indexed account,\\n        address[] path,\\n        address indexToken,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 acceptablePrice,\\n        uint256 executionFee,\\n        uint256 index,\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        uint256 gasPrice\\n    );\\n\\n    event ExecuteIncreasePosition(\\n        address indexed account,\\n        address[] path,\\n        address indexToken,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 acceptablePrice,\\n        uint256 executionFee,\\n        uint256 blockGap,\\n        uint256 timeGap\\n    );\\n\\n    event CancelIncreasePosition(\\n        address indexed account,\\n        address[] path,\\n        address indexToken,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 acceptablePrice,\\n        uint256 executionFee,\\n        uint256 blockGap,\\n        uint256 timeGap\\n    );\\n\\n    event CreateDecreasePosition(\\n        address indexed account,\\n        address[] path,\\n        address indexToken,\\n        uint256 collateralDelta,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        address receiver,\\n        uint256 acceptablePrice,\\n        uint256 minOut,\\n        uint256 executionFee,\\n        uint256 index,\\n        uint256 blockNumber,\\n        uint256 blockTime\\n    );\\n\\n    event ExecuteDecreasePosition(\\n        address indexed account,\\n        address[] path,\\n        address indexToken,\\n        uint256 collateralDelta,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        address receiver,\\n        uint256 acceptablePrice,\\n        uint256 minOut,\\n        uint256 executionFee,\\n        uint256 blockGap,\\n        uint256 timeGap\\n    );\\n\\n    event CancelDecreasePosition(\\n        address indexed account,\\n        address[] path,\\n        address indexToken,\\n        uint256 collateralDelta,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        address receiver,\\n        uint256 acceptablePrice,\\n        uint256 minOut,\\n        uint256 executionFee,\\n        uint256 blockGap,\\n        uint256 timeGap\\n    );\\n\\n    event SetPositionKeeper(address indexed account, bool isActive);\\n    event SetMinExecutionFee(uint256 minExecutionFee);\\n    event SetIsLeverageEnabled(bool isLeverageEnabled);\\n    event SetDelayValues(uint256 minBlockDelayKeeper, uint256 minTimeDelayPublic, uint256 maxTimeDelay);\\n    event SetRequestKeysStartValues(uint256 increasePositionRequestKeysStart, uint256 decreasePositionRequestKeysStart);\\n\\n    modifier onlyPositionKeeper() {\\n        require(isPositionKeeper[msg.sender], \\\"PositionRouter: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _vault,\\n        address _router,\\n        address _weth,\\n        uint256 _depositFee,\\n        uint256 _minExecutionFee\\n    ) public BasePositionManager(_vault, _router, _weth, _depositFee) {\\n        minExecutionFee = _minExecutionFee;\\n    }\\n\\n    function setPositionKeeper(address _account, bool _isActive) external onlyAdmin {\\n        isPositionKeeper[_account] = _isActive;\\n        emit SetPositionKeeper(_account, _isActive);\\n    }\\n\\n    function setMinExecutionFee(uint256 _minExecutionFee) external onlyAdmin {\\n        minExecutionFee = _minExecutionFee;\\n        emit SetMinExecutionFee(_minExecutionFee);\\n    }\\n\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external onlyAdmin {\\n        isLeverageEnabled = _isLeverageEnabled;\\n        emit SetIsLeverageEnabled(_isLeverageEnabled);\\n    }\\n\\n    function setDelayValues(uint256 _minBlockDelayKeeper, uint256 _minTimeDelayPublic, uint256 _maxTimeDelay) external onlyAdmin {\\n        minBlockDelayKeeper = _minBlockDelayKeeper;\\n        minTimeDelayPublic = _minTimeDelayPublic;\\n        maxTimeDelay = _maxTimeDelay;\\n        emit SetDelayValues(_minBlockDelayKeeper, _minTimeDelayPublic, _maxTimeDelay);\\n    }\\n\\n    function setRequestKeysStartValues(uint256 _increasePositionRequestKeysStart, uint256 _decreasePositionRequestKeysStart) external onlyAdmin {\\n        increasePositionRequestKeysStart = _increasePositionRequestKeysStart;\\n        decreasePositionRequestKeysStart = _decreasePositionRequestKeysStart;\\n\\n        emit SetRequestKeysStartValues(_increasePositionRequestKeysStart, _decreasePositionRequestKeysStart);\\n    }\\n\\n    function executeIncreasePositions(uint256 _endIndex, address payable _executionFeeReceiver) external override onlyPositionKeeper {\\n        uint256 index = increasePositionRequestKeysStart;\\n        uint256 length = increasePositionRequestKeys.length;\\n\\n        if (index >= length) { return; }\\n\\n        if (_endIndex > length) {\\n            _endIndex = length;\\n        }\\n\\n        while (index < _endIndex) {\\n            bytes32 key = increasePositionRequestKeys[index];\\n\\n            // if the request was executed then delete the key from the array\\n            // if the request was not executed then break from the loop, this can happen if the\\n            // minimum number of blocks has not yet passed\\n            // an error could be thrown if the request is too old or if the slippage is\\n            // higher than what the user specified, or if there is insufficient liquidity for the position\\n            // in case an error was thrown, cancel the request\\n            try this.executeIncreasePosition(key, _executionFeeReceiver) returns (bool _wasExecuted) {\\n                if (!_wasExecuted) { break; }\\n            } catch {\\n                // wrap this call in a try catch to prevent invalid cancels from blocking the loop\\n                try this.cancelIncreasePosition(key, _executionFeeReceiver) returns (bool _wasCancelled) {\\n                    if (!_wasCancelled) { break; }\\n                } catch {}\\n            }\\n\\n            delete increasePositionRequestKeys[index];\\n            index++;\\n        }\\n\\n        increasePositionRequestKeysStart = index;\\n    }\\n\\n    function executeDecreasePositions(uint256 _endIndex, address payable _executionFeeReceiver) external override onlyPositionKeeper {\\n        uint256 index = decreasePositionRequestKeysStart;\\n        uint256 length = decreasePositionRequestKeys.length;\\n\\n        if (index >= length) { return; }\\n\\n        if (_endIndex > length) {\\n            _endIndex = length;\\n        }\\n\\n        while (index < _endIndex) {\\n            bytes32 key = decreasePositionRequestKeys[index];\\n\\n            // if the request was executed then delete the key from the array\\n            // if the request was not executed then break from the loop, this can happen if the\\n            // minimum number of blocks has not yet passed\\n            // an error could be thrown if the request is too old\\n            // in case an error was thrown, cancel the request\\n            try this.executeDecreasePosition(key, _executionFeeReceiver) returns (bool _wasExecuted) {\\n                if (!_wasExecuted) { break; }\\n            } catch {\\n                // wrap this call in a try catch to prevent invalid cancels from blocking the loop\\n                try this.cancelDecreasePosition(key, _executionFeeReceiver) returns (bool _wasCancelled) {\\n                    if (!_wasCancelled) { break; }\\n                } catch {}\\n            }\\n\\n            delete decreasePositionRequestKeys[index];\\n            index++;\\n        }\\n\\n        decreasePositionRequestKeysStart = index;\\n    }\\n\\n    function createIncreasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode\\n    ) external payable nonReentrant {\\n        require(_executionFee >= minExecutionFee, \\\"PositionRouter: invalid executionFee\\\");\\n        require(msg.value == _executionFee, \\\"PositionRouter: invalid msg.value\\\");\\n        require(_path.length == 1 || _path.length == 2, \\\"PositionRouter: invalid _path length\\\");\\n\\n        _transferInETH();\\n        _setTraderReferralCode(_referralCode);\\n\\n        if (_amountIn > 0) {\\n            IRouter(router).pluginTransfer(_path[0], msg.sender, address(this), _amountIn);\\n        }\\n\\n        _createIncreasePosition(\\n            msg.sender,\\n            _path,\\n            _indexToken,\\n            _amountIn,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            false\\n        );\\n    }\\n\\n    function createIncreasePositionETH(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode\\n    ) external payable nonReentrant {\\n        require(_executionFee >= minExecutionFee, \\\"PositionRouter: invalid executionFee\\\");\\n        require(msg.value >= _executionFee, \\\"PositionRouter: invalid msg.value\\\");\\n        require(_path.length == 1 || _path.length == 2, \\\"PositionRouter: invalid _path length\\\");\\n        require(_path[0] == weth, \\\"PositionRouter: invalid _path\\\");\\n\\n        _transferInETH();\\n        _setTraderReferralCode(_referralCode);\\n\\n        uint256 amountIn = msg.value.sub(_executionFee);\\n\\n        _createIncreasePosition(\\n            msg.sender,\\n            _path,\\n            _indexToken,\\n            amountIn,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            true\\n        );\\n    }\\n\\n    function createDecreasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver,\\n        uint256 _acceptablePrice,\\n        uint256 _minOut,\\n        uint256 _executionFee,\\n        bool _withdrawETH\\n    ) external payable nonReentrant {\\n        require(_executionFee >= minExecutionFee, \\\"PositionRouter: invalid executionFee\\\");\\n        require(msg.value == _executionFee, \\\"PositionRouter: invalid msg.value\\\");\\n        require(_path.length == 1 || _path.length == 2, \\\"PositionRouter: invalid _path length\\\");\\n\\n        if (_withdrawETH) {\\n            require(_path[_path.length - 1] == weth, \\\"PositionRouter: invalid _path\\\");\\n        }\\n\\n        _transferInETH();\\n\\n        _createDecreasePosition(\\n            msg.sender,\\n            _path,\\n            _indexToken,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _isLong,\\n            _receiver,\\n            _acceptablePrice,\\n            _minOut,\\n            _executionFee,\\n            _withdrawETH\\n        );\\n    }\\n\\n    function getRequestQueueLengths() external view returns (uint256, uint256, uint256, uint256) {\\n        return (\\n            increasePositionRequestKeysStart,\\n            increasePositionRequestKeys.length,\\n            decreasePositionRequestKeysStart,\\n            decreasePositionRequestKeys.length\\n        );\\n    }\\n\\n    function executeIncreasePosition(bytes32 _key, address payable _executionFeeReceiver) public nonReentrant returns (bool) {\\n        IncreasePositionRequest memory request = increasePositionRequests[_key];\\n        // if the request was already executed or cancelled, return true so that the executeIncreasePositions loop will continue executing the next request\\n        if (request.account == address(0)) { return true; }\\n\\n        bool shouldExecute = _validateExecution(request.blockNumber, request.blockTime, request.account);\\n        if (!shouldExecute) { return false; }\\n\\n        delete increasePositionRequests[_key];\\n\\n       if (request.amountIn > 0) {\\n           uint256 amountIn = request.amountIn;\\n\\n           if (request.path.length > 1) {\\n               IERC20(request.path[0]).safeTransfer(vault, request.amountIn);\\n               amountIn = _swap(request.path, request.minOut, address(this));\\n           }\\n\\n           uint256 afterFeeAmount = _collectFees(msg.sender, request.path, amountIn, request.indexToken, request.isLong, request.sizeDelta);\\n           IERC20(request.path[request.path.length - 1]).safeTransfer(vault, afterFeeAmount);\\n       }\\n\\n       _increasePosition(request.account, request.path[request.path.length - 1], request.indexToken, request.sizeDelta, request.isLong, request.acceptablePrice);\\n\\n       _transferOutETH(request.executionFee, _executionFeeReceiver);\\n\\n        emit ExecuteIncreasePosition(\\n            request.account,\\n            request.path,\\n            request.indexToken,\\n            request.amountIn,\\n            request.minOut,\\n            request.sizeDelta,\\n            request.isLong,\\n            request.acceptablePrice,\\n            request.executionFee,\\n            block.number.sub(request.blockNumber),\\n            block.timestamp.sub(request.blockTime)\\n        );\\n\\n        return true;\\n    }\\n\\n    function cancelIncreasePosition(bytes32 _key, address payable _executionFeeReceiver) public nonReentrant returns (bool) {\\n        IncreasePositionRequest memory request = increasePositionRequests[_key];\\n        // if the request was already executed or cancelled, return true so that the executeIncreasePositions loop will continue executing the next request\\n        if (request.account == address(0)) { return true; }\\n\\n        bool shouldCancel = _validateCancellation(request.blockNumber, request.blockTime, request.account);\\n        if (!shouldCancel) { return false; }\\n\\n        delete increasePositionRequests[_key];\\n\\n        if (request.hasCollateralInETH) {\\n            _transferOutETHWithGasLimit(request.amountIn, payable(request.account));\\n        } else {\\n            IERC20(request.path[0]).safeTransfer(request.account, request.amountIn);\\n        }\\n\\n       _transferOutETH(request.executionFee, _executionFeeReceiver);\\n\\n        emit CancelIncreasePosition(\\n            request.account,\\n            request.path,\\n            request.indexToken,\\n            request.amountIn,\\n            request.minOut,\\n            request.sizeDelta,\\n            request.isLong,\\n            request.acceptablePrice,\\n            request.executionFee,\\n            block.number.sub(request.blockNumber),\\n            block.timestamp.sub(request.blockTime)\\n        );\\n\\n        return true;\\n    }\\n\\n    function executeDecreasePosition(bytes32 _key, address payable _executionFeeReceiver) public nonReentrant returns (bool) {\\n        DecreasePositionRequest memory request = decreasePositionRequests[_key];\\n        // if the request was already executed or cancelled, return true so that the executeDecreasePositions loop will continue executing the next request\\n        if (request.account == address(0)) { return true; }\\n\\n        bool shouldExecute = _validateExecution(request.blockNumber, request.blockTime, request.account);\\n        if (!shouldExecute) { return false; }\\n\\n        delete decreasePositionRequests[_key];\\n\\n        uint256 amountOut = _decreasePosition(request.account, request.path[0], request.indexToken, request.collateralDelta, request.sizeDelta, request.isLong, address(this), request.acceptablePrice);\\n\\n        if (request.path.length > 1) {\\n            IERC20(request.path[0]).safeTransfer(vault, amountOut);\\n            amountOut = _swap(request.path, request.minOut, address(this));\\n        }\\n\\n        if (request.withdrawETH) {\\n           _transferOutETHWithGasLimit(amountOut, payable(request.receiver));\\n        } else {\\n           IERC20(request.path[request.path.length - 1]).safeTransfer(request.receiver, amountOut);\\n        }\\n\\n       _transferOutETH(request.executionFee, _executionFeeReceiver);\\n\\n        emit ExecuteDecreasePosition(\\n            request.account,\\n            request.path,\\n            request.indexToken,\\n            request.collateralDelta,\\n            request.sizeDelta,\\n            request.isLong,\\n            request.receiver,\\n            request.acceptablePrice,\\n            request.minOut,\\n            request.executionFee,\\n            block.number.sub(request.blockNumber),\\n            block.timestamp.sub(request.blockTime)\\n        );\\n\\n        return true;\\n    }\\n\\n    function cancelDecreasePosition(bytes32 _key, address payable _executionFeeReceiver) public nonReentrant returns (bool) {\\n        DecreasePositionRequest memory request = decreasePositionRequests[_key];\\n        // if the request was already executed or cancelled, return true so that the executeDecreasePositions loop will continue executing the next request\\n        if (request.account == address(0)) { return true; }\\n\\n        bool shouldCancel = _validateCancellation(request.blockNumber, request.blockTime, request.account);\\n        if (!shouldCancel) { return false; }\\n\\n        delete decreasePositionRequests[_key];\\n\\n       _transferOutETH(request.executionFee, _executionFeeReceiver);\\n\\n        emit CancelDecreasePosition(\\n            request.account,\\n            request.path,\\n            request.indexToken,\\n            request.collateralDelta,\\n            request.sizeDelta,\\n            request.isLong,\\n            request.receiver,\\n            request.acceptablePrice,\\n            request.minOut,\\n            request.executionFee,\\n            block.number.sub(request.blockNumber),\\n            block.timestamp.sub(request.blockTime)\\n        );\\n\\n        return true;\\n    }\\n\\n    function getRequestKey(address _account, uint256 _index) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account, _index));\\n    }\\n\\n    function getIncreasePositionRequestPath(bytes32 _key) public view returns (address[] memory) {\\n        IncreasePositionRequest memory request = increasePositionRequests[_key];\\n        return request.path;\\n    }\\n\\n    function getDecreasePositionRequestPath(bytes32 _key) public view returns (address[] memory) {\\n        DecreasePositionRequest memory request = decreasePositionRequests[_key];\\n        return request.path;\\n    }\\n\\n    function _setTraderReferralCode(bytes32 _referralCode) internal {\\n        if (_referralCode != bytes32(0) && referralStorage != address(0)) {\\n            IReferralStorage(referralStorage).setTraderReferralCode(msg.sender, _referralCode);\\n        }\\n    }\\n\\n    function _validateExecution(uint256 _positionBlockNumber, uint256 _positionBlockTime, address _account) internal view returns (bool) {\\n        if (_positionBlockTime.add(maxTimeDelay) <= block.timestamp) {\\n            revert(\\\"PositionRouter: request has expired\\\");\\n        }\\n\\n        bool isKeeperCall = msg.sender == address(this) || isPositionKeeper[msg.sender];\\n\\n        if (!isLeverageEnabled && !isKeeperCall) {\\n            revert(\\\"PositionRouter: forbidden\\\");\\n        }\\n\\n        if (isKeeperCall) {\\n            return _positionBlockNumber.add(minBlockDelayKeeper) <= block.number;\\n        }\\n\\n        require(msg.sender == _account, \\\"PositionRouter: forbidden\\\");\\n\\n        require(_positionBlockTime.add(minTimeDelayPublic) <= block.timestamp, \\\"PositionRouter: min delay not yet passed\\\");\\n\\n        return true;\\n    }\\n\\n    function _validateCancellation(uint256 _positionBlockNumber, uint256 _positionBlockTime, address _account) internal view returns (bool) {\\n        bool isKeeperCall = msg.sender == address(this) || isPositionKeeper[msg.sender];\\n\\n        if (!isLeverageEnabled && !isKeeperCall) {\\n            revert(\\\"PositionRouter: forbidden\\\");\\n        }\\n\\n        if (isKeeperCall) {\\n            return _positionBlockNumber.add(minBlockDelayKeeper) <= block.number;\\n        }\\n\\n        require(msg.sender == _account, \\\"PositionRouter: forbidden\\\");\\n\\n        require(_positionBlockTime.add(minTimeDelayPublic) <= block.timestamp, \\\"PositionRouter: min delay not yet passed\\\");\\n\\n        return true;\\n    }\\n\\n    function _createIncreasePosition(\\n        address _account,\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bool _hasCollateralInETH\\n    ) internal {\\n        uint256 index = increasePositionsIndex[_account].add(1);\\n        increasePositionsIndex[_account] = index;\\n\\n        IncreasePositionRequest memory request = IncreasePositionRequest(\\n            _account,\\n            _path,\\n            _indexToken,\\n            _amountIn,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            block.number,\\n            block.timestamp,\\n            _hasCollateralInETH\\n        );\\n\\n        bytes32 key = getRequestKey(_account, index);\\n        increasePositionRequests[key] = request;\\n\\n        increasePositionRequestKeys.push(key);\\n\\n        emit CreateIncreasePosition(\\n            _account,\\n            _path,\\n            _indexToken,\\n            _amountIn,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            index,\\n            block.number,\\n            block.timestamp,\\n            tx.gasprice\\n        );\\n    }\\n\\n    function _createDecreasePosition(\\n        address _account,\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver,\\n        uint256 _acceptablePrice,\\n        uint256 _minOut,\\n        uint256 _executionFee,\\n        bool _withdrawETH\\n    ) internal {\\n        uint256 index = decreasePositionsIndex[_account].add(1);\\n        decreasePositionsIndex[_account] = index;\\n\\n        DecreasePositionRequest memory request = DecreasePositionRequest(\\n            _account,\\n            _path,\\n            _indexToken,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _isLong,\\n            _receiver,\\n            _acceptablePrice,\\n            _minOut,\\n            _executionFee,\\n            block.number,\\n            block.timestamp,\\n            _withdrawETH\\n        );\\n\\n        bytes32 key = getRequestKey(_account, index);\\n        decreasePositionRequests[key] = request;\\n\\n        decreasePositionRequestKeys.push(key);\\n\\n        emit CreateDecreasePosition(\\n            _account,\\n            _path,\\n            _indexToken,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _isLong,\\n            _receiver,\\n            _acceptablePrice,\\n            _minOut,\\n            _executionFee,\\n            index,\\n            block.number,\\n            block.timestamp\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/core/interfaces/IPositionRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPositionRouter {\\n    function increasePositionRequestKeysStart() external returns (uint256);\\n    function decreasePositionRequestKeysStart() external returns (uint256);\\n    function executeIncreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\\n    function executeDecreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\\n}\\n\"\n    },\n    \"contracts/oracle/FastPriceFeed.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/ISecondaryPriceFeed.sol\\\";\\nimport \\\"./interfaces/IFastPriceFeed.sol\\\";\\nimport \\\"./interfaces/IFastPriceEvents.sol\\\";\\nimport \\\"../core/interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../core/interfaces/IPositionRouter.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\npragma solidity 0.6.12;\\n\\ncontract FastPriceFeed is ISecondaryPriceFeed, IFastPriceFeed, Governable {\\n    using SafeMath for uint256;\\n\\n    // fit data in a uint256 slot to save gas costs\\n    struct PriceDataItem {\\n        uint160 refPrice; // Chainlink price\\n        uint32 refTime; // last updated at time\\n        uint32 cumulativeRefDelta; // cumulative Chainlink price delta\\n        uint32 cumulativeFastDelta; // cumulative fast price delta\\n    }\\n\\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\\n\\n    uint256 public constant CUMULATIVE_DELTA_PRECISION = 10 * 1000 * 1000;\\n\\n    uint256 public constant MAX_REF_PRICE = type(uint160).max;\\n    uint256 public constant MAX_CUMULATIVE_REF_DELTA = type(uint32).max;\\n    uint256 public constant MAX_CUMULATIVE_FAST_DELTA = type(uint32).max;\\n\\n    // uint256(~0) is 256 bits of 1s\\n    // shift the 1s by (256 - 32) to get (256 - 32) 0s followed by 32 1s\\n    uint256 constant public BITMASK_32 = uint256(~0) >> (256 - 32);\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n\\n    uint256 public constant MAX_PRICE_DURATION = 30 minutes;\\n\\n    bool public isInitialized;\\n    bool public isSpreadEnabled = false;\\n\\n    address public vaultPriceFeed;\\n    address public fastPriceEvents;\\n\\n    address public tokenManager;\\n\\n    address public positionRouter;\\n\\n    uint256 public override lastUpdatedAt;\\n    uint256 public override lastUpdatedBlock;\\n\\n    uint256 public priceDuration;\\n    uint256 public maxPriceUpdateDelay;\\n    uint256 public spreadBasisPointsIfInactive;\\n    uint256 public spreadBasisPointsIfChainError;\\n    uint256 public minBlockInterval;\\n    uint256 public maxTimeDeviation;\\n\\n    uint256 public priceDataInterval;\\n\\n    // allowed deviation from primary price\\n    uint256 public maxDeviationBasisPoints;\\n\\n    uint256 public minAuthorizations;\\n    uint256 public disableFastPriceVoteCount = 0;\\n\\n    mapping (address => bool) public isUpdater;\\n\\n    mapping (address => uint256) public prices;\\n    mapping (address => PriceDataItem) public priceData;\\n    mapping (address => uint256) public maxCumulativeDeltaDiffs;\\n\\n    mapping (address => bool) public isSigner;\\n    mapping (address => bool) public disableFastPriceVotes;\\n\\n    // array of tokens used in setCompactedPrices, saves L1 calldata gas costs\\n    address[] public tokens;\\n    // array of tokenPrecisions used in setCompactedPrices, saves L1 calldata gas costs\\n    // if the token price will be sent with 3 decimals, then tokenPrecision for that token\\n    // should be 10 ** 3\\n    uint256[] public tokenPrecisions;\\n\\n    event DisableFastPrice(address signer);\\n    event EnableFastPrice(address signer);\\n    event PriceData(address token, uint256 refPrice, uint256 fastPrice, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta);\\n    event MaxCumulativeDeltaDiffExceeded(address token, uint256 refPrice, uint256 fastPrice, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta);\\n\\n    modifier onlySigner() {\\n        require(isSigner[msg.sender], \\\"FastPriceFeed: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyUpdater() {\\n        require(isUpdater[msg.sender], \\\"FastPriceFeed: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyTokenManager() {\\n        require(msg.sender == tokenManager, \\\"FastPriceFeed: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(\\n      uint256 _priceDuration,\\n      uint256 _maxPriceUpdateDelay,\\n      uint256 _minBlockInterval,\\n      uint256 _maxDeviationBasisPoints,\\n      address _fastPriceEvents,\\n      address _tokenManager,\\n      address _positionRouter\\n    ) public {\\n        require(_priceDuration <= MAX_PRICE_DURATION, \\\"FastPriceFeed: invalid _priceDuration\\\");\\n        priceDuration = _priceDuration;\\n        maxPriceUpdateDelay = _maxPriceUpdateDelay;\\n        minBlockInterval = _minBlockInterval;\\n        maxDeviationBasisPoints = _maxDeviationBasisPoints;\\n        fastPriceEvents = _fastPriceEvents;\\n        tokenManager = _tokenManager;\\n        positionRouter = _positionRouter;\\n    }\\n\\n    function initialize(uint256 _minAuthorizations, address[] memory _signers, address[] memory _updaters) public onlyGov {\\n        require(!isInitialized, \\\"FastPriceFeed: already initialized\\\");\\n        isInitialized = true;\\n\\n        minAuthorizations = _minAuthorizations;\\n\\n        for (uint256 i = 0; i < _signers.length; i++) {\\n            address signer = _signers[i];\\n            isSigner[signer] = true;\\n        }\\n\\n        for (uint256 i = 0; i < _updaters.length; i++) {\\n            address updater = _updaters[i];\\n            isUpdater[updater] = true;\\n        }\\n    }\\n\\n    function setTokenManager(address _tokenManager) external onlyGov {\\n        tokenManager = _tokenManager;\\n    }\\n\\n    function setSigner(address _account, bool _isActive) external override onlyGov {\\n        isSigner[_account] = _isActive;\\n    }\\n\\n    function setUpdater(address _account, bool _isActive) external override onlyGov {\\n        isUpdater[_account] = _isActive;\\n    }\\n\\n    function setFastPriceEvents(address _fastPriceEvents) external onlyGov {\\n      fastPriceEvents = _fastPriceEvents;\\n    }\\n\\n    function setVaultPriceFeed(address _vaultPriceFeed) external override onlyGov {\\n      vaultPriceFeed = _vaultPriceFeed;\\n    }\\n\\n    function setMaxTimeDeviation(uint256 _maxTimeDeviation) external onlyGov {\\n        maxTimeDeviation = _maxTimeDeviation;\\n    }\\n\\n    function setPriceDuration(uint256 _priceDuration) external override onlyGov {\\n        require(_priceDuration <= MAX_PRICE_DURATION, \\\"FastPriceFeed: invalid _priceDuration\\\");\\n        priceDuration = _priceDuration;\\n    }\\n\\n    function setMaxPriceUpdateDelay(uint256 _maxPriceUpdateDelay) external override onlyGov {\\n        maxPriceUpdateDelay = _maxPriceUpdateDelay;\\n    }\\n\\n    function setSpreadBasisPointsIfInactive(uint256 _spreadBasisPointsIfInactive) external override onlyGov {\\n        spreadBasisPointsIfInactive = _spreadBasisPointsIfInactive;\\n    }\\n\\n    function setSpreadBasisPointsIfChainError(uint256 _spreadBasisPointsIfChainError) external override onlyGov {\\n        spreadBasisPointsIfChainError = _spreadBasisPointsIfChainError;\\n    }\\n\\n    function setMinBlockInterval(uint256 _minBlockInterval) external override onlyGov {\\n        minBlockInterval = _minBlockInterval;\\n    }\\n\\n    function setIsSpreadEnabled(bool _isSpreadEnabled) external override onlyGov {\\n        isSpreadEnabled = _isSpreadEnabled;\\n    }\\n\\n    function setMaxDeviationBasisPoints(uint256 _maxDeviationBasisPoints) external override onlyGov {\\n        maxDeviationBasisPoints = _maxDeviationBasisPoints;\\n    }\\n\\n    function setMaxCumulativeDeltaDiffs(address[] memory _tokens,  uint256[] memory _maxCumulativeDeltaDiffs) external override onlyGov {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            maxCumulativeDeltaDiffs[token] = _maxCumulativeDeltaDiffs[i];\\n        }\\n    }\\n\\n    function setPriceDataInterval(uint256 _priceDataInterval) external override onlyGov {\\n        priceDataInterval = _priceDataInterval;\\n    }\\n\\n    function setLastUpdatedAt(uint256 _lastUpdatedAt) external onlyGov {\\n        lastUpdatedAt = _lastUpdatedAt;\\n    }\\n\\n    function setMinAuthorizations(uint256 _minAuthorizations) external onlyTokenManager {\\n        minAuthorizations = _minAuthorizations;\\n    }\\n\\n    function setTokens(address[] memory _tokens, uint256[] memory _tokenPrecisions) external onlyGov {\\n        require(_tokens.length == _tokenPrecisions.length, \\\"FastPriceFeed: invalid lengths\\\");\\n        tokens = _tokens;\\n        tokenPrecisions = _tokenPrecisions;\\n    }\\n\\n    function setPrices(address[] memory _tokens, uint256[] memory _prices, uint256 _timestamp) external onlyUpdater {\\n        bool shouldUpdate = _setLastUpdatedValues(_timestamp);\\n\\n        if (shouldUpdate) {\\n            address _fastPriceEvents = fastPriceEvents;\\n            address _vaultPriceFeed = vaultPriceFeed;\\n\\n            for (uint256 i = 0; i < _tokens.length; i++) {\\n                address token = _tokens[i];\\n                _setPrice(token, _prices[i], _vaultPriceFeed, _fastPriceEvents);\\n            }\\n        }\\n    }\\n\\n    function setCompactedPrices(uint256[] memory _priceBitArray, uint256 _timestamp) external onlyUpdater {\\n        bool shouldUpdate = _setLastUpdatedValues(_timestamp);\\n\\n        if (shouldUpdate) {\\n            address _fastPriceEvents = fastPriceEvents;\\n            address _vaultPriceFeed = vaultPriceFeed;\\n\\n            for (uint256 i = 0; i < _priceBitArray.length; i++) {\\n                uint256 priceBits = _priceBitArray[i];\\n\\n                for (uint256 j = 0; j < 8; j++) {\\n                    uint256 index = i * 8 + j;\\n                    if (index >= tokens.length) { return; }\\n\\n                    uint256 startBit = 32 * j;\\n                    uint256 price = (priceBits >> startBit) & BITMASK_32;\\n\\n                    address token = tokens[i * 8 + j];\\n                    uint256 tokenPrecision = tokenPrecisions[i * 8 + j];\\n                    uint256 adjustedPrice = price.mul(PRICE_PRECISION).div(tokenPrecision);\\n\\n                    _setPrice(token, adjustedPrice, _vaultPriceFeed, _fastPriceEvents);\\n                }\\n            }\\n        }\\n    }\\n\\n    function setPricesWithBits(uint256 _priceBits, uint256 _timestamp) external onlyUpdater {\\n        _setPricesWithBits(_priceBits, _timestamp);\\n    }\\n\\n    function setPricesWithBitsAndExecute(\\n        uint256 _priceBits,\\n        uint256 _timestamp,\\n        uint256 _endIndexForIncreasePositions,\\n        uint256 _endIndexForDecreasePositions,\\n        uint256 _maxIncreasePositions,\\n        uint256 _maxDecreasePositions\\n    ) external onlyUpdater {\\n        _setPricesWithBits(_priceBits, _timestamp);\\n\\n        IPositionRouter _positionRouter = IPositionRouter(positionRouter);\\n        uint256 maxEndIndexForIncrease = _positionRouter.increasePositionRequestKeysStart().add(_maxIncreasePositions);\\n        uint256 maxEndIndexForDecrease = _positionRouter.increasePositionRequestKeysStart().add(_maxDecreasePositions);\\n\\n        if (_endIndexForIncreasePositions > maxEndIndexForIncrease) {\\n            _endIndexForIncreasePositions = maxEndIndexForIncrease;\\n        }\\n\\n        if (_endIndexForDecreasePositions > maxEndIndexForDecrease) {\\n            _endIndexForDecreasePositions = maxEndIndexForDecrease;\\n        }\\n\\n        _positionRouter.executeIncreasePositions(_endIndexForIncreasePositions, payable(msg.sender));\\n        _positionRouter.executeDecreasePositions(_endIndexForDecreasePositions, payable(msg.sender));\\n    }\\n\\n    function disableFastPrice() external onlySigner {\\n        require(!disableFastPriceVotes[msg.sender], \\\"FastPriceFeed: already voted\\\");\\n        disableFastPriceVotes[msg.sender] = true;\\n        disableFastPriceVoteCount = disableFastPriceVoteCount.add(1);\\n\\n        emit DisableFastPrice(msg.sender);\\n    }\\n\\n    function enableFastPrice() external onlySigner {\\n        require(disableFastPriceVotes[msg.sender], \\\"FastPriceFeed: already enabled\\\");\\n        disableFastPriceVotes[msg.sender] = false;\\n        disableFastPriceVoteCount = disableFastPriceVoteCount.sub(1);\\n\\n        emit EnableFastPrice(msg.sender);\\n    }\\n\\n    // under regular operation, the fastPrice (prices[token]) is returned and there is no spread returned from this function,\\n    // though VaultPriceFeed might apply its own spread\\n    //\\n    // if the fastPrice has not been updated within priceDuration then it is ignored and only _refPrice with a spread is used (spread: spreadBasisPointsIfInactive)\\n    // in case the fastPrice has not been updated for maxPriceUpdateDelay then the _refPrice with a larger spread is used (spread: spreadBasisPointsIfChainError)\\n    //\\n    // there will be a spread from the _refPrice to the fastPrice in the following cases:\\n    // - in case isSpreadEnabled is set to true\\n    // - in case the maxDeviationBasisPoints between _refPrice and fastPrice is exceeded\\n    // - in case watchers flag an issue\\n    // - in case the cumulativeFastDelta exceeds the cumulativeRefDelta by the maxCumulativeDeltaDiff\\n    function getPrice(address _token, uint256 _refPrice, bool _maximise) external override view returns (uint256) {\\n        if (block.timestamp > lastUpdatedAt.add(maxPriceUpdateDelay)) {\\n            if (_maximise) {\\n                return _refPrice.mul(BASIS_POINTS_DIVISOR.add(spreadBasisPointsIfChainError)).div(BASIS_POINTS_DIVISOR);\\n            }\\n\\n            return _refPrice.mul(BASIS_POINTS_DIVISOR.sub(spreadBasisPointsIfChainError)).div(BASIS_POINTS_DIVISOR);\\n        }\\n\\n        if (block.timestamp > lastUpdatedAt.add(priceDuration)) {\\n            if (_maximise) {\\n                return _refPrice.mul(BASIS_POINTS_DIVISOR.add(spreadBasisPointsIfInactive)).div(BASIS_POINTS_DIVISOR);\\n            }\\n\\n            return _refPrice.mul(BASIS_POINTS_DIVISOR.sub(spreadBasisPointsIfInactive)).div(BASIS_POINTS_DIVISOR);\\n        }\\n\\n        uint256 fastPrice = prices[_token];\\n        if (fastPrice == 0) { return _refPrice; }\\n\\n        uint256 diffBasisPoints = _refPrice > fastPrice ? _refPrice.sub(fastPrice) : fastPrice.sub(_refPrice);\\n        diffBasisPoints = diffBasisPoints.mul(BASIS_POINTS_DIVISOR).div(_refPrice);\\n\\n        // create a spread between the _refPrice and the fastPrice if the maxDeviationBasisPoints is exceeded\\n        // or if watchers have flagged an issue with the fast price\\n        bool hasSpread = !favorFastPrice(_token) || diffBasisPoints > maxDeviationBasisPoints;\\n\\n        if (hasSpread) {\\n            // return the higher of the two prices\\n            if (_maximise) {\\n                return _refPrice > fastPrice ? _refPrice : fastPrice;\\n            }\\n\\n            // return the lower of the two prices\\n            return _refPrice < fastPrice ? _refPrice : fastPrice;\\n        }\\n\\n        return fastPrice;\\n    }\\n\\n    function favorFastPrice(address _token) public view returns (bool) {\\n        if (isSpreadEnabled) {\\n            return false;\\n        }\\n\\n        if (disableFastPriceVoteCount >= minAuthorizations) {\\n            // force a spread if watchers have flagged an issue with the fast price\\n            return false;\\n        }\\n\\n        (/* uint256 prevRefPrice */, /* uint256 refTime */, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta) = getPriceData(_token);\\n        if (cumulativeFastDelta > cumulativeRefDelta && cumulativeFastDelta.sub(cumulativeRefDelta) > maxCumulativeDeltaDiffs[_token]) {\\n            // force a spread if the cumulative delta for the fast price feed exceeds the cumulative delta\\n            // for the Chainlink price feed by the maxCumulativeDeltaDiff allowed\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    function getPriceData(address _token) public view returns (uint256, uint256, uint256, uint256) {\\n        PriceDataItem memory data = priceData[_token];\\n        return (uint256(data.refPrice), uint256(data.refTime), uint256(data.cumulativeRefDelta), uint256(data.cumulativeFastDelta));\\n    }\\n\\n    function _setPricesWithBits(uint256 _priceBits, uint256 _timestamp) private {\\n        bool shouldUpdate = _setLastUpdatedValues(_timestamp);\\n\\n        if (shouldUpdate) {\\n            address _fastPriceEvents = fastPriceEvents;\\n            address _vaultPriceFeed = vaultPriceFeed;\\n\\n            for (uint256 j = 0; j < 8; j++) {\\n                uint256 index = j;\\n                if (index >= tokens.length) { return; }\\n\\n                uint256 startBit = 32 * j;\\n                uint256 price = (_priceBits >> startBit) & BITMASK_32;\\n\\n                address token = tokens[j];\\n                uint256 tokenPrecision = tokenPrecisions[j];\\n                uint256 adjustedPrice = price.mul(PRICE_PRECISION).div(tokenPrecision);\\n\\n                _setPrice(token, adjustedPrice, _vaultPriceFeed, _fastPriceEvents);\\n            }\\n        }\\n    }\\n\\n    function _setPrice(address _token, uint256 _price, address _vaultPriceFeed, address _fastPriceEvents) private {\\n        if (_vaultPriceFeed != address(0)) {\\n            uint256 refPrice = IVaultPriceFeed(_vaultPriceFeed).getLatestPrimaryPrice(_token);\\n            uint256 fastPrice = prices[_token];\\n\\n            (uint256 prevRefPrice, uint256 refTime, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta) = getPriceData(_token);\\n\\n            if (prevRefPrice > 0) {\\n                uint256 refDeltaAmount = refPrice > prevRefPrice ? refPrice.sub(prevRefPrice) : prevRefPrice.sub(refPrice);\\n                uint256 fastDeltaAmount = fastPrice > _price ? fastPrice.sub(_price) : _price.sub(fastPrice);\\n\\n                // reset cumulative delta values if it is a new time window\\n                if (refTime.div(priceDataInterval) != block.timestamp.div(priceDataInterval)) {\\n                    cumulativeRefDelta = 0;\\n                    cumulativeFastDelta = 0;\\n                }\\n\\n                cumulativeRefDelta = cumulativeRefDelta.add(refDeltaAmount.mul(CUMULATIVE_DELTA_PRECISION).div(prevRefPrice));\\n                cumulativeFastDelta = cumulativeFastDelta.add(fastDeltaAmount.mul(CUMULATIVE_DELTA_PRECISION).div(fastPrice));\\n            }\\n\\n            if (cumulativeFastDelta > cumulativeRefDelta && cumulativeFastDelta.sub(cumulativeRefDelta) > maxCumulativeDeltaDiffs[_token]) {\\n                emit MaxCumulativeDeltaDiffExceeded(_token, refPrice, fastPrice, cumulativeRefDelta, cumulativeFastDelta);\\n            }\\n\\n            _setPriceData(_token, refPrice, cumulativeRefDelta, cumulativeFastDelta);\\n            emit PriceData(_token, refPrice, fastPrice, cumulativeRefDelta, cumulativeFastDelta);\\n        }\\n\\n        prices[_token] = _price;\\n        _emitPriceEvent(_fastPriceEvents, _token, _price);\\n    }\\n\\n    function _setPriceData(address _token, uint256 _refPrice, uint256 _cumulativeRefDelta, uint256 _cumulativeFastDelta) private {\\n        require(_refPrice < MAX_REF_PRICE, \\\"FastPriceFeed: invalid refPrice\\\");\\n        // skip validation of block.timestamp, it should only be out of range after the year 2100\\n        require(_cumulativeRefDelta < MAX_CUMULATIVE_REF_DELTA, \\\"FastPriceFeed: invalid cumulativeRefDelta\\\");\\n        require(_cumulativeFastDelta < MAX_CUMULATIVE_FAST_DELTA, \\\"FastPriceFeed: invalid cumulativeFastDelta\\\");\\n\\n        priceData[_token] = PriceDataItem(\\n            uint160(_refPrice),\\n            uint32(block.timestamp),\\n            uint32(_cumulativeRefDelta),\\n            uint32(_cumulativeFastDelta)\\n        );\\n    }\\n\\n    function _emitPriceEvent(address _fastPriceEvents, address _token, uint256 _price) private {\\n        if (_fastPriceEvents == address(0)) {\\n            return;\\n        }\\n\\n        IFastPriceEvents(_fastPriceEvents).emitPriceEvent(_token, _price);\\n    }\\n\\n    function _setLastUpdatedValues(uint256 _timestamp) private returns (bool) {\\n        if (minBlockInterval > 0) {\\n            require(block.number.sub(lastUpdatedBlock) >= minBlockInterval, \\\"FastPriceFeed: minBlockInterval not yet passed\\\");\\n        }\\n\\n        uint256 _maxTimeDeviation = maxTimeDeviation;\\n        require(_timestamp > block.timestamp.sub(_maxTimeDeviation), \\\"FastPriceFeed: _timestamp below allowed range\\\");\\n        require(_timestamp < block.timestamp.add(_maxTimeDeviation), \\\"FastPriceFeed: _timestamp exceeds allowed range\\\");\\n\\n        // do not update prices if _timestamp is before the current lastUpdatedAt value\\n        if (_timestamp < lastUpdatedAt) {\\n            return false;\\n        }\\n\\n        lastUpdatedAt = _timestamp;\\n        lastUpdatedBlock = block.number;\\n\\n        return true;\\n    }\\n}\\n\"\n    },\n    \"contracts/oracle/interfaces/ISecondaryPriceFeed.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ISecondaryPriceFeed {\\n    function getPrice(address _token, uint256 _referencePrice, bool _maximise) external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/oracle/interfaces/IFastPriceEvents.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IFastPriceEvents {\\n    function emitPriceEvent(address _token, uint256 _price) external;\\n}\\n\"\n    },\n    \"contracts/oracle/FastPriceEvents.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IFastPriceEvents.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\npragma solidity 0.6.12;\\n\\ncontract FastPriceEvents is IFastPriceEvents, Governable {\\n\\n    mapping (address => bool) public isPriceFeed;\\n    event PriceUpdate(address token, uint256 price, address priceFeed);\\n\\n    function setIsPriceFeed(address _priceFeed, bool _isPriceFeed) external onlyGov {\\n      isPriceFeed[_priceFeed] = _isPriceFeed;\\n    }\\n\\n    function emitPriceEvent(address _token, uint256 _price) external override {\\n      require(isPriceFeed[msg.sender], \\\"FastPriceEvents: invalid sender\\\");\\n      emit PriceUpdate(_token, _price, msg.sender);\\n    }\\n}\\n\"\n    },\n    \"contracts/core/VaultPriceFeed.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../oracle/interfaces/IPriceFeed.sol\\\";\\nimport \\\"../oracle/interfaces/ISecondaryPriceFeed.sol\\\";\\nimport \\\"../oracle/interfaces/IChainlinkFlags.sol\\\";\\nimport \\\"../amm/interfaces/IPancakePair.sol\\\";\\n\\npragma solidity 0.6.12;\\n\\ncontract VaultPriceFeed is IVaultPriceFeed {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\\n    uint256 public constant ONE_USD = PRICE_PRECISION;\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant MAX_SPREAD_BASIS_POINTS = 50;\\n    uint256 public constant MAX_ADJUSTMENT_INTERVAL = 2 hours;\\n    uint256 public constant MAX_ADJUSTMENT_BASIS_POINTS = 20;\\n\\n    // Identifier of the Sequencer offline flag on the Flags contract\\n    address constant private FLAG_ARBITRUM_SEQ_OFFLINE = address(bytes20(bytes32(uint256(keccak256(\\\"chainlink.flags.arbitrum-seq-offline\\\")) - 1)));\\n\\n    address public gov;\\n    address public chainlinkFlags;\\n\\n    bool public isAmmEnabled = true;\\n    bool public isSecondaryPriceEnabled = true;\\n    bool public useV2Pricing = false;\\n    bool public favorPrimaryPrice = false;\\n    uint256 public priceSampleSpace = 3;\\n    uint256 public maxStrictPriceDeviation = 0;\\n    address public secondaryPriceFeed;\\n    uint256 public spreadThresholdBasisPoints = 30;\\n\\n    address public btc;\\n    address public eth;\\n    address public bnb;\\n    address public bnbBusd;\\n    address public ethBnb;\\n    address public btcBnb;\\n\\n    mapping (address => address) public priceFeeds;\\n    mapping (address => uint256) public priceDecimals;\\n    mapping (address => uint256) public spreadBasisPoints;\\n    // Chainlink can return prices for stablecoins\\n    // that differs from 1 USD by a larger percentage than stableSwapFeeBasisPoints\\n    // we use strictStableTokens to cap the price to 1 USD\\n    // this allows us to configure stablecoins like DAI as being a stableToken\\n    // while not being a strictStableToken\\n    mapping (address => bool) public strictStableTokens;\\n\\n    mapping (address => uint256) public override adjustmentBasisPoints;\\n    mapping (address => bool) public override isAdjustmentAdditive;\\n    mapping (address => uint256) public lastAdjustmentTimings;\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"VaultPriceFeed: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n\\n    function setChainlinkFlags(address _chainlinkFlags) external onlyGov {\\n        chainlinkFlags = _chainlinkFlags;\\n    }\\n\\n    function setAdjustment(address _token, bool _isAdditive, uint256 _adjustmentBps) external override onlyGov {\\n        require(\\n            lastAdjustmentTimings[_token].add(MAX_ADJUSTMENT_INTERVAL) < block.timestamp,\\n            \\\"VaultPriceFeed: adjustment frequency exceeded\\\"\\n        );\\n        require(_adjustmentBps <= MAX_ADJUSTMENT_BASIS_POINTS, \\\"invalid _adjustmentBps\\\");\\n        isAdjustmentAdditive[_token] = _isAdditive;\\n        adjustmentBasisPoints[_token] = _adjustmentBps;\\n        lastAdjustmentTimings[_token] = block.timestamp;\\n    }\\n\\n    function setUseV2Pricing(bool _useV2Pricing) external override onlyGov {\\n        useV2Pricing = _useV2Pricing;\\n    }\\n\\n    function setIsAmmEnabled(bool _isEnabled) external override onlyGov {\\n        isAmmEnabled = _isEnabled;\\n    }\\n\\n    function setIsSecondaryPriceEnabled(bool _isEnabled) external override onlyGov {\\n        isSecondaryPriceEnabled = _isEnabled;\\n    }\\n\\n    function setSecondaryPriceFeed(address _secondaryPriceFeed) external onlyGov {\\n        secondaryPriceFeed = _secondaryPriceFeed;\\n    }\\n\\n    function setTokens(address _btc, address _eth, address _bnb) external onlyGov {\\n        btc = _btc;\\n        eth = _eth;\\n        bnb = _bnb;\\n    }\\n\\n    function setPairs(address _bnbBusd, address _ethBnb, address _btcBnb) external onlyGov {\\n        bnbBusd = _bnbBusd;\\n        ethBnb = _ethBnb;\\n        btcBnb = _btcBnb;\\n    }\\n\\n    function setSpreadBasisPoints(address _token, uint256 _spreadBasisPoints) external override onlyGov {\\n        require(_spreadBasisPoints <= MAX_SPREAD_BASIS_POINTS, \\\"VaultPriceFeed: invalid _spreadBasisPoints\\\");\\n        spreadBasisPoints[_token] = _spreadBasisPoints;\\n    }\\n\\n    function setSpreadThresholdBasisPoints(uint256 _spreadThresholdBasisPoints) external override onlyGov {\\n        spreadThresholdBasisPoints = _spreadThresholdBasisPoints;\\n    }\\n\\n    function setFavorPrimaryPrice(bool _favorPrimaryPrice) external override onlyGov {\\n        favorPrimaryPrice = _favorPrimaryPrice;\\n    }\\n\\n    function setPriceSampleSpace(uint256 _priceSampleSpace) external override onlyGov {\\n        require(_priceSampleSpace > 0, \\\"VaultPriceFeed: invalid _priceSampleSpace\\\");\\n        priceSampleSpace = _priceSampleSpace;\\n    }\\n\\n    function setMaxStrictPriceDeviation(uint256 _maxStrictPriceDeviation) external override onlyGov {\\n        maxStrictPriceDeviation = _maxStrictPriceDeviation;\\n    }\\n\\n    function setTokenConfig(\\n        address _token,\\n        address _priceFeed,\\n        uint256 _priceDecimals,\\n        bool _isStrictStable\\n    ) external override onlyGov {\\n        priceFeeds[_token] = _priceFeed;\\n        priceDecimals[_token] = _priceDecimals;\\n        strictStableTokens[_token] = _isStrictStable;\\n    }\\n\\n    function getPrice(address _token, bool _maximise, bool _includeAmmPrice, bool /* _useSwapPricing */) public override view returns (uint256) {\\n        uint256 price = useV2Pricing ? getPriceV2(_token, _maximise, _includeAmmPrice) : getPriceV1(_token, _maximise, _includeAmmPrice);\\n\\n        uint256 adjustmentBps = adjustmentBasisPoints[_token];\\n        if (adjustmentBps > 0) {\\n            bool isAdditive = isAdjustmentAdditive[_token];\\n            if (isAdditive) {\\n                price = price.mul(BASIS_POINTS_DIVISOR.add(adjustmentBps)).div(BASIS_POINTS_DIVISOR);\\n            } else {\\n                price = price.mul(BASIS_POINTS_DIVISOR.sub(adjustmentBps)).div(BASIS_POINTS_DIVISOR);\\n            }\\n        }\\n\\n        return price;\\n    }\\n\\n    function getPriceV1(address _token, bool _maximise, bool _includeAmmPrice) public view returns (uint256) {\\n        uint256 price = getPrimaryPrice(_token, _maximise);\\n\\n        if (_includeAmmPrice && isAmmEnabled) {\\n            uint256 ammPrice = getAmmPrice(_token);\\n            if (ammPrice > 0) {\\n                if (_maximise && ammPrice > price) {\\n                    price = ammPrice;\\n                }\\n                if (!_maximise && ammPrice < price) {\\n                    price = ammPrice;\\n                }\\n            }\\n        }\\n\\n        if (isSecondaryPriceEnabled) {\\n            price = getSecondaryPrice(_token, price, _maximise);\\n        }\\n\\n        if (strictStableTokens[_token]) {\\n            uint256 delta = price > ONE_USD ? price.sub(ONE_USD) : ONE_USD.sub(price);\\n            if (delta <= maxStrictPriceDeviation) {\\n                return ONE_USD;\\n            }\\n\\n            // if _maximise and price is e.g. 1.02, return 1.02\\n            if (_maximise && price > ONE_USD) {\\n                return price;\\n            }\\n\\n            // if !_maximise and price is e.g. 0.98, return 0.98\\n            if (!_maximise && price < ONE_USD) {\\n                return price;\\n            }\\n\\n            return ONE_USD;\\n        }\\n\\n        uint256 _spreadBasisPoints = spreadBasisPoints[_token];\\n\\n        if (_maximise) {\\n            return price.mul(BASIS_POINTS_DIVISOR.add(_spreadBasisPoints)).div(BASIS_POINTS_DIVISOR);\\n        }\\n\\n        return price.mul(BASIS_POINTS_DIVISOR.sub(_spreadBasisPoints)).div(BASIS_POINTS_DIVISOR);\\n    }\\n\\n    function getPriceV2(address _token, bool _maximise, bool _includeAmmPrice) public view returns (uint256) {\\n        uint256 price = getPrimaryPrice(_token, _maximise);\\n\\n        if (_includeAmmPrice && isAmmEnabled) {\\n            price = getAmmPriceV2(_token, _maximise, price);\\n        }\\n\\n        if (isSecondaryPriceEnabled) {\\n            price = getSecondaryPrice(_token, price, _maximise);\\n        }\\n\\n        if (strictStableTokens[_token]) {\\n            uint256 delta = price > ONE_USD ? price.sub(ONE_USD) : ONE_USD.sub(price);\\n            if (delta <= maxStrictPriceDeviation) {\\n                return ONE_USD;\\n            }\\n\\n            // if _maximise and price is e.g. 1.02, return 1.02\\n            if (_maximise && price > ONE_USD) {\\n                return price;\\n            }\\n\\n            // if !_maximise and price is e.g. 0.98, return 0.98\\n            if (!_maximise && price < ONE_USD) {\\n                return price;\\n            }\\n\\n            return ONE_USD;\\n        }\\n\\n        uint256 _spreadBasisPoints = spreadBasisPoints[_token];\\n\\n        if (_maximise) {\\n            return price.mul(BASIS_POINTS_DIVISOR.add(_spreadBasisPoints)).div(BASIS_POINTS_DIVISOR);\\n        }\\n\\n        return price.mul(BASIS_POINTS_DIVISOR.sub(_spreadBasisPoints)).div(BASIS_POINTS_DIVISOR);\\n    }\\n\\n    function getAmmPriceV2(address _token, bool _maximise, uint256 _primaryPrice) public view returns (uint256) {\\n        uint256 ammPrice = getAmmPrice(_token);\\n        if (ammPrice == 0) {\\n            return _primaryPrice;\\n        }\\n\\n        uint256 diff = ammPrice > _primaryPrice ? ammPrice.sub(_primaryPrice) : _primaryPrice.sub(ammPrice);\\n        if (diff.mul(BASIS_POINTS_DIVISOR) < _primaryPrice.mul(spreadThresholdBasisPoints)) {\\n            if (favorPrimaryPrice) {\\n                return _primaryPrice;\\n            }\\n            return ammPrice;\\n        }\\n\\n        if (_maximise && ammPrice > _primaryPrice) {\\n            return ammPrice;\\n        }\\n\\n        if (!_maximise && ammPrice < _primaryPrice) {\\n            return ammPrice;\\n        }\\n\\n        return _primaryPrice;\\n    }\\n\\n    function getLatestPrimaryPrice(address _token) public override view returns (uint256) {\\n        address priceFeedAddress = priceFeeds[_token];\\n        require(priceFeedAddress != address(0), \\\"VaultPriceFeed: invalid price feed\\\");\\n\\n        IPriceFeed priceFeed = IPriceFeed(priceFeedAddress);\\n\\n        int256 price = priceFeed.latestAnswer();\\n        require(price > 0, \\\"VaultPriceFeed: invalid price\\\");\\n\\n        return uint256(price);\\n    }\\n\\n    function getPrimaryPrice(address _token, bool _maximise) public override view returns (uint256) {\\n        address priceFeedAddress = priceFeeds[_token];\\n        require(priceFeedAddress != address(0), \\\"VaultPriceFeed: invalid price feed\\\");\\n\\n        if (chainlinkFlags != address(0)) {\\n            bool isRaised = IChainlinkFlags(chainlinkFlags).getFlag(FLAG_ARBITRUM_SEQ_OFFLINE);\\n            if (isRaised) {\\n                    // If flag is raised we shouldn't perform any critical operations\\n                revert(\\\"Chainlink feeds are not being updated\\\");\\n            }\\n        }\\n\\n        IPriceFeed priceFeed = IPriceFeed(priceFeedAddress);\\n\\n        uint256 price = 0;\\n        uint80 roundId = priceFeed.latestRound();\\n\\n        for (uint80 i = 0; i < priceSampleSpace; i++) {\\n            if (roundId <= i) { break; }\\n            uint256 p;\\n\\n            if (i == 0) {\\n                int256 _p = priceFeed.latestAnswer();\\n                require(_p > 0, \\\"VaultPriceFeed: invalid price\\\");\\n                p = uint256(_p);\\n            } else {\\n                (, int256 _p, , ,) = priceFeed.getRoundData(roundId - i);\\n                require(_p > 0, \\\"VaultPriceFeed: invalid price\\\");\\n                p = uint256(_p);\\n            }\\n\\n            if (price == 0) {\\n                price = p;\\n                continue;\\n            }\\n\\n            if (_maximise && p > price) {\\n                price = p;\\n                continue;\\n            }\\n\\n            if (!_maximise && p < price) {\\n                price = p;\\n            }\\n        }\\n\\n        require(price > 0, \\\"VaultPriceFeed: could not fetch price\\\");\\n        // normalise price precision\\n        uint256 _priceDecimals = priceDecimals[_token];\\n        return price.mul(PRICE_PRECISION).div(10 ** _priceDecimals);\\n    }\\n\\n    function getSecondaryPrice(address _token, uint256 _referencePrice, bool _maximise) public view returns (uint256) {\\n        if (secondaryPriceFeed == address(0)) { return _referencePrice; }\\n        return ISecondaryPriceFeed(secondaryPriceFeed).getPrice(_token, _referencePrice, _maximise);\\n    }\\n\\n    function getAmmPrice(address _token) public override view returns (uint256) {\\n        if (_token == bnb) {\\n            // for bnbBusd, reserve0: BNB, reserve1: BUSD\\n            return getPairPrice(bnbBusd, true);\\n        }\\n\\n        if (_token == eth) {\\n            uint256 price0 = getPairPrice(bnbBusd, true);\\n            // for ethBnb, reserve0: ETH, reserve1: BNB\\n            uint256 price1 = getPairPrice(ethBnb, true);\\n            // this calculation could overflow if (price0 / 10**30) * (price1 / 10**30) is more than 10**17\\n            return price0.mul(price1).div(PRICE_PRECISION);\\n        }\\n\\n        if (_token == btc) {\\n            uint256 price0 = getPairPrice(bnbBusd, true);\\n            // for btcBnb, reserve0: BTC, reserve1: BNB\\n            uint256 price1 = getPairPrice(btcBnb, true);\\n            // this calculation could overflow if (price0 / 10**30) * (price1 / 10**30) is more than 10**17\\n            return price0.mul(price1).div(PRICE_PRECISION);\\n        }\\n\\n        return 0;\\n    }\\n\\n    // if divByReserve0: calculate price as reserve1 / reserve0\\n    // if !divByReserve1: calculate price as reserve0 / reserve1\\n    function getPairPrice(address _pair, bool _divByReserve0) public view returns (uint256) {\\n        (uint256 reserve0, uint256 reserve1, ) = IPancakePair(_pair).getReserves();\\n        if (_divByReserve0) {\\n            if (reserve0 == 0) { return 0; }\\n            return reserve1.mul(PRICE_PRECISION).div(reserve0);\\n        }\\n        if (reserve1 == 0) { return 0; }\\n        return reserve0.mul(PRICE_PRECISION).div(reserve1);\\n    }\\n}\\n\"\n    },\n    \"contracts/oracle/interfaces/IPriceFeed.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPriceFeed {\\n    function description() external view returns (string memory);\\n    function aggregator() external view returns (address);\\n    function latestAnswer() external view returns (int256);\\n    function latestRound() external view returns (uint80);\\n    function getRoundData(uint80 roundId) external view returns (uint80, int256, uint256, uint256, uint80);\\n}\\n\"\n    },\n    \"contracts/oracle/interfaces/IChainlinkFlags.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IChainlinkFlags {\\n  function getFlag(address) external view returns (bool);\\n}\\n\"\n    },\n    \"contracts/amm/interfaces/IPancakePair.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IPancakePair {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n}\\n\"\n    },\n    \"contracts/amm/PancakePair.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./interfaces/IPancakePair.sol\\\";\\n\\ncontract PancakePair is IPancakePair {\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    function setReserves(uint256 balance0, uint256 balance1) external {\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = uint32(block.timestamp);\\n    }\\n\\n    function getReserves() public override view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n}\\n\"\n    },\n    \"contracts/oracle/PriceFeed.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./interfaces/IPriceFeed.sol\\\";\\n\\ncontract PriceFeed is IPriceFeed {\\n    int256 public answer;\\n    uint80 public roundId;\\n    string public override description = \\\"PriceFeed\\\";\\n    address public override aggregator;\\n\\n    uint256 public decimals;\\n\\n    address public gov;\\n\\n    mapping (uint80 => int256) public answers;\\n    mapping (address => bool) public isAdmin;\\n\\n    constructor() public {\\n        gov = msg.sender;\\n        isAdmin[msg.sender] = true;\\n    }\\n\\n    function setAdmin(address _account, bool _isAdmin) public {\\n        require(msg.sender == gov, \\\"PriceFeed: forbidden\\\");\\n        isAdmin[_account] = _isAdmin;\\n    }\\n\\n    function latestAnswer() public override view returns (int256) {\\n        return answer;\\n    }\\n\\n    function latestRound() public override view returns (uint80) {\\n        return roundId;\\n    }\\n\\n    function setLatestAnswer(int256 _answer) public {\\n        require(isAdmin[msg.sender], \\\"PriceFeed: forbidden\\\");\\n        roundId = roundId + 1;\\n        answer = _answer;\\n        answers[roundId] = _answer;\\n    }\\n\\n    // returns roundId, answer, startedAt, updatedAt, answeredInRound\\n    function getRoundData(uint80 _roundId) public override view\\n        returns (uint80, int256, uint256, uint256, uint80)\\n    {\\n        return (_roundId, answers[_roundId], 0, 0, 0);\\n    }\\n}\\n\"\n    },\n    \"contracts/core/Router.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/Address.sol\\\";\\n\\nimport \\\"../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\n\\ncontract Router is IRouter {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    address public gov;\\n\\n    // wrapped BNB / ETH\\n    address public weth;\\n    address public usdg;\\n    address public vault;\\n\\n    mapping (address => bool) public plugins;\\n    mapping (address => mapping (address => bool)) public approvedPlugins;\\n\\n    event Swap(address account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Router: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(address _vault, address _usdg, address _weth) public {\\n        vault = _vault;\\n        usdg = _usdg;\\n        weth = _weth;\\n\\n        gov = msg.sender;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == weth, \\\"Router: invalid sender\\\");\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n\\n    function addPlugin(address _plugin) external override onlyGov {\\n        plugins[_plugin] = true;\\n    }\\n\\n    function removePlugin(address _plugin) external onlyGov {\\n        plugins[_plugin] = false;\\n    }\\n\\n    function approvePlugin(address _plugin) external {\\n        approvedPlugins[msg.sender][_plugin] = true;\\n    }\\n\\n    function denyPlugin(address _plugin) external {\\n        approvedPlugins[msg.sender][_plugin] = false;\\n    }\\n\\n    function pluginTransfer(address _token, address _account, address _receiver, uint256 _amount) external override {\\n        _validatePlugin(_account);\\n        IERC20(_token).safeTransferFrom(_account, _receiver, _amount);\\n    }\\n\\n    function pluginIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external override {\\n        _validatePlugin(_account);\\n        IVault(vault).increasePosition(_account, _collateralToken, _indexToken, _sizeDelta, _isLong);\\n    }\\n\\n    function pluginDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external override returns (uint256) {\\n        _validatePlugin(_account);\\n        return IVault(vault).decreasePosition(_account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, _receiver);\\n    }\\n\\n    function directPoolDeposit(address _token, uint256 _amount) external {\\n        IERC20(_token).safeTransferFrom(_sender(), vault, _amount);\\n        IVault(vault).directPoolDeposit(_token);\\n    }\\n\\n    function swap(address[] memory _path, uint256 _amountIn, uint256 _minOut, address _receiver) public override {\\n        IERC20(_path[0]).safeTransferFrom(_sender(), vault, _amountIn);\\n        uint256 amountOut = _swap(_path, _minOut, _receiver);\\n        emit Swap(msg.sender, _path[0], _path[_path.length - 1], _amountIn, amountOut);\\n    }\\n\\n    function swapETHToTokens(address[] memory _path, uint256 _minOut, address _receiver) external payable {\\n        require(_path[0] == weth, \\\"Router: invalid _path\\\");\\n        _transferETHToVault();\\n        uint256 amountOut = _swap(_path, _minOut, _receiver);\\n        emit Swap(msg.sender, _path[0], _path[_path.length - 1], msg.value, amountOut);\\n    }\\n\\n    function swapTokensToETH(address[] memory _path, uint256 _amountIn, uint256 _minOut, address payable _receiver) external {\\n        require(_path[_path.length - 1] == weth, \\\"Router: invalid _path\\\");\\n        IERC20(_path[0]).safeTransferFrom(_sender(), vault, _amountIn);\\n        uint256 amountOut = _swap(_path, _minOut, address(this));\\n        _transferOutETH(amountOut, _receiver);\\n        emit Swap(msg.sender, _path[0], _path[_path.length - 1], _amountIn, amountOut);\\n    }\\n\\n    function increasePosition(address[] memory _path, address _indexToken, uint256 _amountIn, uint256 _minOut, uint256 _sizeDelta, bool _isLong, uint256 _price) external {\\n        if (_amountIn > 0) {\\n            IERC20(_path[0]).safeTransferFrom(_sender(), vault, _amountIn);\\n        }\\n        if (_path.length > 1 && _amountIn > 0) {\\n            uint256 amountOut = _swap(_path, _minOut, address(this));\\n            IERC20(_path[_path.length - 1]).safeTransfer(vault, amountOut);\\n        }\\n        _increasePosition(_path[_path.length - 1], _indexToken, _sizeDelta, _isLong, _price);\\n    }\\n\\n    function increasePositionETH(address[] memory _path, address _indexToken, uint256 _minOut, uint256 _sizeDelta, bool _isLong, uint256 _price) external payable {\\n        require(_path[0] == weth, \\\"Router: invalid _path\\\");\\n        if (msg.value > 0) {\\n            _transferETHToVault();\\n        }\\n        if (_path.length > 1 && msg.value > 0) {\\n            uint256 amountOut = _swap(_path, _minOut, address(this));\\n            IERC20(_path[_path.length - 1]).safeTransfer(vault, amountOut);\\n        }\\n        _increasePosition(_path[_path.length - 1], _indexToken, _sizeDelta, _isLong, _price);\\n    }\\n\\n    function decreasePosition(address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver, uint256 _price) external {\\n        _decreasePosition(_collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, _receiver, _price);\\n    }\\n\\n    function decreasePositionETH(address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address payable _receiver, uint256 _price) external {\\n        uint256 amountOut = _decreasePosition(_collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, address(this), _price);\\n        _transferOutETH(amountOut, _receiver);\\n    }\\n\\n    function decreasePositionAndSwap(address[] memory _path, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver, uint256 _price, uint256 _minOut) external {\\n        uint256 amount = _decreasePosition(_path[0], _indexToken, _collateralDelta, _sizeDelta, _isLong, address(this), _price);\\n        IERC20(_path[0]).safeTransfer(vault, amount);\\n        _swap(_path, _minOut, _receiver);\\n    }\\n\\n    function decreasePositionAndSwapETH(address[] memory _path, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address payable _receiver, uint256 _price, uint256 _minOut) external {\\n        require(_path[_path.length - 1] == weth, \\\"Router: invalid _path\\\");\\n        uint256 amount = _decreasePosition(_path[0], _indexToken, _collateralDelta, _sizeDelta, _isLong, address(this), _price);\\n        IERC20(_path[0]).safeTransfer(vault, amount);\\n        uint256 amountOut = _swap(_path, _minOut, address(this));\\n        _transferOutETH(amountOut, _receiver);\\n    }\\n\\n    function _increasePosition(address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong, uint256 _price) private {\\n        if (_isLong) {\\n            require(IVault(vault).getMaxPrice(_indexToken) <= _price, \\\"Router: mark price higher than limit\\\");\\n        } else {\\n            require(IVault(vault).getMinPrice(_indexToken) >= _price, \\\"Router: mark price lower than limit\\\");\\n        }\\n\\n        IVault(vault).increasePosition(_sender(), _collateralToken, _indexToken, _sizeDelta, _isLong);\\n    }\\n\\n    function _decreasePosition(address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver, uint256 _price) private returns (uint256) {\\n        if (_isLong) {\\n            require(IVault(vault).getMinPrice(_indexToken) >= _price, \\\"Router: mark price lower than limit\\\");\\n        } else {\\n            require(IVault(vault).getMaxPrice(_indexToken) <= _price, \\\"Router: mark price higher than limit\\\");\\n        }\\n\\n        return IVault(vault).decreasePosition(_sender(), _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, _receiver);\\n    }\\n\\n    function _transferETHToVault() private {\\n        IWETH(weth).deposit{value: msg.value}();\\n        IERC20(weth).safeTransfer(vault, msg.value);\\n    }\\n\\n    function _transferOutETH(uint256 _amountOut, address payable _receiver) private {\\n        IWETH(weth).withdraw(_amountOut);\\n        _receiver.sendValue(_amountOut);\\n    }\\n\\n    function _swap(address[] memory _path, uint256 _minOut, address _receiver) private returns (uint256) {\\n        if (_path.length == 2) {\\n            return _vaultSwap(_path[0], _path[1], _minOut, _receiver);\\n        }\\n        if (_path.length == 3) {\\n            uint256 midOut = _vaultSwap(_path[0], _path[1], 0, address(this));\\n            IERC20(_path[1]).safeTransfer(vault, midOut);\\n            return _vaultSwap(_path[1], _path[2], _minOut, _receiver);\\n        }\\n\\n        revert(\\\"Router: invalid _path.length\\\");\\n    }\\n\\n    function _vaultSwap(address _tokenIn, address _tokenOut, uint256 _minOut, address _receiver) private returns (uint256) {\\n        uint256 amountOut;\\n\\n        if (_tokenOut == usdg) { // buyUSDG\\n            amountOut = IVault(vault).buyUSDG(_tokenIn, _receiver);\\n        } else if (_tokenIn == usdg) { // sellUSDG\\n            amountOut = IVault(vault).sellUSDG(_tokenOut, _receiver);\\n        } else { // swap\\n            amountOut = IVault(vault).swap(_tokenIn, _tokenOut, _receiver);\\n        }\\n\\n        require(amountOut >= _minOut, \\\"Router: insufficient amountOut\\\");\\n        return amountOut;\\n    }\\n\\n    function _sender() private view returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _validatePlugin(address _account) private view {\\n        require(plugins[msg.sender], \\\"Router: invalid plugin\\\");\\n        require(approvedPlugins[_account][msg.sender], \\\"Router: plugin not approved\\\");\\n    }\\n}\\n\"\n    },\n    \"contracts/staking/RewardRouterV2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../libraries/utils/Address.sol\\\";\\n\\nimport \\\"./interfaces/IRewardTracker.sol\\\";\\nimport \\\"./interfaces/IVester.sol\\\";\\nimport \\\"../tokens/interfaces/IMintable.sol\\\";\\nimport \\\"../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"../core/interfaces/IXlxManager.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\ncontract RewardRouterV2 is ReentrancyGuard, Governable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    bool public isInitialized;\\n\\n    address public weth;\\n\\n    address public xdx;\\n    address public esXdx;\\n    address public bnXdx;\\n\\n    address public xlx; // XDX Liquidity Provider token\\n\\n    address public stakedXdxTracker;\\n    address public bonusXdxTracker;\\n    address public feeXdxTracker;\\n\\n    address public stakedXlxTracker;\\n    address public feeXlxTracker;\\n\\n    address public xlxManager;\\n\\n    address public xdxVester;\\n    address public xlxVester;\\n\\n    mapping (address => address) public pendingReceivers;\\n\\n    event StakeXdx(address account, address token, uint256 amount);\\n    event UnstakeXdx(address account, address token, uint256 amount);\\n\\n    event StakeXlx(address account, uint256 amount);\\n    event UnstakeXlx(address account, uint256 amount);\\n\\n    receive() external payable {\\n        require(msg.sender == weth, \\\"Router: invalid sender\\\");\\n    }\\n\\n    function initialize(\\n        address _weth,\\n        address _xdx,\\n        address _esXdx,\\n        address _bnXdx,\\n        address _xlx,\\n        address _stakedXdxTracker,\\n        address _bonusXdxTracker,\\n        address _feeXdxTracker,\\n        address _feeXlxTracker,\\n        address _stakedXlxTracker,\\n        address _xlxManager,\\n        address _xdxVester,\\n        address _xlxVester\\n    ) external onlyGov {\\n        require(!isInitialized, \\\"RewardRouter: already initialized\\\");\\n        isInitialized = true;\\n\\n        weth = _weth;\\n\\n        xdx = _xdx;\\n        esXdx = _esXdx;\\n        bnXdx = _bnXdx;\\n\\n        xlx = _xlx;\\n\\n        stakedXdxTracker = _stakedXdxTracker;\\n        bonusXdxTracker = _bonusXdxTracker;\\n        feeXdxTracker = _feeXdxTracker;\\n\\n        feeXlxTracker = _feeXlxTracker;\\n        stakedXlxTracker = _stakedXlxTracker;\\n\\n        xlxManager = _xlxManager;\\n\\n        xdxVester = _xdxVester;\\n        xlxVester = _xlxVester;\\n    }\\n\\n    // to help users who accidentally send their tokens to this contract\\n    function withdrawToken(address _token, address _account, uint256 _amount) external onlyGov {\\n        IERC20(_token).safeTransfer(_account, _amount);\\n    }\\n\\n    function batchStakeXdxForAccount(address[] memory _accounts, uint256[] memory _amounts) external nonReentrant onlyGov {\\n        address _xdx = xdx;\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _stakeXdx(msg.sender, _accounts[i], _xdx, _amounts[i]);\\n        }\\n    }\\n\\n    function stakeXdxForAccount(address _account, uint256 _amount) external nonReentrant onlyGov {\\n        _stakeXdx(msg.sender, _account, xdx, _amount);\\n    }\\n\\n    function stakeXdx(uint256 _amount) external nonReentrant {\\n        _stakeXdx(msg.sender, msg.sender, xdx, _amount);\\n    }\\n\\n    function stakeEsXdx(uint256 _amount) external nonReentrant {\\n        _stakeXdx(msg.sender, msg.sender, esXdx, _amount);\\n    }\\n\\n    function unstakeXdx(uint256 _amount) external nonReentrant {\\n        _unstakeXdx(msg.sender, xdx, _amount, true);\\n    }\\n\\n    function unstakeEsXdx(uint256 _amount) external nonReentrant {\\n        _unstakeXdx(msg.sender, esXdx, _amount, true);\\n    }\\n\\n    function mintAndStakeXlx(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minXlx) external nonReentrant returns (uint256) {\\n        require(_amount > 0, \\\"RewardRouter: invalid _amount\\\");\\n\\n        address account = msg.sender;\\n        uint256 xlxAmount = IXlxManager(xlxManager).addLiquidityForAccount(account, account, _token, _amount, _minUsdg, _minXlx);\\n        IRewardTracker(feeXlxTracker).stakeForAccount(account, account, xlx, xlxAmount);\\n        IRewardTracker(stakedXlxTracker).stakeForAccount(account, account, feeXlxTracker, xlxAmount);\\n\\n        emit StakeXlx(account, xlxAmount);\\n\\n        return xlxAmount;\\n    }\\n\\n    function mintAndStakeXlxETH(uint256 _minUsdg, uint256 _minXlx) external payable nonReentrant returns (uint256) {\\n        require(msg.value > 0, \\\"RewardRouter: invalid msg.value\\\");\\n\\n        IWETH(weth).deposit{value: msg.value}();\\n        IERC20(weth).approve(xlxManager, msg.value);\\n\\n        address account = msg.sender;\\n        uint256 xlxAmount = IXlxManager(xlxManager).addLiquidityForAccount(address(this), account, weth, msg.value, _minUsdg, _minXlx);\\n\\n        IRewardTracker(feeXlxTracker).stakeForAccount(account, account, xlx, xlxAmount);\\n        IRewardTracker(stakedXlxTracker).stakeForAccount(account, account, feeXlxTracker, xlxAmount);\\n\\n        emit StakeXlx(account, xlxAmount);\\n\\n        return xlxAmount;\\n    }\\n\\n    function unstakeAndRedeemXlx(address _tokenOut, uint256 _xlxAmount, uint256 _minOut, address _receiver) external nonReentrant returns (uint256) {\\n        require(_xlxAmount > 0, \\\"RewardRouter: invalid _xlxAmount\\\");\\n\\n        address account = msg.sender;\\n        IRewardTracker(stakedXlxTracker).unstakeForAccount(account, feeXlxTracker, _xlxAmount, account);\\n        IRewardTracker(feeXlxTracker).unstakeForAccount(account, xlx, _xlxAmount, account);\\n        uint256 amountOut = IXlxManager(xlxManager).removeLiquidityForAccount(account, _tokenOut, _xlxAmount, _minOut, _receiver);\\n\\n        emit UnstakeXlx(account, _xlxAmount);\\n\\n        return amountOut;\\n    }\\n\\n    function unstakeAndRedeemXlxETH(uint256 _xlxAmount, uint256 _minOut, address payable _receiver) external nonReentrant returns (uint256) {\\n        require(_xlxAmount > 0, \\\"RewardRouter: invalid _xlxAmount\\\");\\n\\n        address account = msg.sender;\\n        IRewardTracker(stakedXlxTracker).unstakeForAccount(account, feeXlxTracker, _xlxAmount, account);\\n        IRewardTracker(feeXlxTracker).unstakeForAccount(account, xlx, _xlxAmount, account);\\n        uint256 amountOut = IXlxManager(xlxManager).removeLiquidityForAccount(account, weth, _xlxAmount, _minOut, address(this));\\n\\n        IWETH(weth).withdraw(amountOut);\\n\\n        _receiver.sendValue(amountOut);\\n\\n        emit UnstakeXlx(account, _xlxAmount);\\n\\n        return amountOut;\\n    }\\n\\n    function claim() external nonReentrant {\\n        address account = msg.sender;\\n\\n        IRewardTracker(feeXdxTracker).claimForAccount(account, account);\\n        IRewardTracker(feeXlxTracker).claimForAccount(account, account);\\n\\n        IRewardTracker(stakedXdxTracker).claimForAccount(account, account);\\n        IRewardTracker(stakedXlxTracker).claimForAccount(account, account);\\n    }\\n\\n    function claimEsXdx() external nonReentrant {\\n        address account = msg.sender;\\n\\n        IRewardTracker(stakedXdxTracker).claimForAccount(account, account);\\n        IRewardTracker(stakedXlxTracker).claimForAccount(account, account);\\n    }\\n\\n    function claimFees() external nonReentrant {\\n        address account = msg.sender;\\n\\n        IRewardTracker(feeXdxTracker).claimForAccount(account, account);\\n        IRewardTracker(feeXlxTracker).claimForAccount(account, account);\\n    }\\n\\n    function compound() external nonReentrant {\\n        _compound(msg.sender);\\n    }\\n\\n    function compoundForAccount(address _account) external nonReentrant onlyGov {\\n        _compound(_account);\\n    }\\n\\n    function handleRewards(\\n        bool _shouldClaimXdx,\\n        bool _shouldStakeXdx,\\n        bool _shouldClaimEsXdx,\\n        bool _shouldStakeEsXdx,\\n        bool _shouldStakeMultiplierPoints,\\n        bool _shouldClaimWeth,\\n        bool _shouldConvertWethToEth\\n    ) external nonReentrant {\\n        address account = msg.sender;\\n\\n        uint256 xdxAmount = 0;\\n        if (_shouldClaimXdx) {\\n            uint256 xdxAmount0 = IVester(xdxVester).claimForAccount(account, account);\\n            uint256 xdxAmount1 = IVester(xlxVester).claimForAccount(account, account);\\n            xdxAmount = xdxAmount0.add(xdxAmount1);\\n        }\\n\\n        if (_shouldStakeXdx && xdxAmount > 0) {\\n            _stakeXdx(account, account, xdx, xdxAmount);\\n        }\\n\\n        uint256 esXdxAmount = 0;\\n        if (_shouldClaimEsXdx) {\\n            uint256 esXdxAmount0 = IRewardTracker(stakedXdxTracker).claimForAccount(account, account);\\n            uint256 esXdxAmount1 = IRewardTracker(stakedXlxTracker).claimForAccount(account, account);\\n            esXdxAmount = esXdxAmount0.add(esXdxAmount1);\\n        }\\n\\n        if (_shouldStakeEsXdx && esXdxAmount > 0) {\\n            _stakeXdx(account, account, esXdx, esXdxAmount);\\n        }\\n\\n        if (_shouldStakeMultiplierPoints) {\\n            uint256 bnXdxAmount = IRewardTracker(bonusXdxTracker).claimForAccount(account, account);\\n            if (bnXdxAmount > 0) {\\n                IRewardTracker(feeXdxTracker).stakeForAccount(account, account, bnXdx, bnXdxAmount);\\n            }\\n        }\\n\\n        if (_shouldClaimWeth) {\\n            if (_shouldConvertWethToEth) {\\n                uint256 weth0 = IRewardTracker(feeXdxTracker).claimForAccount(account, address(this));\\n                uint256 weth1 = IRewardTracker(feeXlxTracker).claimForAccount(account, address(this));\\n\\n                uint256 wethAmount = weth0.add(weth1);\\n                IWETH(weth).withdraw(wethAmount);\\n\\n                payable(account).sendValue(wethAmount);\\n            } else {\\n                IRewardTracker(feeXdxTracker).claimForAccount(account, account);\\n                IRewardTracker(feeXlxTracker).claimForAccount(account, account);\\n            }\\n        }\\n    }\\n\\n    function batchCompoundForAccounts(address[] memory _accounts) external nonReentrant onlyGov {\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _compound(_accounts[i]);\\n        }\\n    }\\n\\n    function signalTransfer(address _receiver) external nonReentrant {\\n        require(IERC20(xdxVester).balanceOf(msg.sender) == 0, \\\"RewardRouter: sender has vested tokens\\\");\\n        require(IERC20(xlxVester).balanceOf(msg.sender) == 0, \\\"RewardRouter: sender has vested tokens\\\");\\n\\n        _validateReceiver(_receiver);\\n        pendingReceivers[msg.sender] = _receiver;\\n    }\\n\\n    function acceptTransfer(address _sender) external nonReentrant {\\n        require(IERC20(xdxVester).balanceOf(_sender) == 0, \\\"RewardRouter: sender has vested tokens\\\");\\n        require(IERC20(xlxVester).balanceOf(_sender) == 0, \\\"RewardRouter: sender has vested tokens\\\");\\n\\n        address receiver = msg.sender;\\n        require(pendingReceivers[_sender] == receiver, \\\"RewardRouter: transfer not signalled\\\");\\n        delete pendingReceivers[_sender];\\n\\n        _validateReceiver(receiver);\\n        _compound(_sender);\\n\\n        uint256 stakedXdx = IRewardTracker(stakedXdxTracker).depositBalances(_sender, xdx);\\n        if (stakedXdx > 0) {\\n            _unstakeXdx(_sender, xdx, stakedXdx, false);\\n            _stakeXdx(_sender, receiver, xdx, stakedXdx);\\n        }\\n\\n        uint256 stakedEsXdx = IRewardTracker(stakedXdxTracker).depositBalances(_sender, esXdx);\\n        if (stakedEsXdx > 0) {\\n            _unstakeXdx(_sender, esXdx, stakedEsXdx, false);\\n            _stakeXdx(_sender, receiver, esXdx, stakedEsXdx);\\n        }\\n\\n        uint256 stakedBnXdx = IRewardTracker(feeXdxTracker).depositBalances(_sender, bnXdx);\\n        if (stakedBnXdx > 0) {\\n            IRewardTracker(feeXdxTracker).unstakeForAccount(_sender, bnXdx, stakedBnXdx, _sender);\\n            IRewardTracker(feeXdxTracker).stakeForAccount(_sender, receiver, bnXdx, stakedBnXdx);\\n        }\\n\\n        uint256 esXdxBalance = IERC20(esXdx).balanceOf(_sender);\\n        if (esXdxBalance > 0) {\\n            IERC20(esXdx).transferFrom(_sender, receiver, esXdxBalance);\\n        }\\n\\n        uint256 xlxAmount = IRewardTracker(feeXlxTracker).depositBalances(_sender, xlx);\\n        if (xlxAmount > 0) {\\n            IRewardTracker(stakedXlxTracker).unstakeForAccount(_sender, feeXlxTracker, xlxAmount, _sender);\\n            IRewardTracker(feeXlxTracker).unstakeForAccount(_sender, xlx, xlxAmount, _sender);\\n\\n            IRewardTracker(feeXlxTracker).stakeForAccount(_sender, receiver, xlx, xlxAmount);\\n            IRewardTracker(stakedXlxTracker).stakeForAccount(receiver, receiver, feeXlxTracker, xlxAmount);\\n        }\\n\\n        IVester(xdxVester).transferStakeValues(_sender, receiver);\\n        IVester(xlxVester).transferStakeValues(_sender, receiver);\\n    }\\n\\n    function _validateReceiver(address _receiver) private view {\\n        require(IRewardTracker(stakedXdxTracker).averageStakedAmounts(_receiver) == 0, \\\"RewardRouter: stakedXdxTracker.averageStakedAmounts > 0\\\");\\n        require(IRewardTracker(stakedXdxTracker).cumulativeRewards(_receiver) == 0, \\\"RewardRouter: stakedXdxTracker.cumulativeRewards > 0\\\");\\n\\n        require(IRewardTracker(bonusXdxTracker).averageStakedAmounts(_receiver) == 0, \\\"RewardRouter: bonusXdxTracker.averageStakedAmounts > 0\\\");\\n        require(IRewardTracker(bonusXdxTracker).cumulativeRewards(_receiver) == 0, \\\"RewardRouter: bonusXdxTracker.cumulativeRewards > 0\\\");\\n\\n        require(IRewardTracker(feeXdxTracker).averageStakedAmounts(_receiver) == 0, \\\"RewardRouter: feeXdxTracker.averageStakedAmounts > 0\\\");\\n        require(IRewardTracker(feeXdxTracker).cumulativeRewards(_receiver) == 0, \\\"RewardRouter: feeXdxTracker.cumulativeRewards > 0\\\");\\n\\n        require(IVester(xdxVester).transferredAverageStakedAmounts(_receiver) == 0, \\\"RewardRouter: xdxVester.transferredAverageStakedAmounts > 0\\\");\\n        require(IVester(xdxVester).transferredCumulativeRewards(_receiver) == 0, \\\"RewardRouter: xdxVester.transferredCumulativeRewards > 0\\\");\\n\\n        require(IRewardTracker(stakedXlxTracker).averageStakedAmounts(_receiver) == 0, \\\"RewardRouter: stakedXlxTracker.averageStakedAmounts > 0\\\");\\n        require(IRewardTracker(stakedXlxTracker).cumulativeRewards(_receiver) == 0, \\\"RewardRouter: stakedXlxTracker.cumulativeRewards > 0\\\");\\n\\n        require(IRewardTracker(feeXlxTracker).averageStakedAmounts(_receiver) == 0, \\\"RewardRouter: feeXlxTracker.averageStakedAmounts > 0\\\");\\n        require(IRewardTracker(feeXlxTracker).cumulativeRewards(_receiver) == 0, \\\"RewardRouter: feeXlxTracker.cumulativeRewards > 0\\\");\\n\\n        require(IVester(xlxVester).transferredAverageStakedAmounts(_receiver) == 0, \\\"RewardRouter: xdxVester.transferredAverageStakedAmounts > 0\\\");\\n        require(IVester(xlxVester).transferredCumulativeRewards(_receiver) == 0, \\\"RewardRouter: xdxVester.transferredCumulativeRewards > 0\\\");\\n\\n        require(IERC20(xdxVester).balanceOf(_receiver) == 0, \\\"RewardRouter: xdxVester.balance > 0\\\");\\n        require(IERC20(xlxVester).balanceOf(_receiver) == 0, \\\"RewardRouter: xlxVester.balance > 0\\\");\\n    }\\n\\n    function _compound(address _account) private {\\n        _compoundXdx(_account);\\n        _compoundXlx(_account);\\n    }\\n\\n    function _compoundXdx(address _account) private {\\n        uint256 esXdxAmount = IRewardTracker(stakedXdxTracker).claimForAccount(_account, _account);\\n        if (esXdxAmount > 0) {\\n            _stakeXdx(_account, _account, esXdx, esXdxAmount);\\n        }\\n\\n        uint256 bnXdxAmount = IRewardTracker(bonusXdxTracker).claimForAccount(_account, _account);\\n        if (bnXdxAmount > 0) {\\n            IRewardTracker(feeXdxTracker).stakeForAccount(_account, _account, bnXdx, bnXdxAmount);\\n        }\\n    }\\n\\n    function _compoundXlx(address _account) private {\\n        uint256 esXdxAmount = IRewardTracker(stakedXlxTracker).claimForAccount(_account, _account);\\n        if (esXdxAmount > 0) {\\n            _stakeXdx(_account, _account, esXdx, esXdxAmount);\\n        }\\n    }\\n\\n    function _stakeXdx(address _fundingAccount, address _account, address _token, uint256 _amount) private {\\n        require(_amount > 0, \\\"RewardRouter: invalid _amount\\\");\\n\\n        IRewardTracker(stakedXdxTracker).stakeForAccount(_fundingAccount, _account, _token, _amount);\\n        IRewardTracker(bonusXdxTracker).stakeForAccount(_account, _account, stakedXdxTracker, _amount);\\n        IRewardTracker(feeXdxTracker).stakeForAccount(_account, _account, bonusXdxTracker, _amount);\\n\\n        emit StakeXdx(_account, _token, _amount);\\n    }\\n\\n    function _unstakeXdx(address _account, address _token, uint256 _amount, bool _shouldReduceBnXdx) private {\\n        require(_amount > 0, \\\"RewardRouter: invalid _amount\\\");\\n\\n        uint256 balance = IRewardTracker(stakedXdxTracker).stakedAmounts(_account);\\n\\n        IRewardTracker(feeXdxTracker).unstakeForAccount(_account, bonusXdxTracker, _amount, _account);\\n        IRewardTracker(bonusXdxTracker).unstakeForAccount(_account, stakedXdxTracker, _amount, _account);\\n        IRewardTracker(stakedXdxTracker).unstakeForAccount(_account, _token, _amount, _account);\\n\\n        if (_shouldReduceBnXdx) {\\n            uint256 bnXdxAmount = IRewardTracker(bonusXdxTracker).claimForAccount(_account, _account);\\n            if (bnXdxAmount > 0) {\\n                IRewardTracker(feeXdxTracker).stakeForAccount(_account, _account, bnXdx, bnXdxAmount);\\n            }\\n\\n            uint256 stakedBnXdx = IRewardTracker(feeXdxTracker).depositBalances(_account, bnXdx);\\n            if (stakedBnXdx > 0) {\\n                uint256 reductionAmount = stakedBnXdx.mul(_amount).div(balance);\\n                IRewardTracker(feeXdxTracker).unstakeForAccount(_account, bnXdx, reductionAmount, _account);\\n                IMintable(bnXdx).burn(_account, reductionAmount);\\n            }\\n        }\\n\\n        emit UnstakeXdx(_account, _token, _amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/staking/XlxBalance.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../core/interfaces/IXlxManager.sol\\\";\\n\\ncontract XlxBalance {\\n    using SafeMath for uint256;\\n\\n    IXlxManager public xlxManager;\\n    address public stakedXlxTracker;\\n\\n    mapping (address => mapping (address => uint256)) public allowances;\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor(\\n        IXlxManager _xlxManager,\\n        address _stakedXlxTracker\\n    ) public {\\n        xlxManager = _xlxManager;\\n        stakedXlxTracker = _stakedXlxTracker;\\n    }\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256) {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    function approve(address _spender, uint256 _amount) external returns (bool) {\\n        _approve(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    function transfer(address _recipient, uint256 _amount) external returns (bool) {\\n        _transfer(msg.sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool) {\\n        uint256 nextAllowance = allowances[_sender][msg.sender].sub(_amount, \\\"XlxBalance: transfer amount exceeds allowance\\\");\\n        _approve(_sender, msg.sender, nextAllowance);\\n        _transfer(_sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function _approve(address _owner, address _spender, uint256 _amount) private {\\n        require(_owner != address(0), \\\"XlxBalance: approve from the zero address\\\");\\n        require(_spender != address(0), \\\"XlxBalance: approve to the zero address\\\");\\n\\n        allowances[_owner][_spender] = _amount;\\n\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\\n        require(_sender != address(0), \\\"XlxBalance: transfer from the zero address\\\");\\n        require(_recipient != address(0), \\\"XlxBalance: transfer to the zero address\\\");\\n\\n        require(\\n            xlxManager.lastAddedAt(_sender).add(xlxManager.cooldownDuration()) <= block.timestamp,\\n            \\\"XlxBalance: cooldown duration not yet passed\\\"\\n        );\\n\\n        IERC20(stakedXlxTracker).transferFrom(_sender, _recipient, _amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/staking/StakedXlx.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\n\\nimport \\\"../core/interfaces/IXlxManager.sol\\\";\\n\\nimport \\\"./interfaces/IRewardTracker.sol\\\";\\nimport \\\"./interfaces/IRewardTracker.sol\\\";\\n\\n// provide a way to transfer staked XLX tokens by unstaking from the sender\\n// and staking for the receiver\\n// tests in RewardRouterV2.js\\ncontract StakedXlx {\\n    using SafeMath for uint256;\\n\\n    string public constant name = \\\"StakedXlx\\\";\\n    string public constant symbol = \\\"sXLX\\\";\\n    uint8 public constant decimals = 18;\\n\\n    address public xlx;\\n    IXlxManager public xlxManager;\\n    address public stakedXlxTracker;\\n    address public feeXlxTracker;\\n\\n    mapping (address => mapping (address => uint256)) public allowances;\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor(\\n        address _xlx,\\n        IXlxManager _xlxManager,\\n        address _stakedXlxTracker,\\n        address _feeXlxTracker\\n    ) public {\\n        xlx = _xlx;\\n        xlxManager = _xlxManager;\\n        stakedXlxTracker = _stakedXlxTracker;\\n        feeXlxTracker = _feeXlxTracker;\\n    }\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256) {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    function approve(address _spender, uint256 _amount) external returns (bool) {\\n        _approve(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    function transfer(address _recipient, uint256 _amount) external returns (bool) {\\n        _transfer(msg.sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool) {\\n        uint256 nextAllowance = allowances[_sender][msg.sender].sub(_amount, \\\"StakedXlx: transfer amount exceeds allowance\\\");\\n        _approve(_sender, msg.sender, nextAllowance);\\n        _transfer(_sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function balanceOf(address _account) external view returns (uint256) {\\n        IRewardTracker(stakedXlxTracker).depositBalances(_account, xlx);\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        IERC20(stakedXlxTracker).totalSupply();\\n    }\\n\\n    function _approve(address _owner, address _spender, uint256 _amount) private {\\n        require(_owner != address(0), \\\"StakedXlx: approve from the zero address\\\");\\n        require(_spender != address(0), \\\"StakedXlx: approve to the zero address\\\");\\n\\n        allowances[_owner][_spender] = _amount;\\n\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\\n        require(_sender != address(0), \\\"StakedXlx: transfer from the zero address\\\");\\n        require(_recipient != address(0), \\\"StakedXlx: transfer to the zero address\\\");\\n\\n        require(\\n            xlxManager.lastAddedAt(_sender).add(xlxManager.cooldownDuration()) <= block.timestamp,\\n            \\\"StakedXlx: cooldown duration not yet passed\\\"\\n        );\\n\\n        IRewardTracker(stakedXlxTracker).unstakeForAccount(_sender, feeXlxTracker, _amount, _sender);\\n        IRewardTracker(feeXlxTracker).unstakeForAccount(_sender, xlx, _amount, _sender);\\n\\n        IRewardTracker(feeXlxTracker).stakeForAccount(_sender, _recipient, xlx, _amount);\\n        IRewardTracker(stakedXlxTracker).stakeForAccount(_recipient, _recipient, feeXlxTracker, _amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/staking/StakeManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./interfaces/IRewardTracker.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\ncontract StakeManager is Governable {\\n    function stakeForAccount(\\n        address _rewardTracker,\\n        address _account,\\n        address _token,\\n        uint256 _amount\\n    ) external onlyGov {\\n        IRewardTracker(_rewardTracker).stakeForAccount(_account, _account, _token, _amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/staking/RewardTracker.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IRewardDistributor.sol\\\";\\nimport \\\"./interfaces/IRewardTracker.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\ncontract RewardTracker is IERC20, ReentrancyGuard, IRewardTracker, Governable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant PRECISION = 1e30;\\n\\n    uint8 public constant decimals = 18;\\n\\n    bool public isInitialized;\\n\\n    string public name;\\n    string public symbol;\\n\\n    address public distributor;\\n    mapping (address => bool) public isDepositToken;\\n    mapping (address => mapping (address => uint256)) public override depositBalances;\\n    mapping (address => uint256) public totalDepositSupply;\\n\\n    uint256 public override totalSupply;\\n    mapping (address => uint256) public balances;\\n    mapping (address => mapping (address => uint256)) public allowances;\\n\\n    uint256 public cumulativeRewardPerToken;\\n    mapping (address => uint256) public override stakedAmounts;\\n    mapping (address => uint256) public claimableReward;\\n    mapping (address => uint256) public previousCumulatedRewardPerToken;\\n    mapping (address => uint256) public override cumulativeRewards;\\n    mapping (address => uint256) public override averageStakedAmounts;\\n\\n    bool public inPrivateTransferMode;\\n    bool public inPrivateStakingMode;\\n    bool public inPrivateClaimingMode;\\n    mapping (address => bool) public isHandler;\\n\\n    event Claim(address receiver, uint256 amount);\\n\\n    constructor(string memory _name, string memory _symbol) public {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    function initialize(\\n        address[] memory _depositTokens,\\n        address _distributor\\n    ) external onlyGov {\\n        require(!isInitialized, \\\"RewardTracker: already initialized\\\");\\n        isInitialized = true;\\n\\n        for (uint256 i = 0; i < _depositTokens.length; i++) {\\n            address depositToken = _depositTokens[i];\\n            isDepositToken[depositToken] = true;\\n        }\\n\\n        distributor = _distributor;\\n    }\\n\\n    function setDepositToken(address _depositToken, bool _isDepositToken) external onlyGov {\\n        isDepositToken[_depositToken] = _isDepositToken;\\n    }\\n\\n    function setInPrivateTransferMode(bool _inPrivateTransferMode) external onlyGov {\\n        inPrivateTransferMode = _inPrivateTransferMode;\\n    }\\n\\n    function setInPrivateStakingMode(bool _inPrivateStakingMode) external onlyGov {\\n        inPrivateStakingMode = _inPrivateStakingMode;\\n    }\\n\\n    function setInPrivateClaimingMode(bool _inPrivateClaimingMode) external onlyGov {\\n        inPrivateClaimingMode = _inPrivateClaimingMode;\\n    }\\n\\n    function setHandler(address _handler, bool _isActive) external onlyGov {\\n        isHandler[_handler] = _isActive;\\n    }\\n\\n    // to help users who accidentally send their tokens to this contract\\n    function withdrawToken(address _token, address _account, uint256 _amount) external onlyGov {\\n        IERC20(_token).safeTransfer(_account, _amount);\\n    }\\n\\n    function balanceOf(address _account) external view override returns (uint256) {\\n        return balances[_account];\\n    }\\n\\n    function stake(address _depositToken, uint256 _amount) external override nonReentrant {\\n        if (inPrivateStakingMode) { revert(\\\"RewardTracker: action not enabled\\\"); }\\n        _stake(msg.sender, msg.sender, _depositToken, _amount);\\n    }\\n\\n    function stakeForAccount(address _fundingAccount, address _account, address _depositToken, uint256 _amount) external override nonReentrant {\\n        _validateHandler();\\n        _stake(_fundingAccount, _account, _depositToken, _amount);\\n    }\\n\\n    function unstake(address _depositToken, uint256 _amount) external override nonReentrant {\\n        if (inPrivateStakingMode) { revert(\\\"RewardTracker: action not enabled\\\"); }\\n        _unstake(msg.sender, _depositToken, _amount, msg.sender);\\n    }\\n\\n    function unstakeForAccount(address _account, address _depositToken, uint256 _amount, address _receiver) external override nonReentrant {\\n        _validateHandler();\\n        _unstake(_account, _depositToken, _amount, _receiver);\\n    }\\n\\n    function transfer(address _recipient, uint256 _amount) external override returns (bool) {\\n        _transfer(msg.sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address _spender) external view override returns (uint256) {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    function approve(address _spender, uint256 _amount) external override returns (bool) {\\n        _approve(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external override returns (bool) {\\n        if (isHandler[msg.sender]) {\\n            _transfer(_sender, _recipient, _amount);\\n            return true;\\n        }\\n\\n        uint256 nextAllowance = allowances[_sender][msg.sender].sub(_amount, \\\"RewardTracker: transfer amount exceeds allowance\\\");\\n        _approve(_sender, msg.sender, nextAllowance);\\n        _transfer(_sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function tokensPerInterval() external override view returns (uint256) {\\n        return IRewardDistributor(distributor).tokensPerInterval();\\n    }\\n\\n    function updateRewards() external override nonReentrant {\\n        _updateRewards(address(0));\\n    }\\n\\n    function claim(address _receiver) external override nonReentrant returns (uint256) {\\n        if (inPrivateClaimingMode) { revert(\\\"RewardTracker: action not enabled\\\"); }\\n        return _claim(msg.sender, _receiver);\\n    }\\n\\n    function claimForAccount(address _account, address _receiver) external override nonReentrant returns (uint256) {\\n        _validateHandler();\\n        return _claim(_account, _receiver);\\n    }\\n\\n    function claimable(address _account) public override view returns (uint256) {\\n        uint256 stakedAmount = stakedAmounts[_account];\\n        if (stakedAmount == 0) {\\n            return claimableReward[_account];\\n        }\\n        uint256 supply = totalSupply;\\n        uint256 pendingRewards = IRewardDistributor(distributor).pendingRewards().mul(PRECISION);\\n        uint256 nextCumulativeRewardPerToken = cumulativeRewardPerToken.add(pendingRewards.div(supply));\\n        return claimableReward[_account].add(\\n            stakedAmount.mul(nextCumulativeRewardPerToken.sub(previousCumulatedRewardPerToken[_account])).div(PRECISION));\\n    }\\n\\n    function rewardToken() public view returns (address) {\\n        return IRewardDistributor(distributor).rewardToken();\\n    }\\n\\n    function _claim(address _account, address _receiver) private returns (uint256) {\\n        _updateRewards(_account);\\n\\n        uint256 tokenAmount = claimableReward[_account];\\n        claimableReward[_account] = 0;\\n\\n        if (tokenAmount > 0) {\\n            IERC20(rewardToken()).safeTransfer(_receiver, tokenAmount);\\n            emit Claim(_account, tokenAmount);\\n        }\\n\\n        return tokenAmount;\\n    }\\n\\n    function _mint(address _account, uint256 _amount) internal {\\n        require(_account != address(0), \\\"RewardTracker: mint to the zero address\\\");\\n\\n        totalSupply = totalSupply.add(_amount);\\n        balances[_account] = balances[_account].add(_amount);\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    function _burn(address _account, uint256 _amount) internal {\\n        require(_account != address(0), \\\"RewardTracker: burn from the zero address\\\");\\n\\n        balances[_account] = balances[_account].sub(_amount, \\\"RewardTracker: burn amount exceeds balance\\\");\\n        totalSupply = totalSupply.sub(_amount);\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\\n        require(_sender != address(0), \\\"RewardTracker: transfer from the zero address\\\");\\n        require(_recipient != address(0), \\\"RewardTracker: transfer to the zero address\\\");\\n\\n        if (inPrivateTransferMode) { _validateHandler(); }\\n\\n        balances[_sender] = balances[_sender].sub(_amount, \\\"RewardTracker: transfer amount exceeds balance\\\");\\n        balances[_recipient] = balances[_recipient].add(_amount);\\n\\n        emit Transfer(_sender, _recipient,_amount);\\n    }\\n\\n    function _approve(address _owner, address _spender, uint256 _amount) private {\\n        require(_owner != address(0), \\\"RewardTracker: approve from the zero address\\\");\\n        require(_spender != address(0), \\\"RewardTracker: approve to the zero address\\\");\\n\\n        allowances[_owner][_spender] = _amount;\\n\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    function _validateHandler() private view {\\n        require(isHandler[msg.sender], \\\"RewardTracker: forbidden\\\");\\n    }\\n\\n    function _stake(address _fundingAccount, address _account, address _depositToken, uint256 _amount) private {\\n        require(_amount > 0, \\\"RewardTracker: invalid _amount\\\");\\n        require(isDepositToken[_depositToken], \\\"RewardTracker: invalid _depositToken\\\");\\n\\n        IERC20(_depositToken).safeTransferFrom(_fundingAccount, address(this), _amount);\\n\\n        _updateRewards(_account);\\n\\n        stakedAmounts[_account] = stakedAmounts[_account].add(_amount);\\n        depositBalances[_account][_depositToken] = depositBalances[_account][_depositToken].add(_amount);\\n        totalDepositSupply[_depositToken] = totalDepositSupply[_depositToken].add(_amount);\\n\\n        _mint(_account, _amount);\\n    }\\n\\n    function _unstake(address _account, address _depositToken, uint256 _amount, address _receiver) private {\\n        require(_amount > 0, \\\"RewardTracker: invalid _amount\\\");\\n        require(isDepositToken[_depositToken], \\\"RewardTracker: invalid _depositToken\\\");\\n\\n        _updateRewards(_account);\\n\\n        uint256 stakedAmount = stakedAmounts[_account];\\n        require(stakedAmounts[_account] >= _amount, \\\"RewardTracker: _amount exceeds stakedAmount\\\");\\n\\n        stakedAmounts[_account] = stakedAmount.sub(_amount);\\n\\n        uint256 depositBalance = depositBalances[_account][_depositToken];\\n        require(depositBalance >= _amount, \\\"RewardTracker: _amount exceeds depositBalance\\\");\\n        depositBalances[_account][_depositToken] = depositBalance.sub(_amount);\\n        totalDepositSupply[_depositToken] = totalDepositSupply[_depositToken].sub(_amount);\\n\\n        _burn(_account, _amount);\\n        IERC20(_depositToken).safeTransfer(_receiver, _amount);\\n    }\\n\\n    function _updateRewards(address _account) private {\\n        uint256 blockReward = IRewardDistributor(distributor).distribute();\\n\\n        uint256 supply = totalSupply;\\n        uint256 _cumulativeRewardPerToken = cumulativeRewardPerToken;\\n        if (supply > 0 && blockReward > 0) {\\n            _cumulativeRewardPerToken = _cumulativeRewardPerToken.add(blockReward.mul(PRECISION).div(supply));\\n            cumulativeRewardPerToken = _cumulativeRewardPerToken;\\n        }\\n\\n        // cumulativeRewardPerToken can only increase\\n        // so if cumulativeRewardPerToken is zero, it means there are no rewards yet\\n        if (_cumulativeRewardPerToken == 0) {\\n            return;\\n        }\\n\\n        if (_account != address(0)) {\\n            uint256 stakedAmount = stakedAmounts[_account];\\n            uint256 accountReward = stakedAmount.mul(_cumulativeRewardPerToken.sub(previousCumulatedRewardPerToken[_account])).div(PRECISION);\\n            uint256 _claimableReward = claimableReward[_account].add(accountReward);\\n\\n            claimableReward[_account] = _claimableReward;\\n            previousCumulatedRewardPerToken[_account] = _cumulativeRewardPerToken;\\n\\n            if (_claimableReward > 0 && stakedAmounts[_account] > 0) {\\n                uint256 nextCumulativeReward = cumulativeRewards[_account].add(accountReward);\\n\\n                averageStakedAmounts[_account] = averageStakedAmounts[_account].mul(cumulativeRewards[_account]).div(nextCumulativeReward)\\n                    .add(stakedAmount.mul(accountReward).div(nextCumulativeReward));\\n\\n                cumulativeRewards[_account] = nextCumulativeReward;\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/staking/interfaces/IRewardDistributor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardDistributor {\\n    function rewardToken() external view returns (address);\\n    function tokensPerInterval() external view returns (uint256);\\n    function pendingRewards() external view returns (uint256);\\n    function distribute() external returns (uint256);\\n}\\n\"\n    },\n    \"contracts/staking/RewardDistributor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IRewardDistributor.sol\\\";\\nimport \\\"./interfaces/IRewardTracker.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\ncontract RewardDistributor is IRewardDistributor, ReentrancyGuard, Governable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address public override rewardToken;\\n    uint256 public override tokensPerInterval;\\n    uint256 public lastDistributionTime;\\n    address public rewardTracker;\\n\\n    address public admin;\\n\\n    event Distribute(uint256 amount);\\n    event TokensPerIntervalChange(uint256 amount);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"RewardDistributor: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(address _rewardToken, address _rewardTracker) public {\\n        rewardToken = _rewardToken;\\n        rewardTracker = _rewardTracker;\\n        admin = msg.sender;\\n    }\\n\\n    function setAdmin(address _admin) external onlyGov {\\n        admin = _admin;\\n    }\\n\\n    // to help users who accidentally send their tokens to this contract\\n    function withdrawToken(address _token, address _account, uint256 _amount) external onlyGov {\\n        IERC20(_token).safeTransfer(_account, _amount);\\n    }\\n\\n    function updateLastDistributionTime() external onlyAdmin {\\n        lastDistributionTime = block.timestamp;\\n    }\\n\\n    function setTokensPerInterval(uint256 _amount) external onlyAdmin {\\n        require(lastDistributionTime != 0, \\\"RewardDistributor: invalid lastDistributionTime\\\");\\n        IRewardTracker(rewardTracker).updateRewards();\\n        tokensPerInterval = _amount;\\n        emit TokensPerIntervalChange(_amount);\\n    }\\n\\n    function pendingRewards() public view override returns (uint256) {\\n        if (block.timestamp == lastDistributionTime) {\\n            return 0;\\n        }\\n\\n        uint256 timeDiff = block.timestamp.sub(lastDistributionTime);\\n        return tokensPerInterval.mul(timeDiff);\\n    }\\n\\n    function distribute() external override returns (uint256) {\\n        require(msg.sender == rewardTracker, \\\"RewardDistributor: invalid msg.sender\\\");\\n        uint256 amount = pendingRewards();\\n        if (amount == 0) { return 0; }\\n\\n        lastDistributionTime = block.timestamp;\\n\\n        uint256 balance = IERC20(rewardToken).balanceOf(address(this));\\n        if (amount > balance) { amount = balance; }\\n\\n        IERC20(rewardToken).safeTransfer(msg.sender, amount);\\n\\n        emit Distribute(amount);\\n        return amount;\\n    }\\n}\\n\"\n    },\n    \"contracts/tokens/YieldFarm.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./YieldToken.sol\\\";\\n\\ncontract YieldFarm is YieldToken, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    address public stakingToken;\\n\\n    constructor(string memory _name, string memory _symbol, address _stakingToken) public YieldToken(_name, _symbol, 0) {\\n        stakingToken = _stakingToken;\\n    }\\n\\n    function stake(uint256 _amount) external nonReentrant {\\n        IERC20(stakingToken).safeTransferFrom(msg.sender, address(this), _amount);\\n        _mint(msg.sender, _amount);\\n    }\\n\\n    function unstake(uint256 _amount) external nonReentrant {\\n        _burn(msg.sender, _amount);\\n        IERC20(stakingToken).safeTransfer(msg.sender, _amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/tokens/TimeDistributor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IDistributor.sol\\\";\\n\\ncontract TimeDistributor is IDistributor {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant DISTRIBUTION_INTERVAL = 1 hours;\\n    address public gov;\\n    address public admin;\\n\\n    mapping (address => address) public rewardTokens;\\n    mapping (address => uint256) public override tokensPerInterval;\\n    mapping (address => uint256) public lastDistributionTime;\\n\\n    event Distribute(address receiver, uint256 amount);\\n    event DistributionChange(address receiver, uint256 amount, address rewardToken);\\n    event TokensPerIntervalChange(address receiver, uint256 amount);\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"TimeDistributor: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"TimeDistributor: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor() public {\\n        gov = msg.sender;\\n        admin = msg.sender;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n\\n    function setTokensPerInterval(address _receiver, uint256 _amount) external onlyAdmin {\\n        if (lastDistributionTime[_receiver] != 0) {\\n            uint256 intervals = getIntervals(_receiver);\\n            require(intervals == 0, \\\"TimeDistributor: pending distribution\\\");\\n        }\\n\\n        tokensPerInterval[_receiver] = _amount;\\n        _updateLastDistributionTime(_receiver);\\n        emit TokensPerIntervalChange(_receiver, _amount);\\n    }\\n\\n    function updateLastDistributionTime(address _receiver) external onlyAdmin {\\n        _updateLastDistributionTime(_receiver);\\n    }\\n\\n    function setDistribution(\\n        address[] calldata _receivers,\\n        uint256[] calldata _amounts,\\n        address[] calldata _rewardTokens\\n    ) external onlyGov {\\n        for (uint256 i = 0; i < _receivers.length; i++) {\\n            address receiver = _receivers[i];\\n\\n            if (lastDistributionTime[receiver] != 0) {\\n                uint256 intervals = getIntervals(receiver);\\n                require(intervals == 0, \\\"TimeDistributor: pending distribution\\\");\\n            }\\n\\n            uint256 amount = _amounts[i];\\n            address rewardToken = _rewardTokens[i];\\n            tokensPerInterval[receiver] = amount;\\n            rewardTokens[receiver] = rewardToken;\\n            _updateLastDistributionTime(receiver);\\n            emit DistributionChange(receiver, amount, rewardToken);\\n        }\\n    }\\n\\n    function distribute() external override returns (uint256) {\\n        address receiver = msg.sender;\\n        uint256 intervals = getIntervals(receiver);\\n\\n        if (intervals == 0) { return 0; }\\n\\n        uint256 amount = getDistributionAmount(receiver);\\n        _updateLastDistributionTime(receiver);\\n\\n        if (amount == 0) { return 0; }\\n\\n        IERC20(rewardTokens[receiver]).safeTransfer(receiver, amount);\\n\\n        emit Distribute(receiver, amount);\\n        return amount;\\n    }\\n\\n    function getRewardToken(address _receiver) external override view returns (address) {\\n        return rewardTokens[_receiver];\\n    }\\n\\n    function getDistributionAmount(address _receiver) public override view returns (uint256) {\\n        uint256 _tokensPerInterval = tokensPerInterval[_receiver];\\n        if (_tokensPerInterval == 0) { return 0; }\\n\\n        uint256 intervals = getIntervals(_receiver);\\n        uint256 amount = _tokensPerInterval.mul(intervals);\\n\\n        if (IERC20(rewardTokens[_receiver]).balanceOf(address(this)) < amount) { return 0; }\\n\\n        return amount;\\n    }\\n\\n    function getIntervals(address _receiver) public view returns (uint256) {\\n        uint256 timeDiff = block.timestamp.sub(lastDistributionTime[_receiver]);\\n        return timeDiff.div(DISTRIBUTION_INTERVAL);\\n    }\\n\\n    function _updateLastDistributionTime(address _receiver) private {\\n        lastDistributionTime[_receiver] = block.timestamp.div(DISTRIBUTION_INTERVAL).mul(DISTRIBUTION_INTERVAL);\\n    }\\n}\\n\"\n    },\n    \"contracts/staking/RewardRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../libraries/utils/Address.sol\\\";\\n\\nimport \\\"./interfaces/IRewardTracker.sol\\\";\\nimport \\\"../tokens/interfaces/IMintable.sol\\\";\\nimport \\\"../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"../core/interfaces/IXlxManager.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\ncontract RewardRouter is ReentrancyGuard, Governable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    bool public isInitialized;\\n\\n    address public weth;\\n\\n    address public xdx;\\n    address public esXdx;\\n    address public bnXdx;\\n\\n    address public xlx; // XDX Liquidity Provider token\\n\\n    address public stakedXdxTracker;\\n    address public bonusXdxTracker;\\n    address public feeXdxTracker;\\n\\n    address public stakedXlxTracker;\\n    address public feeXlxTracker;\\n\\n    address public xlxManager;\\n\\n    event StakeXdx(address account, uint256 amount);\\n    event UnstakeXdx(address account, uint256 amount);\\n\\n    event StakeXlx(address account, uint256 amount);\\n    event UnstakeXlx(address account, uint256 amount);\\n\\n    receive() external payable {\\n        require(msg.sender == weth, \\\"Router: invalid sender\\\");\\n    }\\n\\n    function initialize(\\n        address _weth,\\n        address _xdx,\\n        address _esXdx,\\n        address _bnXdx,\\n        address _xlx,\\n        address _stakedXdxTracker,\\n        address _bonusXdxTracker,\\n        address _feeXdxTracker,\\n        address _feeXlxTracker,\\n        address _stakedXlxTracker,\\n        address _xlxManager\\n    ) external onlyGov {\\n        require(!isInitialized, \\\"RewardRouter: already initialized\\\");\\n        isInitialized = true;\\n\\n        weth = _weth;\\n\\n        xdx = _xdx;\\n        esXdx = _esXdx;\\n        bnXdx = _bnXdx;\\n\\n        xlx = _xlx;\\n\\n        stakedXdxTracker = _stakedXdxTracker;\\n        bonusXdxTracker = _bonusXdxTracker;\\n        feeXdxTracker = _feeXdxTracker;\\n\\n        feeXlxTracker = _feeXlxTracker;\\n        stakedXlxTracker = _stakedXlxTracker;\\n\\n        xlxManager = _xlxManager;\\n    }\\n\\n    // to help users who accidentally send their tokens to this contract\\n    function withdrawToken(address _token, address _account, uint256 _amount) external onlyGov {\\n        IERC20(_token).safeTransfer(_account, _amount);\\n    }\\n\\n    function batchStakeXdxForAccount(address[] memory _accounts, uint256[] memory _amounts) external nonReentrant onlyGov {\\n        address _xdx = xdx;\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _stakeXdx(msg.sender, _accounts[i], _xdx, _amounts[i]);\\n        }\\n    }\\n\\n    function stakeXdxForAccount(address _account, uint256 _amount) external nonReentrant onlyGov {\\n        _stakeXdx(msg.sender, _account, xdx, _amount);\\n    }\\n\\n    function stakeXdx(uint256 _amount) external nonReentrant {\\n        _stakeXdx(msg.sender, msg.sender, xdx, _amount);\\n    }\\n\\n    function stakeEsXdx(uint256 _amount) external nonReentrant {\\n        _stakeXdx(msg.sender, msg.sender, esXdx, _amount);\\n    }\\n\\n    function unstakeXdx(uint256 _amount) external nonReentrant {\\n        _unstakeXdx(msg.sender, xdx, _amount);\\n    }\\n\\n    function unstakeEsXdx(uint256 _amount) external nonReentrant {\\n        _unstakeXdx(msg.sender, esXdx, _amount);\\n    }\\n\\n    function mintAndStakeXlx(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minXlx) external nonReentrant returns (uint256) {\\n        require(_amount > 0, \\\"RewardRouter: invalid _amount\\\");\\n\\n        address account = msg.sender;\\n        uint256 xlxAmount = IXlxManager(xlxManager).addLiquidityForAccount(account, account, _token, _amount, _minUsdg, _minXlx);\\n        IRewardTracker(feeXlxTracker).stakeForAccount(account, account, xlx, xlxAmount);\\n        IRewardTracker(stakedXlxTracker).stakeForAccount(account, account, feeXlxTracker, xlxAmount);\\n\\n        emit StakeXlx(account, xlxAmount);\\n\\n        return xlxAmount;\\n    }\\n\\n    function mintAndStakeXlxETH(uint256 _minUsdg, uint256 _minXlx) external payable nonReentrant returns (uint256) {\\n        require(msg.value > 0, \\\"RewardRouter: invalid msg.value\\\");\\n\\n        IWETH(weth).deposit{value: msg.value}();\\n        IERC20(weth).approve(xlxManager, msg.value);\\n\\n        address account = msg.sender;\\n        uint256 xlxAmount = IXlxManager(xlxManager).addLiquidityForAccount(address(this), account, weth, msg.value, _minUsdg, _minXlx);\\n\\n        IRewardTracker(feeXlxTracker).stakeForAccount(account, account, xlx, xlxAmount);\\n        IRewardTracker(stakedXlxTracker).stakeForAccount(account, account, feeXlxTracker, xlxAmount);\\n\\n        emit StakeXlx(account, xlxAmount);\\n\\n        return xlxAmount;\\n    }\\n\\n    function unstakeAndRedeemXlx(address _tokenOut, uint256 _xlxAmount, uint256 _minOut, address _receiver) external nonReentrant returns (uint256) {\\n        require(_xlxAmount > 0, \\\"RewardRouter: invalid _xlxAmount\\\");\\n\\n        address account = msg.sender;\\n        IRewardTracker(stakedXlxTracker).unstakeForAccount(account, feeXlxTracker, _xlxAmount, account);\\n        IRewardTracker(feeXlxTracker).unstakeForAccount(account, xlx, _xlxAmount, account);\\n        uint256 amountOut = IXlxManager(xlxManager).removeLiquidityForAccount(account, _tokenOut, _xlxAmount, _minOut, _receiver);\\n\\n        emit UnstakeXlx(account, _xlxAmount);\\n\\n        return amountOut;\\n    }\\n\\n    function unstakeAndRedeemXlxETH(uint256 _xlxAmount, uint256 _minOut, address payable _receiver) external nonReentrant returns (uint256) {\\n        require(_xlxAmount > 0, \\\"RewardRouter: invalid _xlxAmount\\\");\\n\\n        address account = msg.sender;\\n        IRewardTracker(stakedXlxTracker).unstakeForAccount(account, feeXlxTracker, _xlxAmount, account);\\n        IRewardTracker(feeXlxTracker).unstakeForAccount(account, xlx, _xlxAmount, account);\\n        uint256 amountOut = IXlxManager(xlxManager).removeLiquidityForAccount(account, weth, _xlxAmount, _minOut, address(this));\\n\\n        IWETH(weth).withdraw(amountOut);\\n\\n        _receiver.sendValue(amountOut);\\n\\n        emit UnstakeXlx(account, _xlxAmount);\\n\\n        return amountOut;\\n    }\\n\\n    function claim() external nonReentrant {\\n        address account = msg.sender;\\n\\n        IRewardTracker(feeXdxTracker).claimForAccount(account, account);\\n        IRewardTracker(feeXlxTracker).claimForAccount(account, account);\\n\\n        IRewardTracker(stakedXdxTracker).claimForAccount(account, account);\\n        IRewardTracker(stakedXlxTracker).claimForAccount(account, account);\\n    }\\n\\n    function claimEsXdx() external nonReentrant {\\n        address account = msg.sender;\\n\\n        IRewardTracker(stakedXdxTracker).claimForAccount(account, account);\\n        IRewardTracker(stakedXlxTracker).claimForAccount(account, account);\\n    }\\n\\n    function claimFees() external nonReentrant {\\n        address account = msg.sender;\\n\\n        IRewardTracker(feeXdxTracker).claimForAccount(account, account);\\n        IRewardTracker(feeXlxTracker).claimForAccount(account, account);\\n    }\\n\\n    function compound() external nonReentrant {\\n        _compound(msg.sender);\\n    }\\n\\n    function compoundForAccount(address _account) external nonReentrant onlyGov {\\n        _compound(_account);\\n    }\\n\\n    function batchCompoundForAccounts(address[] memory _accounts) external nonReentrant onlyGov {\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _compound(_accounts[i]);\\n        }\\n    }\\n\\n    function _compound(address _account) private {\\n        _compoundXdx(_account);\\n        _compoundXlx(_account);\\n    }\\n\\n    function _compoundXdx(address _account) private {\\n        uint256 esXdxAmount = IRewardTracker(stakedXdxTracker).claimForAccount(_account, _account);\\n        if (esXdxAmount > 0) {\\n            _stakeXdx(_account, _account, esXdx, esXdxAmount);\\n        }\\n\\n        uint256 bnXdxAmount = IRewardTracker(bonusXdxTracker).claimForAccount(_account, _account);\\n        if (bnXdxAmount > 0) {\\n            IRewardTracker(feeXdxTracker).stakeForAccount(_account, _account, bnXdx, bnXdxAmount);\\n        }\\n    }\\n\\n    function _compoundXlx(address _account) private {\\n        uint256 esXdxAmount = IRewardTracker(stakedXlxTracker).claimForAccount(_account, _account);\\n        if (esXdxAmount > 0) {\\n            _stakeXdx(_account, _account, esXdx, esXdxAmount);\\n        }\\n    }\\n\\n    function _stakeXdx(address _fundingAccount, address _account, address _token, uint256 _amount) private {\\n        require(_amount > 0, \\\"RewardRouter: invalid _amount\\\");\\n\\n        IRewardTracker(stakedXdxTracker).stakeForAccount(_fundingAccount, _account, _token, _amount);\\n        IRewardTracker(bonusXdxTracker).stakeForAccount(_account, _account, stakedXdxTracker, _amount);\\n        IRewardTracker(feeXdxTracker).stakeForAccount(_account, _account, bonusXdxTracker, _amount);\\n\\n        emit StakeXdx(_account, _amount);\\n    }\\n\\n    function _unstakeXdx(address _account, address _token, uint256 _amount) private {\\n        require(_amount > 0, \\\"RewardRouter: invalid _amount\\\");\\n\\n        uint256 balance = IRewardTracker(stakedXdxTracker).stakedAmounts(_account);\\n\\n        IRewardTracker(feeXdxTracker).unstakeForAccount(_account, bonusXdxTracker, _amount, _account);\\n        IRewardTracker(bonusXdxTracker).unstakeForAccount(_account, stakedXdxTracker, _amount, _account);\\n        IRewardTracker(stakedXdxTracker).unstakeForAccount(_account, _token, _amount, _account);\\n\\n        uint256 bnXdxAmount = IRewardTracker(bonusXdxTracker).claimForAccount(_account, _account);\\n        if (bnXdxAmount > 0) {\\n            IRewardTracker(feeXdxTracker).stakeForAccount(_account, _account, bnXdx, bnXdxAmount);\\n        }\\n\\n        uint256 stakedBnXdx = IRewardTracker(feeXdxTracker).depositBalances(_account, bnXdx);\\n        if (stakedBnXdx > 0) {\\n            uint256 reductionAmount = stakedBnXdx.mul(_amount).div(balance);\\n            IRewardTracker(feeXdxTracker).unstakeForAccount(_account, bnXdx, reductionAmount, _account);\\n            IMintable(bnXdx).burn(_account, reductionAmount);\\n        }\\n\\n        emit UnstakeXdx(_account, _amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/token/ERC721/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/EnumerableSet.sol\\\";\\nimport \\\"../../utils/EnumerableMap.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    function mint(address to, uint256 tokenId) public {\\n        _mint(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(_baseURI).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(_baseURI, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(_baseURI, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    function _approve(address to, uint256 tokenId) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\"\n    },\n    \"contracts/libraries/GSN/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/token/ERC721/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"contracts/libraries/token/ERC721/IERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/libraries/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\n    },\n    \"contracts/libraries/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\ncontract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/utils/EnumerableSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/utils/EnumerableMap.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        return _get(map, key, \\\"EnumerableMap: nonexistent key\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = byte(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/token/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\n    },\n    \"contracts/libraries/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() internal {\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\"\n    },\n    \"contracts/core/OrderBook.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/Address.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IOrderBook.sol\\\";\\n\\ncontract OrderBook is ReentrancyGuard, IOrderBook {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    uint256 public constant PRICE_PRECISION = 1e30;\\n    uint256 public constant USDG_PRECISION = 1e18;\\n\\n    struct IncreaseOrder {\\n        address account;\\n        address purchaseToken;\\n        uint256 purchaseTokenAmount;\\n        address collateralToken;\\n        address indexToken;\\n        uint256 sizeDelta;\\n        bool isLong;\\n        uint256 triggerPrice;\\n        bool triggerAboveThreshold;\\n        uint256 executionFee;\\n    }\\n    struct DecreaseOrder {\\n        address account;\\n        address collateralToken;\\n        uint256 collateralDelta;\\n        address indexToken;\\n        uint256 sizeDelta;\\n        bool isLong;\\n        uint256 triggerPrice;\\n        bool triggerAboveThreshold;\\n        uint256 executionFee;\\n    }\\n    struct SwapOrder {\\n        address account;\\n        address[] path;\\n        uint256 amountIn;\\n        uint256 minOut;\\n        uint256 triggerRatio;\\n        bool triggerAboveThreshold;\\n        bool shouldUnwrap;\\n        uint256 executionFee;\\n    }\\n\\n    mapping (address => mapping(uint256 => IncreaseOrder)) public increaseOrders;\\n    mapping (address => uint256) public increaseOrdersIndex;\\n    mapping (address => mapping(uint256 => DecreaseOrder)) public decreaseOrders;\\n    mapping (address => uint256) public decreaseOrdersIndex;\\n    mapping (address => mapping(uint256 => SwapOrder)) public swapOrders;\\n    mapping (address => uint256) public swapOrdersIndex;\\n\\n    address public gov;\\n    address public weth;\\n    address public usdg;\\n    address public router;\\n    address public vault;\\n    uint256 public minExecutionFee;\\n    uint256 public minPurchaseTokenAmountUsd;\\n    bool public isInitialized = false;\\n\\n    event CreateIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n    event CancelIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n    event ExecuteIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee,\\n        uint256 executionPrice\\n    );\\n    event UpdateIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        address indexToken,\\n        bool isLong,\\n        uint256 sizeDelta,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold\\n    );\\n    event CreateDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n    event CancelDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n    event ExecuteDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee,\\n        uint256 executionPrice\\n    );\\n    event UpdateDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold\\n    );\\n    event CreateSwapOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address[] path,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    );\\n    event CancelSwapOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address[] path,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    );\\n    event UpdateSwapOrder(\\n        address indexed account,\\n        uint256 ordexIndex,\\n        address[] path,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    );\\n    event ExecuteSwapOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address[] path,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 amountOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    );\\n\\n    event Initialize(\\n        address router,\\n        address vault,\\n        address weth,\\n        address usdg,\\n        uint256 minExecutionFee,\\n        uint256 minPurchaseTokenAmountUsd\\n    );\\n    event UpdateMinExecutionFee(uint256 minExecutionFee);\\n    event UpdateMinPurchaseTokenAmountUsd(uint256 minPurchaseTokenAmountUsd);\\n    event UpdateGov(address gov);\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"OrderBook: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    function initialize(\\n        address _router,\\n        address _vault,\\n        address _weth,\\n        address _usdg,\\n        uint256 _minExecutionFee,\\n        uint256 _minPurchaseTokenAmountUsd\\n    ) external onlyGov {\\n        require(!isInitialized, \\\"OrderBook: already initialized\\\");\\n        isInitialized = true;\\n\\n        router = _router;\\n        vault = _vault;\\n        weth = _weth;\\n        usdg = _usdg;\\n        minExecutionFee = _minExecutionFee;\\n        minPurchaseTokenAmountUsd = _minPurchaseTokenAmountUsd;\\n\\n        emit Initialize(_router, _vault, _weth, _usdg, _minExecutionFee, _minPurchaseTokenAmountUsd);\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == weth, \\\"OrderBook: invalid sender\\\");\\n    }\\n\\n    function setMinExecutionFee(uint256 _minExecutionFee) external onlyGov {\\n        minExecutionFee = _minExecutionFee;\\n\\n        emit UpdateMinExecutionFee(_minExecutionFee);\\n    }\\n\\n    function setMinPurchaseTokenAmountUsd(uint256 _minPurchaseTokenAmountUsd) external onlyGov {\\n        minPurchaseTokenAmountUsd = _minPurchaseTokenAmountUsd;\\n\\n        emit UpdateMinPurchaseTokenAmountUsd(_minPurchaseTokenAmountUsd);\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n\\n        emit UpdateGov(_gov);\\n    }\\n\\n    function getSwapOrder(address _account, uint256 _orderIndex) override public view returns (\\n        address path0,\\n        address path1,\\n        address path2,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    ) {\\n        SwapOrder memory order = swapOrders[_account][_orderIndex];\\n        return (\\n            order.path.length > 0 ? order.path[0] : address(0),\\n            order.path.length > 1 ? order.path[1] : address(0),\\n            order.path.length > 2 ? order.path[2] : address(0),\\n            order.amountIn,\\n            order.minOut,\\n            order.triggerRatio,\\n            order.triggerAboveThreshold,\\n            order.shouldUnwrap,\\n            order.executionFee\\n        );\\n    }\\n\\n    function createSwapOrder(\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _triggerRatio, // tokenB / tokenA\\n        bool _triggerAboveThreshold,\\n        uint256 _executionFee,\\n        bool _shouldWrap,\\n        bool _shouldUnwrap\\n    ) external payable nonReentrant {\\n        require(_path.length == 2 || _path.length == 3, \\\"OrderBook: invalid _path.length\\\");\\n        require(_path[0] != _path[_path.length - 1], \\\"OrderBook: invalid _path\\\");\\n        require(_amountIn > 0, \\\"OrderBook: invalid _amountIn\\\");\\n        require(_executionFee >= minExecutionFee, \\\"OrderBook: insufficient execution fee\\\");\\n\\n        // always need this call because of mandatory executionFee user has to transfer in ETH\\n        _transferInETH();\\n\\n        if (_shouldWrap) {\\n            require(_path[0] == weth, \\\"OrderBook: only weth could be wrapped\\\");\\n            require(msg.value == _executionFee.add(_amountIn), \\\"OrderBook: incorrect value transferred\\\");\\n        } else {\\n            require(msg.value == _executionFee, \\\"OrderBook: incorrect execution fee transferred\\\");\\n            IRouter(router).pluginTransfer(_path[0], msg.sender, address(this), _amountIn);\\n        }\\n\\n        _createSwapOrder(msg.sender, _path, _amountIn, _minOut, _triggerRatio, _triggerAboveThreshold, _shouldUnwrap, _executionFee);\\n    }\\n\\n    function _createSwapOrder(\\n        address _account,\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _triggerRatio,\\n        bool _triggerAboveThreshold,\\n        bool _shouldUnwrap,\\n        uint256 _executionFee\\n    ) private {\\n        uint256 _orderIndex = swapOrdersIndex[_account];\\n        SwapOrder memory order = SwapOrder(\\n            _account,\\n            _path,\\n            _amountIn,\\n            _minOut,\\n            _triggerRatio,\\n            _triggerAboveThreshold,\\n            _shouldUnwrap,\\n            _executionFee\\n        );\\n        swapOrdersIndex[_account] = _orderIndex.add(1);\\n        swapOrders[_account][_orderIndex] = order;\\n\\n        emit CreateSwapOrder(\\n            _account,\\n            _orderIndex,\\n            _path,\\n            _amountIn,\\n            _minOut,\\n            _triggerRatio,\\n            _triggerAboveThreshold,\\n            _shouldUnwrap,\\n            _executionFee\\n        );\\n    }\\n\\n    function cancelMultiple(\\n        uint256[] memory _swapOrderIndexes,\\n        uint256[] memory _increaseOrderIndexes,\\n        uint256[] memory _decreaseOrderIndexes\\n    ) external {\\n        for (uint256 i = 0; i < _swapOrderIndexes.length; i++) {\\n            cancelSwapOrder(_swapOrderIndexes[i]);\\n        }\\n        for (uint256 i = 0; i < _increaseOrderIndexes.length; i++) {\\n            cancelIncreaseOrder(_increaseOrderIndexes[i]);\\n        }\\n        for (uint256 i = 0; i < _decreaseOrderIndexes.length; i++) {\\n            cancelDecreaseOrder(_decreaseOrderIndexes[i]);\\n        }\\n    }\\n\\n    function cancelSwapOrder(uint256 _orderIndex) public nonReentrant {\\n        SwapOrder memory order = swapOrders[msg.sender][_orderIndex];\\n        require(order.account != address(0), \\\"OrderBook: non-existent order\\\");\\n\\n        delete swapOrders[msg.sender][_orderIndex];\\n\\n        if (order.path[0] == weth) {\\n            _transferOutETH(order.executionFee.add(order.amountIn), msg.sender);\\n        } else {\\n            IERC20(order.path[0]).safeTransfer(msg.sender, order.amountIn);\\n            _transferOutETH(order.executionFee, msg.sender);\\n        }\\n\\n        emit CancelSwapOrder(\\n            msg.sender,\\n            _orderIndex,\\n            order.path,\\n            order.amountIn,\\n            order.minOut,\\n            order.triggerRatio,\\n            order.triggerAboveThreshold,\\n            order.shouldUnwrap,\\n            order.executionFee\\n        );\\n    }\\n\\n    function getUsdgMinPrice(address _otherToken) public view returns (uint256) {\\n        // USDG_PRECISION is the same as 1 USDG\\n        uint256 redemptionAmount = IVault(vault).getRedemptionAmount(_otherToken, USDG_PRECISION);\\n        uint256 otherTokenPrice = IVault(vault).getMinPrice(_otherToken);\\n\\n        uint256 otherTokenDecimals = IVault(vault).tokenDecimals(_otherToken);\\n        return redemptionAmount.mul(otherTokenPrice).div(10 ** otherTokenDecimals);\\n    }\\n\\n    function validateSwapOrderPriceWithTriggerAboveThreshold(\\n        address[] memory _path,\\n        uint256 _triggerRatio\\n    ) public view returns (bool) {\\n        require(_path.length == 2 || _path.length == 3, \\\"OrderBook: invalid _path.length\\\");\\n\\n        // limit orders don't need this validation because minOut is enough\\n        // so this validation handles scenarios for stop orders only\\n        // when a user wants to swap when a price of tokenB increases relative to tokenA\\n        address tokenA = _path[0];\\n        address tokenB = _path[_path.length - 1];\\n        uint256 tokenAPrice;\\n        uint256 tokenBPrice;\\n\\n        // 1. USDG doesn't have a price feed so we need to calculate it based on redepmtion amount of a specific token\\n        // That's why USDG price in USD can vary depending on the redepmtion token\\n        // 2. In complex scenarios with path=[USDG, BNB, BTC] we need to know how much BNB we'll get for provided USDG\\n        // to know how much BTC will be received\\n        // That's why in such scenario BNB should be used to determine price of USDG\\n        if (tokenA == usdg) {\\n            // with both _path.length == 2 or 3 we need usdg price against _path[1]\\n            tokenAPrice = getUsdgMinPrice(_path[1]);\\n        } else {\\n            tokenAPrice = IVault(vault).getMinPrice(tokenA);\\n        }\\n\\n        if (tokenB == usdg) {\\n            tokenBPrice = PRICE_PRECISION;\\n        } else {\\n            tokenBPrice = IVault(vault).getMaxPrice(tokenB);\\n        }\\n\\n        uint256 currentRatio = tokenBPrice.mul(PRICE_PRECISION).div(tokenAPrice);\\n\\n        bool isValid = currentRatio > _triggerRatio;\\n        return isValid;\\n    }\\n\\n    function updateSwapOrder(uint256 _orderIndex, uint256 _minOut, uint256 _triggerRatio, bool _triggerAboveThreshold) external nonReentrant {\\n        SwapOrder storage order = swapOrders[msg.sender][_orderIndex];\\n        require(order.account != address(0), \\\"OrderBook: non-existent order\\\");\\n\\n        order.minOut = _minOut;\\n        order.triggerRatio = _triggerRatio;\\n        order.triggerAboveThreshold = _triggerAboveThreshold;\\n\\n        emit UpdateSwapOrder(\\n            msg.sender,\\n            _orderIndex,\\n            order.path,\\n            order.amountIn,\\n            _minOut,\\n            _triggerRatio,\\n            _triggerAboveThreshold,\\n            order.shouldUnwrap,\\n            order.executionFee\\n        );\\n    }\\n\\n    function executeSwapOrder(address _account, uint256 _orderIndex, address payable _feeReceiver) override external nonReentrant {\\n        SwapOrder memory order = swapOrders[_account][_orderIndex];\\n        require(order.account != address(0), \\\"OrderBook: non-existent order\\\");\\n\\n        if (order.triggerAboveThreshold) {\\n            // gas optimisation\\n            // order.minAmount should prevent wrong price execution in case of simple limit order\\n            require(\\n                validateSwapOrderPriceWithTriggerAboveThreshold(order.path, order.triggerRatio),\\n                \\\"OrderBook: invalid price for execution\\\"\\n            );\\n        }\\n\\n        delete swapOrders[_account][_orderIndex];\\n\\n        IERC20(order.path[0]).safeTransfer(vault, order.amountIn);\\n\\n        uint256 _amountOut;\\n        if (order.path[order.path.length - 1] == weth && order.shouldUnwrap) {\\n            _amountOut = _swap(order.path, order.minOut, address(this));\\n            _transferOutETH(_amountOut, payable(order.account));\\n        } else {\\n            _amountOut = _swap(order.path, order.minOut, order.account);\\n        }\\n\\n        // pay executor\\n        _transferOutETH(order.executionFee, _feeReceiver);\\n\\n        emit ExecuteSwapOrder(\\n            _account,\\n            _orderIndex,\\n            order.path,\\n            order.amountIn,\\n            order.minOut,\\n            _amountOut,\\n            order.triggerRatio,\\n            order.triggerAboveThreshold,\\n            order.shouldUnwrap,\\n            order.executionFee\\n        );\\n    }\\n\\n    function validatePositionOrderPrice(\\n        bool _triggerAboveThreshold,\\n        uint256 _triggerPrice,\\n        address _indexToken,\\n        bool _maximizePrice,\\n        bool _raise\\n    ) public view returns (uint256, bool) {\\n        uint256 currentPrice = _maximizePrice\\n            ? IVault(vault).getMaxPrice(_indexToken) : IVault(vault).getMinPrice(_indexToken);\\n        bool isPriceValid = _triggerAboveThreshold ? currentPrice > _triggerPrice : currentPrice < _triggerPrice;\\n        if (_raise) {\\n            require(isPriceValid, \\\"OrderBook: invalid price for execution\\\");\\n        }\\n        return (currentPrice, isPriceValid);\\n    }\\n\\n    function getDecreaseOrder(address _account, uint256 _orderIndex) override public view returns (\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    ) {\\n        DecreaseOrder memory order = decreaseOrders[_account][_orderIndex];\\n        return (\\n            order.collateralToken,\\n            order.collateralDelta,\\n            order.indexToken,\\n            order.sizeDelta,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee\\n        );\\n    }\\n\\n    function getIncreaseOrder(address _account, uint256 _orderIndex) override public view returns (\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    ) {\\n        IncreaseOrder memory order = increaseOrders[_account][_orderIndex];\\n        return (\\n            order.purchaseToken,\\n            order.purchaseTokenAmount,\\n            order.collateralToken,\\n            order.indexToken,\\n            order.sizeDelta,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee\\n        );\\n    }\\n\\n    function createIncreaseOrder(\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        address _indexToken,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        address _collateralToken,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _executionFee,\\n        bool _shouldWrap\\n    ) external payable nonReentrant {\\n        // always need this call because of mandatory executionFee user has to transfer in ETH\\n        _transferInETH();\\n\\n        require(_executionFee >= minExecutionFee, \\\"OrderBook: insufficient execution fee\\\");\\n        if (_shouldWrap) {\\n            require(_path[0] == weth, \\\"OrderBook: only weth could be wrapped\\\");\\n            require(msg.value == _executionFee.add(_amountIn), \\\"OrderBook: incorrect value transferred\\\");\\n        } else {\\n            require(msg.value == _executionFee, \\\"OrderBook: incorrect execution fee transferred\\\");\\n            IRouter(router).pluginTransfer(_path[0], msg.sender, address(this), _amountIn);\\n        }\\n\\n        address _purchaseToken = _path[_path.length - 1];\\n        uint256 _purchaseTokenAmount;\\n        if (_path.length > 1) {\\n            require(_path[0] != _purchaseToken, \\\"OrderBook: invalid _path\\\");\\n            IERC20(_path[0]).safeTransfer(vault, _amountIn);\\n            _purchaseTokenAmount = _swap(_path, _minOut, address(this));\\n        } else {\\n            _purchaseTokenAmount = _amountIn;\\n        }\\n\\n        {\\n            uint256 _purchaseTokenAmountUsd = IVault(vault).tokenToUsdMin(_purchaseToken, _purchaseTokenAmount);\\n            require(_purchaseTokenAmountUsd >= minPurchaseTokenAmountUsd, \\\"OrderBook: insufficient collateral\\\");\\n        }\\n\\n        _createIncreaseOrder(\\n            msg.sender,\\n            _purchaseToken,\\n            _purchaseTokenAmount,\\n            _collateralToken,\\n            _indexToken,\\n            _sizeDelta,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold,\\n            _executionFee\\n        );\\n    }\\n\\n    function _createIncreaseOrder(\\n        address _account,\\n        address _purchaseToken,\\n        uint256 _purchaseTokenAmount,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _executionFee\\n    ) private {\\n        uint256 _orderIndex = increaseOrdersIndex[msg.sender];\\n        IncreaseOrder memory order = IncreaseOrder(\\n            _account,\\n            _purchaseToken,\\n            _purchaseTokenAmount,\\n            _collateralToken,\\n            _indexToken,\\n            _sizeDelta,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold,\\n            _executionFee\\n        );\\n        increaseOrdersIndex[_account] = _orderIndex.add(1);\\n        increaseOrders[_account][_orderIndex] = order;\\n\\n        emit CreateIncreaseOrder(\\n            _account,\\n            _orderIndex,\\n            _purchaseToken,\\n            _purchaseTokenAmount,\\n            _collateralToken,\\n            _indexToken,\\n            _sizeDelta,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold,\\n            _executionFee\\n        );\\n    }\\n\\n    function updateIncreaseOrder(uint256 _orderIndex, uint256 _sizeDelta, uint256 _triggerPrice, bool _triggerAboveThreshold) external nonReentrant {\\n        IncreaseOrder storage order = increaseOrders[msg.sender][_orderIndex];\\n        require(order.account != address(0), \\\"OrderBook: non-existent order\\\");\\n\\n        order.triggerPrice = _triggerPrice;\\n        order.triggerAboveThreshold = _triggerAboveThreshold;\\n        order.sizeDelta = _sizeDelta;\\n\\n        emit UpdateIncreaseOrder(\\n            msg.sender,\\n            _orderIndex,\\n            order.collateralToken,\\n            order.indexToken,\\n            order.isLong,\\n            _sizeDelta,\\n            _triggerPrice,\\n            _triggerAboveThreshold\\n        );\\n    }\\n\\n    function cancelIncreaseOrder(uint256 _orderIndex) public nonReentrant {\\n        IncreaseOrder memory order = increaseOrders[msg.sender][_orderIndex];\\n        require(order.account != address(0), \\\"OrderBook: non-existent order\\\");\\n\\n        delete increaseOrders[msg.sender][_orderIndex];\\n\\n        if (order.purchaseToken == weth) {\\n            _transferOutETH(order.executionFee.add(order.purchaseTokenAmount), msg.sender);\\n        } else {\\n            IERC20(order.purchaseToken).safeTransfer(msg.sender, order.purchaseTokenAmount);\\n            _transferOutETH(order.executionFee, msg.sender);\\n        }\\n\\n        emit CancelIncreaseOrder(\\n            order.account,\\n            _orderIndex,\\n            order.purchaseToken,\\n            order.purchaseTokenAmount,\\n            order.collateralToken,\\n            order.indexToken,\\n            order.sizeDelta,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee\\n        );\\n    }\\n\\n    function executeIncreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) override external nonReentrant {\\n        IncreaseOrder memory order = increaseOrders[_address][_orderIndex];\\n        require(order.account != address(0), \\\"OrderBook: non-existent order\\\");\\n\\n        // increase long should use max price\\n        // increase short should use min price\\n        (uint256 currentPrice, ) = validatePositionOrderPrice(\\n            order.triggerAboveThreshold,\\n            order.triggerPrice,\\n            order.indexToken,\\n            order.isLong,\\n            true\\n        );\\n\\n        delete increaseOrders[_address][_orderIndex];\\n\\n        IERC20(order.purchaseToken).safeTransfer(vault, order.purchaseTokenAmount);\\n\\n        if (order.purchaseToken != order.collateralToken) {\\n            address[] memory path = new address[](2);\\n            path[0] = order.purchaseToken;\\n            path[1] = order.collateralToken;\\n\\n            uint256 amountOut = _swap(path, 0, address(this));\\n            IERC20(order.collateralToken).safeTransfer(vault, amountOut);\\n        }\\n\\n        IRouter(router).pluginIncreasePosition(order.account, order.collateralToken, order.indexToken, order.sizeDelta, order.isLong);\\n\\n        // pay executor\\n        _transferOutETH(order.executionFee, _feeReceiver);\\n\\n        emit ExecuteIncreaseOrder(\\n            order.account,\\n            _orderIndex,\\n            order.purchaseToken,\\n            order.purchaseTokenAmount,\\n            order.collateralToken,\\n            order.indexToken,\\n            order.sizeDelta,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee,\\n            currentPrice\\n        );\\n    }\\n\\n    function createDecreaseOrder(\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        address _collateralToken,\\n        uint256 _collateralDelta,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold\\n    ) external payable nonReentrant {\\n        _transferInETH();\\n\\n        require(msg.value > minExecutionFee, \\\"OrderBook: insufficient execution fee\\\");\\n\\n        _createDecreaseOrder(\\n            msg.sender,\\n            _collateralToken,\\n            _collateralDelta,\\n            _indexToken,\\n            _sizeDelta,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold\\n        );\\n    }\\n\\n    function _createDecreaseOrder(\\n        address _account,\\n        address _collateralToken,\\n        uint256 _collateralDelta,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold\\n    ) private {\\n        uint256 _orderIndex = decreaseOrdersIndex[_account];\\n        DecreaseOrder memory order = DecreaseOrder(\\n            _account,\\n            _collateralToken,\\n            _collateralDelta,\\n            _indexToken,\\n            _sizeDelta,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold,\\n            msg.value\\n        );\\n        decreaseOrdersIndex[_account] = _orderIndex.add(1);\\n        decreaseOrders[_account][_orderIndex] = order;\\n\\n        emit CreateDecreaseOrder(\\n            _account,\\n            _orderIndex,\\n            _collateralToken,\\n            _collateralDelta,\\n            _indexToken,\\n            _sizeDelta,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold,\\n            msg.value\\n        );\\n    }\\n\\n    function executeDecreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) override external nonReentrant {\\n        DecreaseOrder memory order = decreaseOrders[_address][_orderIndex];\\n        require(order.account != address(0), \\\"OrderBook: non-existent order\\\");\\n\\n        // decrease long should use min price\\n        // decrease short should use max price\\n        (uint256 currentPrice, ) = validatePositionOrderPrice(\\n            order.triggerAboveThreshold,\\n            order.triggerPrice,\\n            order.indexToken,\\n            !order.isLong,\\n            true\\n        );\\n\\n        delete decreaseOrders[_address][_orderIndex];\\n\\n        uint256 amountOut = IRouter(router).pluginDecreasePosition(\\n            order.account,\\n            order.collateralToken,\\n            order.indexToken,\\n            order.collateralDelta,\\n            order.sizeDelta,\\n            order.isLong,\\n            address(this)\\n        );\\n\\n        // transfer released collateral to user\\n        if (order.collateralToken == weth) {\\n            _transferOutETH(amountOut, payable(order.account));\\n        } else {\\n            IERC20(order.collateralToken).safeTransfer(order.account, amountOut);\\n        }\\n\\n        // pay executor\\n        _transferOutETH(order.executionFee, _feeReceiver);\\n\\n        emit ExecuteDecreaseOrder(\\n            order.account,\\n            _orderIndex,\\n            order.collateralToken,\\n            order.collateralDelta,\\n            order.indexToken,\\n            order.sizeDelta,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee,\\n            currentPrice\\n        );\\n    }\\n\\n    function cancelDecreaseOrder(uint256 _orderIndex) public nonReentrant {\\n        DecreaseOrder memory order = decreaseOrders[msg.sender][_orderIndex];\\n        require(order.account != address(0), \\\"OrderBook: non-existent order\\\");\\n\\n        delete decreaseOrders[msg.sender][_orderIndex];\\n        _transferOutETH(order.executionFee, msg.sender);\\n\\n        emit CancelDecreaseOrder(\\n            order.account,\\n            _orderIndex,\\n            order.collateralToken,\\n            order.collateralDelta,\\n            order.indexToken,\\n            order.sizeDelta,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee\\n        );\\n    }\\n\\n    function updateDecreaseOrder(\\n        uint256 _orderIndex,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold\\n    ) external nonReentrant {\\n        DecreaseOrder storage order = decreaseOrders[msg.sender][_orderIndex];\\n        require(order.account != address(0), \\\"OrderBook: non-existent order\\\");\\n\\n        order.triggerPrice = _triggerPrice;\\n        order.triggerAboveThreshold = _triggerAboveThreshold;\\n        order.sizeDelta = _sizeDelta;\\n        order.collateralDelta = _collateralDelta;\\n\\n        emit UpdateDecreaseOrder(\\n            msg.sender,\\n            _orderIndex,\\n            order.collateralToken,\\n            _collateralDelta,\\n            order.indexToken,\\n            _sizeDelta,\\n            order.isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold\\n        );\\n    }\\n\\n    function _transferInETH() private {\\n        if (msg.value != 0) {\\n            IWETH(weth).deposit{value: msg.value}();\\n        }\\n    }\\n\\n    function _transferOutETH(uint256 _amountOut, address payable _receiver) private {\\n        IWETH(weth).withdraw(_amountOut);\\n        _receiver.sendValue(_amountOut);\\n    }\\n\\n    function _swap(address[] memory _path, uint256 _minOut, address _receiver) private returns (uint256) {\\n        if (_path.length == 2) {\\n            return _vaultSwap(_path[0], _path[1], _minOut, _receiver);\\n        }\\n        if (_path.length == 3) {\\n            uint256 midOut = _vaultSwap(_path[0], _path[1], 0, address(this));\\n            IERC20(_path[1]).safeTransfer(vault, midOut);\\n            return _vaultSwap(_path[1], _path[2], _minOut, _receiver);\\n        }\\n\\n        revert(\\\"OrderBook: invalid _path.length\\\");\\n    }\\n\\n    function _vaultSwap(address _tokenIn, address _tokenOut, uint256 _minOut, address _receiver) private returns (uint256) {\\n        uint256 amountOut;\\n\\n        if (_tokenOut == usdg) { // buyUSDG\\n            amountOut = IVault(vault).buyUSDG(_tokenIn, _receiver);\\n        } else if (_tokenIn == usdg) { // sellUSDG\\n            amountOut = IVault(vault).sellUSDG(_tokenOut, _receiver);\\n        } else { // swap\\n            amountOut = IVault(vault).swap(_tokenIn, _tokenOut, _receiver);\\n        }\\n\\n        require(amountOut >= _minOut, \\\"OrderBook: insufficient amountOut\\\");\\n        return amountOut;\\n    }\\n}\\n\"\n    },\n    \"contracts/peripherals/OrderBookReader.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\nimport \\\"../core/interfaces/IOrderBook.sol\\\";\\n\\ncontract OrderBookReader {\\n    using SafeMath for uint256;\\n\\n    struct Vars {\\n        uint256 i;\\n        uint256 index;\\n        address account;\\n        uint256 uintLength;\\n        uint256 addressLength;\\n    }\\n\\n    function getIncreaseOrders(\\n        address payable _orderBookAddress, \\n        address _account,\\n        uint256[] memory _indices\\n    ) external view returns (uint256[] memory, address[] memory) {\\n        Vars memory vars = Vars(0, 0, _account, 5, 3);\\n\\n        uint256[] memory uintProps = new uint256[](vars.uintLength * _indices.length);\\n        address[] memory addressProps = new address[](vars.addressLength * _indices.length);\\n\\n        IOrderBook orderBook = IOrderBook(_orderBookAddress);\\n\\n        while (vars.i < _indices.length) {\\n            vars.index = _indices[vars.i];\\n            (\\n                address purchaseToken,\\n                uint256 purchaseTokenAmount,\\n                address collateralToken,\\n                address indexToken,\\n                uint256 sizeDelta,\\n                bool isLong,\\n                uint256 triggerPrice,\\n                bool triggerAboveThreshold,\\n                // uint256 executionFee\\n            ) = orderBook.getIncreaseOrder(vars.account, vars.index);\\n\\n            uintProps[vars.i * vars.uintLength] = uint256(purchaseTokenAmount);\\n            uintProps[vars.i * vars.uintLength + 1] = uint256(sizeDelta);\\n            uintProps[vars.i * vars.uintLength + 2] = uint256(isLong ? 1 : 0);\\n            uintProps[vars.i * vars.uintLength + 3] = uint256(triggerPrice);\\n            uintProps[vars.i * vars.uintLength + 4] = uint256(triggerAboveThreshold ? 1 : 0);\\n\\n            addressProps[vars.i * vars.addressLength] = (purchaseToken);\\n            addressProps[vars.i * vars.addressLength + 1] = (collateralToken);\\n            addressProps[vars.i * vars.addressLength + 2] = (indexToken);\\n\\n            vars.i++;\\n        }\\n\\n        return (uintProps, addressProps);\\n    }\\n\\n    function getDecreaseOrders(\\n        address payable _orderBookAddress, \\n        address _account,\\n        uint256[] memory _indices\\n    ) external view returns (uint256[] memory, address[] memory) {\\n        Vars memory vars = Vars(0, 0, _account, 5, 2);\\n\\n        uint256[] memory uintProps = new uint256[](vars.uintLength * _indices.length);\\n        address[] memory addressProps = new address[](vars.addressLength * _indices.length);\\n\\n        IOrderBook orderBook = IOrderBook(_orderBookAddress);\\n\\n        while (vars.i < _indices.length) {\\n            vars.index = _indices[vars.i];\\n            (\\n                address collateralToken,\\n                uint256 collateralDelta,\\n                address indexToken,\\n                uint256 sizeDelta,\\n                bool isLong,\\n                uint256 triggerPrice,\\n                bool triggerAboveThreshold,\\n                // uint256 executionFee\\n            ) = orderBook.getDecreaseOrder(vars.account, vars.index);\\n\\n            uintProps[vars.i * vars.uintLength] = uint256(collateralDelta);\\n            uintProps[vars.i * vars.uintLength + 1] = uint256(sizeDelta);\\n            uintProps[vars.i * vars.uintLength + 2] = uint256(isLong ? 1 : 0);\\n            uintProps[vars.i * vars.uintLength + 3] = uint256(triggerPrice);\\n            uintProps[vars.i * vars.uintLength + 4] = uint256(triggerAboveThreshold ? 1 : 0);\\n\\n            addressProps[vars.i * vars.addressLength] = (collateralToken);\\n            addressProps[vars.i * vars.addressLength + 1] = (indexToken);\\n\\n            vars.i++;\\n        }\\n\\n        return (uintProps, addressProps);\\n    }\\n\\n    function getSwapOrders(\\n        address payable _orderBookAddress, \\n        address _account,\\n        uint256[] memory _indices\\n    ) external view returns (uint256[] memory, address[] memory) {\\n        Vars memory vars = Vars(0, 0, _account, 5, 3);\\n\\n        uint256[] memory uintProps = new uint256[](vars.uintLength * _indices.length);\\n        address[] memory addressProps = new address[](vars.addressLength * _indices.length);\\n\\n        IOrderBook orderBook = IOrderBook(_orderBookAddress);\\n\\n        while (vars.i < _indices.length) {\\n            vars.index = _indices[vars.i];\\n            (\\n                address path0,\\n                address path1,\\n                address path2,\\n                uint256 amountIn, \\n                uint256 minOut, \\n                uint256 triggerRatio, \\n                bool triggerAboveThreshold,\\n                bool shouldUnwrap,\\n                // uint256 executionFee\\n            ) = orderBook.getSwapOrder(vars.account, vars.index);\\n\\n            uintProps[vars.i * vars.uintLength] = uint256(amountIn);\\n            uintProps[vars.i * vars.uintLength + 1] = uint256(minOut);\\n            uintProps[vars.i * vars.uintLength + 2] = uint256(triggerRatio);\\n            uintProps[vars.i * vars.uintLength + 3] = uint256(triggerAboveThreshold ? 1 : 0);\\n            uintProps[vars.i * vars.uintLength + 4] = uint256(shouldUnwrap ? 1 : 0);\\n\\n            addressProps[vars.i * vars.addressLength] = (path0);\\n            addressProps[vars.i * vars.addressLength + 1] = (path1);\\n            addressProps[vars.i * vars.addressLength + 2] = (path2);\\n\\n            vars.i++;\\n        }\\n\\n        return (uintProps, addressProps);\\n    }\\n}\\n\"\n    },\n    \"contracts/core/PositionManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IOrderBook.sol\\\";\\n\\nimport \\\"../peripherals/interfaces/ITimelock.sol\\\";\\nimport \\\"./BasePositionManager.sol\\\";\\n\\ncontract PositionManager is BasePositionManager {\\n\\n    address public orderBook;\\n    bool public inLegacyMode;\\n\\n    bool public shouldValidateIncreaseOrder = true;\\n\\n    mapping (address => bool) public isOrderKeeper;\\n    mapping (address => bool) public isPartner;\\n    mapping (address => bool) public isLiquidator;\\n\\n    event SetOrderKeeper(address indexed account, bool isActive);\\n    event SetLiquidator(address indexed account, bool isActive);\\n    event SetPartner(address account, bool isActive);\\n    event SetInLegacyMode(bool inLegacyMode);\\n    event SetShouldValidateIncreaseOrder(bool shouldValidateIncreaseOrder);\\n\\n    modifier onlyOrderKeeper() {\\n        require(isOrderKeeper[msg.sender], \\\"PositionManager: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyLiquidator() {\\n        require(isLiquidator[msg.sender], \\\"PositionManager: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyPartnersOrLegacyMode() {\\n        require(isPartner[msg.sender] || inLegacyMode, \\\"PositionManager: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _vault,\\n        address _router,\\n        address _weth,\\n        uint256 _depositFee,\\n        address _orderBook\\n    ) public BasePositionManager(_vault, _router, _weth, _depositFee) {\\n        orderBook = _orderBook;\\n    }\\n\\n    function setOrderKeeper(address _account, bool _isActive) external onlyAdmin {\\n        isOrderKeeper[_account] = _isActive;\\n        emit SetOrderKeeper(_account, _isActive);\\n    }\\n\\n    function setLiquidator(address _account, bool _isActive) external onlyAdmin {\\n        isLiquidator[_account] = _isActive;\\n        emit SetLiquidator(_account, _isActive);\\n    }\\n\\n    function setPartner(address _account, bool _isActive) external onlyAdmin {\\n        isPartner[_account] = _isActive;\\n        emit SetPartner(_account, _isActive);\\n    }\\n\\n    function setInLegacyMode(bool _inLegacyMode) external onlyAdmin {\\n        inLegacyMode = _inLegacyMode;\\n        emit SetInLegacyMode(_inLegacyMode);\\n    }\\n\\n    function setShouldValidateIncreaseOrder(bool _shouldValidateIncreaseOrder) external onlyAdmin {\\n        shouldValidateIncreaseOrder = _shouldValidateIncreaseOrder;\\n        emit SetShouldValidateIncreaseOrder(_shouldValidateIncreaseOrder);\\n    }\\n\\n    function increasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _price\\n    ) external nonReentrant onlyPartnersOrLegacyMode {\\n        require(_path.length == 1 || _path.length == 2, \\\"PositionManager: invalid _path.length\\\");\\n\\n        if (_amountIn > 0) {\\n            if (_path.length == 1) {\\n                IRouter(router).pluginTransfer(_path[0], msg.sender, address(this), _amountIn);\\n            } else {\\n                IRouter(router).pluginTransfer(_path[0], msg.sender, vault, _amountIn);\\n                _amountIn = _swap(_path, _minOut, address(this));\\n            }\\n\\n            uint256 afterFeeAmount = _collectFees(msg.sender, _path, _amountIn, _indexToken, _isLong, _sizeDelta);\\n            IERC20(_path[_path.length - 1]).safeTransfer(vault, afterFeeAmount);\\n        }\\n\\n        _increasePosition(msg.sender, _path[_path.length - 1], _indexToken, _sizeDelta, _isLong, _price);\\n    }\\n\\n    function increasePositionETH(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _price\\n    ) external payable nonReentrant onlyPartnersOrLegacyMode {\\n        require(_path.length == 1 || _path.length == 2, \\\"PositionManager: invalid _path.length\\\");\\n        require(_path[0] == weth, \\\"PositionManager: invalid _path\\\");\\n\\n        if (msg.value > 0) {\\n            _transferInETH();\\n            uint256 _amountIn = msg.value;\\n\\n            if (_path.length > 1) {\\n                IERC20(weth).safeTransfer(vault, msg.value);\\n                _amountIn = _swap(_path, _minOut, address(this));\\n            }\\n\\n            uint256 afterFeeAmount = _collectFees(msg.sender, _path, _amountIn, _indexToken, _isLong, _sizeDelta);\\n            IERC20(_path[_path.length - 1]).safeTransfer(vault, afterFeeAmount);\\n        }\\n\\n        _increasePosition(msg.sender, _path[_path.length - 1], _indexToken, _sizeDelta, _isLong, _price);\\n    }\\n\\n    function decreasePosition(\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver,\\n        uint256 _price\\n    ) external nonReentrant onlyPartnersOrLegacyMode {\\n        _decreasePosition(msg.sender, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, _receiver, _price);\\n    }\\n\\n    function decreasePositionETH(\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address payable _receiver,\\n        uint256 _price\\n    ) external nonReentrant onlyPartnersOrLegacyMode {\\n        require(_collateralToken == weth, \\\"PositionManager: invalid _collateralToken\\\");\\n\\n        uint256 amountOut = _decreasePosition(msg.sender, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, address(this), _price);\\n        _transferOutETH(amountOut, _receiver);\\n    }\\n\\n    function decreasePositionAndSwap(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver,\\n        uint256 _price,\\n        uint256 _minOut\\n    ) external nonReentrant onlyPartnersOrLegacyMode {\\n        require(_path.length == 2, \\\"PositionManager: invalid _path.length\\\");\\n\\n        uint256 amount = _decreasePosition(msg.sender, _path[0], _indexToken, _collateralDelta, _sizeDelta, _isLong, address(this), _price);\\n        IERC20(_path[0]).safeTransfer(vault, amount);\\n        _swap(_path, _minOut, _receiver);\\n    }\\n\\n    function decreasePositionAndSwapETH(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address payable _receiver,\\n        uint256 _price,\\n        uint256 _minOut\\n    ) external nonReentrant onlyPartnersOrLegacyMode {\\n        require(_path.length == 2, \\\"PositionManager: invalid _path.length\\\");\\n        require(_path[_path.length - 1] == weth, \\\"PositionManager: invalid _path\\\");\\n\\n        uint256 amount = _decreasePosition(msg.sender, _path[0], _indexToken, _collateralDelta, _sizeDelta, _isLong, address(this), _price);\\n        IERC20(_path[0]).safeTransfer(vault, amount);\\n        uint256 amountOut = _swap(_path, _minOut, address(this));\\n        _transferOutETH(amountOut, _receiver);\\n    }\\n\\n    function liquidatePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        address _feeReceiver\\n    ) external nonReentrant onlyLiquidator {\\n        address _vault = vault;\\n        address timelock = IVault(_vault).gov();\\n\\n        ITimelock(timelock).enableLeverage(_vault);\\n        IVault(_vault).liquidatePosition(_account, _collateralToken, _indexToken, _isLong, _feeReceiver);\\n        ITimelock(timelock).disableLeverage(_vault);\\n    }\\n\\n    function executeSwapOrder(address _account, uint256 _orderIndex, address payable _feeReceiver) external onlyOrderKeeper {\\n        IOrderBook(orderBook).executeSwapOrder(_account, _orderIndex, _feeReceiver);\\n    }\\n\\n    function executeIncreaseOrder(address _account, uint256 _orderIndex, address payable _feeReceiver) external onlyOrderKeeper {\\n        uint256 sizeDelta =  _validateIncreaseOrder(_account, _orderIndex);\\n\\n        address _vault = vault;\\n        address timelock = IVault(_vault).gov();\\n\\n        ITimelock(timelock).enableLeverage(_vault);\\n        IOrderBook(orderBook).executeIncreaseOrder(_account, _orderIndex, _feeReceiver);\\n        ITimelock(timelock).disableLeverage(_vault);\\n\\n        _emitIncreasePositionReferral(_account, sizeDelta);\\n    }\\n\\n    function executeDecreaseOrder(address _account, uint256 _orderIndex, address payable _feeReceiver) external onlyOrderKeeper {\\n        address _vault = vault;\\n        address timelock = IVault(_vault).gov();\\n\\n        (\\n            , // _collateralToken\\n            , // _collateralDelta\\n            , // _indexToken\\n            uint256 _sizeDelta,\\n            , // _isLong\\n            , // triggerPrice\\n            , // triggerAboveThreshold\\n            // executionFee\\n        ) = IOrderBook(orderBook).getDecreaseOrder(_account, _orderIndex);\\n\\n        ITimelock(timelock).enableLeverage(_vault);\\n        IOrderBook(orderBook).executeDecreaseOrder(_account, _orderIndex, _feeReceiver);\\n        ITimelock(timelock).disableLeverage(_vault);\\n\\n        _emitDecreasePositionReferral(_account, _sizeDelta);\\n    }\\n\\n    function _validateIncreaseOrder(address _account, uint256 _orderIndex) internal view returns (uint256) {\\n        (\\n            address _purchaseToken,\\n            uint256 _purchaseTokenAmount,\\n            address _collateralToken,\\n            address _indexToken,\\n            uint256 _sizeDelta,\\n            bool _isLong,\\n            , // triggerPrice\\n            , // triggerAboveThreshold\\n            // executionFee\\n        ) = IOrderBook(orderBook).getIncreaseOrder(_account, _orderIndex);\\n\\n        if (!shouldValidateIncreaseOrder) { return _sizeDelta; }\\n\\n        // shorts are okay\\n        if (!_isLong) { return _sizeDelta; }\\n\\n        // if the position size is not increasing, this is a collateral deposit\\n        require(_sizeDelta > 0, \\\"PositionManager: long deposit\\\");\\n\\n        IVault _vault = IVault(vault);\\n        (uint256 size, uint256 collateral, , , , , , ) = _vault.getPosition(_account, _collateralToken, _indexToken, _isLong);\\n\\n        // if there is no existing position, do not charge a fee\\n        if (size == 0) { return _sizeDelta; }\\n\\n        uint256 nextSize = size.add(_sizeDelta);\\n        uint256 collateralDelta = _vault.tokenToUsdMin(_purchaseToken, _purchaseTokenAmount);\\n        uint256 nextCollateral = collateral.add(collateralDelta);\\n\\n        uint256 prevLeverage = size.mul(BASIS_POINTS_DIVISOR).div(collateral);\\n        // allow for a maximum of a increasePositionBufferBps decrease since there might be some swap fees taken from the collateral\\n        uint256 nextLeverageWithBuffer = nextSize.mul(BASIS_POINTS_DIVISOR + increasePositionBufferBps).div(nextCollateral);\\n\\n        require(nextLeverageWithBuffer >= prevLeverage, \\\"PositionManager: long leverage decrease\\\");\\n\\n        return _sizeDelta;\\n    }\\n}\\n\"\n    },\n    \"contracts/core/OrderExecutor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IOrderBook.sol\\\";\\nimport \\\"../peripherals/interfaces/ITimelock.sol\\\";\\n\\ncontract OrderExecutor {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    address public vault;\\n    address public orderBook;\\n\\n    constructor(address _vault, address _orderBook) public {\\n        require(_vault != address(0) && _orderBook != address(0), \\\"OrderExecutor: invalid address\\\");\\n        vault = _vault;\\n        orderBook = _orderBook;\\n    }\\n\\n    function executeSwapOrder(address _account, uint256 _orderIndex, address payable _feeReceiver) external {\\n        IOrderBook(orderBook).executeSwapOrder(_account, _orderIndex, _feeReceiver);\\n    }\\n\\n    function executeIncreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) external {\\n        _validateIncreaseOrder(_address, _orderIndex);\\n        address timelock = IVault(vault).gov();\\n        ITimelock(timelock).setIsLeverageEnabled(vault, true);\\n        IOrderBook(orderBook).executeIncreaseOrder(_address, _orderIndex, _feeReceiver);\\n        ITimelock(timelock).setIsLeverageEnabled(vault, false);\\n    }\\n\\n    function executeDecreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) external {\\n        IOrderBook(orderBook).executeDecreaseOrder(_address, _orderIndex, _feeReceiver);\\n    }\\n\\n    function _validateIncreaseOrder(address _account, uint256 _orderIndex) internal view {\\n        (\\n            address _purchaseToken,\\n            uint256 _purchaseTokenAmount,\\n            address _collateralToken,\\n            address _indexToken,\\n            uint256 _sizeDelta,\\n            bool _isLong,\\n            , // triggerPrice\\n            , // triggerAboveThreshold\\n            // executionFee\\n        ) = IOrderBook(orderBook).getIncreaseOrder(_account, _orderIndex);\\n\\n        // shorts are okay\\n        if (!_isLong) { return; }\\n\\n        // if the position size is not increasing, this is a collateral deposit\\n        require(_sizeDelta > 0, \\\"OrderExecutor: long deposit\\\");\\n\\n        IVault _vault = IVault(vault);\\n        (uint256 size, uint256 collateral, , , , , , ) = _vault.getPosition(_account, _collateralToken, _indexToken, _isLong);\\n\\n        // if there is no existing position, do not charge a fee\\n        if (size == 0) { return; }\\n\\n        uint256 nextSize = size.add(_sizeDelta);\\n        uint256 collateralDelta = _vault.tokenToUsdMin(_purchaseToken, _purchaseTokenAmount);\\n        uint256 nextCollateral = collateral.add(collateralDelta);\\n\\n        uint256 prevLeverage = size.mul(BASIS_POINTS_DIVISOR).div(collateral);\\n        // add 100 to allow for a maximum of a 1% decrease since there might be some swap fees taken from the collateral\\n        uint256 nextLeverageWithBuffer = nextSize.mul(BASIS_POINTS_DIVISOR + 100).div(nextCollateral);\\n\\n        require(nextLeverageWithBuffer >= prevLeverage, \\\"OrderExecutor: long leverage decrease\\\");\\n    }\\n}\"\n    },\n    \"contracts/staking/BonusDistributor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IRewardDistributor.sol\\\";\\nimport \\\"./interfaces/IRewardTracker.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\ncontract BonusDistributor is IRewardDistributor, ReentrancyGuard, Governable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant BONUS_DURATION = 365 days;\\n\\n    uint256 public bonusMultiplierBasisPoints;\\n\\n    address public override rewardToken;\\n    uint256 public lastDistributionTime;\\n    address public rewardTracker;\\n\\n    address public admin;\\n\\n    event Distribute(uint256 amount);\\n    event BonusMultiplierChange(uint256 amount);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"BonusDistributor: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(address _rewardToken, address _rewardTracker) public {\\n        rewardToken = _rewardToken;\\n        rewardTracker = _rewardTracker;\\n        admin = msg.sender;\\n    }\\n\\n    function setAdmin(address _admin) external onlyGov {\\n        admin = _admin;\\n    }\\n\\n    // to help users who accidentally send their tokens to this contract\\n    function withdrawToken(address _token, address _account, uint256 _amount) external onlyGov {\\n        IERC20(_token).safeTransfer(_account, _amount);\\n    }\\n\\n    function updateLastDistributionTime() external onlyAdmin {\\n        lastDistributionTime = block.timestamp;\\n    }\\n\\n    function setBonusMultiplier(uint256 _bonusMultiplierBasisPoints) external onlyAdmin {\\n        require(lastDistributionTime != 0, \\\"BonusDistributor: invalid lastDistributionTime\\\");\\n        IRewardTracker(rewardTracker).updateRewards();\\n        bonusMultiplierBasisPoints = _bonusMultiplierBasisPoints;\\n        emit BonusMultiplierChange(_bonusMultiplierBasisPoints);\\n    }\\n\\n    function tokensPerInterval() public view override returns (uint256) {\\n        uint256 supply = IERC20(rewardTracker).totalSupply();\\n        return supply.mul(bonusMultiplierBasisPoints).div(BASIS_POINTS_DIVISOR).div(BONUS_DURATION);\\n    }\\n\\n    function pendingRewards() public view override returns (uint256) {\\n        if (block.timestamp == lastDistributionTime) {\\n            return 0;\\n        }\\n\\n        uint256 supply = IERC20(rewardTracker).totalSupply();\\n        uint256 timeDiff = block.timestamp.sub(lastDistributionTime);\\n\\n        return timeDiff.mul(supply).mul(bonusMultiplierBasisPoints).div(BASIS_POINTS_DIVISOR).div(BONUS_DURATION);\\n    }\\n\\n    function distribute() external override returns (uint256) {\\n        require(msg.sender == rewardTracker, \\\"BonusDistributor: invalid msg.sender\\\");\\n        uint256 amount = pendingRewards();\\n        if (amount == 0) { return 0; }\\n\\n        lastDistributionTime = block.timestamp;\\n\\n        uint256 balance = IERC20(rewardToken).balanceOf(address(this));\\n        if (amount > balance) { amount = balance; }\\n\\n        IERC20(rewardToken).safeTransfer(msg.sender, amount);\\n\\n        emit Distribute(amount);\\n        return amount;\\n    }\\n}\\n\"\n    },\n    \"contracts/core/XlxManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IXlxManager.sol\\\";\\nimport \\\"../tokens/interfaces/IUSDG.sol\\\";\\nimport \\\"../tokens/interfaces/IMintable.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\npragma solidity 0.6.12;\\n\\ncontract XlxManager is ReentrancyGuard, Governable, IXlxManager {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\\n    uint256 public constant USDG_DECIMALS = 18;\\n    uint256 public constant MAX_COOLDOWN_DURATION = 48 hours;\\n\\n    IVault public vault;\\n    address public override usdg;\\n    address public xlx;\\n\\n    uint256 public override cooldownDuration;\\n    mapping (address => uint256) public override lastAddedAt;\\n\\n    uint256 public aumAddition;\\n    uint256 public aumDeduction;\\n\\n    bool public inPrivateMode;\\n    mapping (address => bool) public isHandler;\\n\\n    event AddLiquidity(\\n        address account,\\n        address token,\\n        uint256 amount,\\n        uint256 aumInUsdg,\\n        uint256 xlxSupply,\\n        uint256 usdgAmount,\\n        uint256 mintAmount\\n    );\\n\\n    event RemoveLiquidity(\\n        address account,\\n        address token,\\n        uint256 xlxAmount,\\n        uint256 aumInUsdg,\\n        uint256 xlxSupply,\\n        uint256 usdgAmount,\\n        uint256 amountOut\\n    );\\n\\n    constructor(address _vault, address _usdg, address _xlx, uint256 _cooldownDuration) public {\\n        gov = msg.sender;\\n        vault = IVault(_vault);\\n        usdg = _usdg;\\n        xlx = _xlx;\\n        cooldownDuration = _cooldownDuration;\\n    }\\n\\n    function setInPrivateMode(bool _inPrivateMode) external onlyGov {\\n        inPrivateMode = _inPrivateMode;\\n    }\\n\\n    function setHandler(address _handler, bool _isActive) external onlyGov {\\n        isHandler[_handler] = _isActive;\\n    }\\n\\n    function setCooldownDuration(uint256 _cooldownDuration) external onlyGov {\\n        require(_cooldownDuration <= MAX_COOLDOWN_DURATION, \\\"XlxManager: invalid _cooldownDuration\\\");\\n        cooldownDuration = _cooldownDuration;\\n    }\\n\\n    function setAumAdjustment(uint256 _aumAddition, uint256 _aumDeduction) external onlyGov {\\n        aumAddition = _aumAddition;\\n        aumDeduction = _aumDeduction;\\n    }\\n\\n    function addLiquidity(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minXlx) external override nonReentrant returns (uint256) {\\n        if (inPrivateMode) { revert(\\\"XlxManager: action not enabled\\\"); }\\n        return _addLiquidity(msg.sender, msg.sender, _token, _amount, _minUsdg, _minXlx);\\n    }\\n\\n    function addLiquidityForAccount(address _fundingAccount, address _account, address _token, uint256 _amount, uint256 _minUsdg, uint256 _minXlx) external override nonReentrant returns (uint256) {\\n        _validateHandler();\\n        return _addLiquidity(_fundingAccount, _account, _token, _amount, _minUsdg, _minXlx);\\n    }\\n\\n    function removeLiquidity(address _tokenOut, uint256 _xlxAmount, uint256 _minOut, address _receiver) external override nonReentrant returns (uint256) {\\n        if (inPrivateMode) { revert(\\\"XlxManager: action not enabled\\\"); }\\n        return _removeLiquidity(msg.sender, _tokenOut, _xlxAmount, _minOut, _receiver);\\n    }\\n\\n    function removeLiquidityForAccount(address _account, address _tokenOut, uint256 _xlxAmount, uint256 _minOut, address _receiver) external override nonReentrant returns (uint256) {\\n        _validateHandler();\\n        return _removeLiquidity(_account, _tokenOut, _xlxAmount, _minOut, _receiver);\\n    }\\n\\n    function getAums() public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](2);\\n        amounts[0] = getAum(true);\\n        amounts[1] = getAum(false);\\n        return amounts;\\n    }\\n\\n    function getAumInUsdg(bool maximise) public override view returns (uint256) {\\n        uint256 aum = getAum(maximise);\\n        return aum.mul(10 ** USDG_DECIMALS).div(PRICE_PRECISION);\\n    }\\n\\n    function getAum(bool maximise) public view returns (uint256) {\\n        uint256 length = vault.allWhitelistedTokensLength();\\n        uint256 aum = aumAddition;\\n        uint256 shortProfits = 0;\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            address token = vault.allWhitelistedTokens(i);\\n            bool isWhitelisted = vault.whitelistedTokens(token);\\n\\n            if (!isWhitelisted) {\\n                continue;\\n            }\\n\\n            uint256 price = maximise ? vault.getMaxPrice(token) : vault.getMinPrice(token);\\n            uint256 poolAmount = vault.poolAmounts(token);\\n            uint256 decimals = vault.tokenDecimals(token);\\n\\n            if (vault.stableTokens(token)) {\\n                aum = aum.add(poolAmount.mul(price).div(10 ** decimals));\\n            } else {\\n                // add global short profit / loss\\n                uint256 size = vault.globalShortSizes(token);\\n                if (size > 0) {\\n                    uint256 averagePrice = vault.globalShortAveragePrices(token);\\n                    uint256 priceDelta = averagePrice > price ? averagePrice.sub(price) : price.sub(averagePrice);\\n                    uint256 delta = size.mul(priceDelta).div(averagePrice);\\n                    if (price > averagePrice) {\\n                        // add losses from shorts\\n                        aum = aum.add(delta);\\n                    } else {\\n                        shortProfits = shortProfits.add(delta);\\n                    }\\n                }\\n\\n                aum = aum.add(vault.guaranteedUsd(token));\\n\\n                uint256 reservedAmount = vault.reservedAmounts(token);\\n                aum = aum.add(poolAmount.sub(reservedAmount).mul(price).div(10 ** decimals));\\n            }\\n        }\\n\\n        aum = shortProfits > aum ? 0 : aum.sub(shortProfits);\\n        return aumDeduction > aum ? 0 : aum.sub(aumDeduction);\\n    }\\n\\n    function _addLiquidity(address _fundingAccount, address _account, address _token, uint256 _amount, uint256 _minUsdg, uint256 _minXlx) private returns (uint256) {\\n        require(_amount > 0, \\\"XlxManager: invalid _amount\\\");\\n\\n        // calculate aum before buyUSDG\\n        uint256 aumInUsdg = getAumInUsdg(true);\\n        uint256 xlxSupply = IERC20(xlx).totalSupply();\\n\\n        IERC20(_token).safeTransferFrom(_fundingAccount, address(vault), _amount);\\n        uint256 usdgAmount = vault.buyUSDG(_token, address(this));\\n        require(usdgAmount >= _minUsdg, \\\"XlxManager: insufficient USDG output\\\");\\n\\n        uint256 mintAmount = aumInUsdg == 0 ? usdgAmount : usdgAmount.mul(xlxSupply).div(aumInUsdg);\\n        require(mintAmount >= _minXlx, \\\"XlxManager: insufficient XLX output\\\");\\n\\n        IMintable(xlx).mint(_account, mintAmount);\\n\\n        lastAddedAt[_account] = block.timestamp;\\n\\n        emit AddLiquidity(_account, _token, _amount, aumInUsdg, xlxSupply, usdgAmount, mintAmount);\\n\\n        return mintAmount;\\n    }\\n\\n    function _removeLiquidity(address _account, address _tokenOut, uint256 _xlxAmount, uint256 _minOut, address _receiver) private returns (uint256) {\\n        require(_xlxAmount > 0, \\\"XlxManager: invalid _xlxAmount\\\");\\n        require(lastAddedAt[_account].add(cooldownDuration) <= block.timestamp, \\\"XlxManager: cooldown duration not yet passed\\\");\\n\\n        // calculate aum before sellUSDG\\n        uint256 aumInUsdg = getAumInUsdg(false);\\n        uint256 xlxSupply = IERC20(xlx).totalSupply();\\n\\n        uint256 usdgAmount = _xlxAmount.mul(aumInUsdg).div(xlxSupply);\\n        uint256 usdgBalance = IERC20(usdg).balanceOf(address(this));\\n        if (usdgAmount > usdgBalance) {\\n            IUSDG(usdg).mint(address(this), usdgAmount.sub(usdgBalance));\\n        }\\n\\n        IMintable(xlx).burn(_account, _xlxAmount);\\n\\n        IERC20(usdg).transfer(address(vault), usdgAmount);\\n        uint256 amountOut = vault.sellUSDG(_tokenOut, _receiver);\\n        require(amountOut >= _minOut, \\\"XlxManager: insufficient output\\\");\\n\\n        emit RemoveLiquidity(_account, _tokenOut, _xlxAmount, aumInUsdg, xlxSupply, usdgAmount, amountOut);\\n\\n        return amountOut;\\n    }\\n\\n    function _validateHandler() private view {\\n        require(isHandler[msg.sender], \\\"XlxManager: forbidden\\\");\\n    }\\n}\\n\"\n    },\n    \"contracts/core/Vault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../tokens/interfaces/IUSDG.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IVaultUtils.sol\\\";\\nimport \\\"./interfaces/IVaultPriceFeed.sol\\\";\\n\\ncontract Vault is ReentrancyGuard, IVault {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct Position {\\n        uint256 size;\\n        uint256 collateral;\\n        uint256 averagePrice;\\n        uint256 entryFundingRate;\\n        uint256 reserveAmount;\\n        int256 realisedPnl;\\n        uint256 lastIncreasedTime;\\n    }\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\\n    uint256 public constant MIN_LEVERAGE = 10000; // 1x\\n    uint256 public constant USDG_DECIMALS = 18;\\n    uint256 public constant MAX_FEE_BASIS_POINTS = 500; // 5%\\n    uint256 public constant MAX_LIQUIDATION_FEE_USD = 100 * PRICE_PRECISION; // 100 USD\\n    uint256 public constant MIN_FUNDING_RATE_INTERVAL = 1 hours;\\n    uint256 public constant MAX_FUNDING_RATE_FACTOR = 10000; // 1%\\n\\n    bool public override isInitialized;\\n    bool public override isSwapEnabled = true;\\n    bool public override isLeverageEnabled = true;\\n\\n    IVaultUtils public vaultUtils;\\n\\n    address public errorController;\\n\\n    address public override router;\\n    address public override priceFeed;\\n\\n    address public override usdg;\\n    address public override gov;\\n\\n    uint256 public override whitelistedTokenCount;\\n\\n    uint256 public override maxLeverage = 50 * 10000; // 50x\\n\\n    uint256 public override liquidationFeeUsd;\\n    uint256 public override taxBasisPoints = 50; // 0.5%\\n    uint256 public override stableTaxBasisPoints = 20; // 0.2%\\n    uint256 public override mintBurnFeeBasisPoints = 30; // 0.3%\\n    uint256 public override swapFeeBasisPoints = 30; // 0.3%\\n    uint256 public override stableSwapFeeBasisPoints = 4; // 0.04%\\n    uint256 public override marginFeeBasisPoints = 10; // 0.1%\\n\\n    uint256 public override minProfitTime;\\n    bool public override hasDynamicFees = false;\\n\\n    uint256 public override fundingInterval = 8 hours;\\n    uint256 public override fundingRateFactor;\\n    uint256 public override stableFundingRateFactor;\\n    uint256 public override totalTokenWeights;\\n\\n    bool public includeAmmPrice = true;\\n    bool public useSwapPricing = false;\\n\\n    bool public override inManagerMode = false;\\n    bool public override inPrivateLiquidationMode = false;\\n\\n    uint256 public override maxGasPrice;\\n\\n    mapping (address => mapping (address => bool)) public override approvedRouters;\\n    mapping (address => bool) public override isLiquidator;\\n    mapping (address => bool) public override isManager;\\n\\n    address[] public override allWhitelistedTokens;\\n\\n    mapping (address => bool) public override whitelistedTokens;\\n    mapping (address => uint256) public override tokenDecimals;\\n    mapping (address => uint256) public override minProfitBasisPoints;\\n    mapping (address => bool) public override stableTokens;\\n    mapping (address => bool) public override shortableTokens;\\n\\n    // tokenBalances is used only to determine _transferIn values\\n    mapping (address => uint256) public override tokenBalances;\\n\\n    // tokenWeights allows customisation of index composition\\n    mapping (address => uint256) public override tokenWeights;\\n\\n    // usdgAmounts tracks the amount of USDG debt for each whitelisted token\\n    mapping (address => uint256) public override usdgAmounts;\\n\\n    // maxUsdgAmounts allows setting a max amount of USDG debt for a token\\n    mapping (address => uint256) public override maxUsdgAmounts;\\n\\n    // poolAmounts tracks the number of received tokens that can be used for leverage\\n    // this is tracked separately from tokenBalances to exclude funds that are deposited as margin collateral\\n    mapping (address => uint256) public override poolAmounts;\\n\\n    // reservedAmounts tracks the number of tokens reserved for open leverage positions\\n    mapping (address => uint256) public override reservedAmounts;\\n\\n    // bufferAmounts allows specification of an amount to exclude from swaps\\n    // this can be used to ensure a certain amount of liquidity is available for leverage positions\\n    mapping (address => uint256) public override bufferAmounts;\\n\\n    // guaranteedUsd tracks the amount of USD that is \\\"guaranteed\\\" by opened leverage positions\\n    // this value is used to calculate the redemption values for selling of USDG\\n    // this is an estimated amount, it is possible for the actual guaranteed value to be lower\\n    // in the case of sudden price decreases, the guaranteed value should be corrected\\n    // after liquidations are carried out\\n    mapping (address => uint256) public override guaranteedUsd;\\n\\n    // cumulativeFundingRates tracks the funding rates based on utilization\\n    mapping (address => uint256) public override cumulativeFundingRates;\\n    // lastFundingTimes tracks the last time funding was updated for a token\\n    mapping (address => uint256) public override lastFundingTimes;\\n\\n    // positions tracks all open positions\\n    mapping (bytes32 => Position) public positions;\\n\\n    // feeReserves tracks the amount of fees per token\\n    mapping (address => uint256) public override feeReserves;\\n\\n    mapping (address => uint256) public override globalShortSizes;\\n    mapping (address => uint256) public override globalShortAveragePrices;\\n    mapping (address => uint256) public override maxGlobalShortSizes;\\n\\n    mapping (uint256 => string) public errors;\\n\\n    event BuyUSDG(address account, address token, uint256 tokenAmount, uint256 usdgAmount, uint256 feeBasisPoints);\\n    event SellUSDG(address account, address token, uint256 usdgAmount, uint256 tokenAmount, uint256 feeBasisPoints);\\n    event Swap(address account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut, uint256 amountOutAfterFees, uint256 feeBasisPoints);\\n\\n    event IncreasePosition(\\n        bytes32 key,\\n        address account,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 collateralDelta,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 price,\\n        uint256 fee\\n    );\\n    event DecreasePosition(\\n        bytes32 key,\\n        address account,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 collateralDelta,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 price,\\n        uint256 fee\\n    );\\n    event LiquidatePosition(\\n        bytes32 key,\\n        address account,\\n        address collateralToken,\\n        address indexToken,\\n        bool isLong,\\n        uint256 size,\\n        uint256 collateral,\\n        uint256 reserveAmount,\\n        int256 realisedPnl,\\n        uint256 markPrice\\n    );\\n    event UpdatePosition(\\n        bytes32 key,\\n        uint256 size,\\n        uint256 collateral,\\n        uint256 averagePrice,\\n        uint256 entryFundingRate,\\n        uint256 reserveAmount,\\n        int256 realisedPnl,\\n        uint256 markPrice\\n    );\\n    event ClosePosition(\\n        bytes32 key,\\n        uint256 size,\\n        uint256 collateral,\\n        uint256 averagePrice,\\n        uint256 entryFundingRate,\\n        uint256 reserveAmount,\\n        int256 realisedPnl\\n    );\\n\\n    event UpdateFundingRate(address token, uint256 fundingRate);\\n    event UpdatePnl(bytes32 key, bool hasProfit, uint256 delta);\\n\\n    event CollectSwapFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event CollectMarginFees(address token, uint256 feeUsd, uint256 feeTokens);\\n\\n    event DirectPoolDeposit(address token, uint256 amount);\\n    event IncreasePoolAmount(address token, uint256 amount);\\n    event DecreasePoolAmount(address token, uint256 amount);\\n    event IncreaseUsdgAmount(address token, uint256 amount);\\n    event DecreaseUsdgAmount(address token, uint256 amount);\\n    event IncreaseReservedAmount(address token, uint256 amount);\\n    event DecreaseReservedAmount(address token, uint256 amount);\\n    event IncreaseGuaranteedUsd(address token, uint256 amount);\\n    event DecreaseGuaranteedUsd(address token, uint256 amount);\\n\\n    // once the parameters are verified to be working correctly,\\n    // gov should be set to a timelock contract or a governance contract\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    function initialize(\\n        address _router,\\n        address _usdg,\\n        address _priceFeed,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _fundingRateFactor,\\n        uint256 _stableFundingRateFactor\\n    ) external {\\n        _onlyGov();\\n        _validate(!isInitialized, 1);\\n        isInitialized = true;\\n\\n        router = _router;\\n        usdg = _usdg;\\n        priceFeed = _priceFeed;\\n        liquidationFeeUsd = _liquidationFeeUsd;\\n        fundingRateFactor = _fundingRateFactor;\\n        stableFundingRateFactor = _stableFundingRateFactor;\\n    }\\n\\n    function setVaultUtils(IVaultUtils _vaultUtils) external override {\\n        _onlyGov();\\n        vaultUtils = _vaultUtils;\\n    }\\n\\n    function setErrorController(address _errorController) external {\\n        _onlyGov();\\n        errorController = _errorController;\\n    }\\n\\n    function setError(uint256 _errorCode, string calldata _error) external override {\\n        require(msg.sender == errorController, \\\"Vault: invalid errorController\\\");\\n        errors[_errorCode] = _error;\\n    }\\n\\n    function allWhitelistedTokensLength() external override view returns (uint256) {\\n        return allWhitelistedTokens.length;\\n    }\\n\\n    function setInManagerMode(bool _inManagerMode) external override {\\n        _onlyGov();\\n        inManagerMode = _inManagerMode;\\n    }\\n\\n    function setManager(address _manager, bool _isManager) external override {\\n        _onlyGov();\\n        isManager[_manager] = _isManager;\\n    }\\n\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external override {\\n        _onlyGov();\\n        inPrivateLiquidationMode = _inPrivateLiquidationMode;\\n    }\\n\\n    function setLiquidator(address _liquidator, bool _isActive) external override {\\n        _onlyGov();\\n        isLiquidator[_liquidator] = _isActive;\\n    }\\n\\n    function setIsSwapEnabled(bool _isSwapEnabled) external override {\\n        _onlyGov();\\n        isSwapEnabled = _isSwapEnabled;\\n    }\\n\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external override {\\n        _onlyGov();\\n        isLeverageEnabled = _isLeverageEnabled;\\n    }\\n\\n    function setMaxGasPrice(uint256 _maxGasPrice) external override {\\n        _onlyGov();\\n        maxGasPrice = _maxGasPrice;\\n    }\\n\\n    function setGov(address _gov) external {\\n        _onlyGov();\\n        gov = _gov;\\n    }\\n\\n    function setPriceFeed(address _priceFeed) external override {\\n        _onlyGov();\\n        priceFeed = _priceFeed;\\n    }\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external override {\\n        _onlyGov();\\n        _validate(_maxLeverage > MIN_LEVERAGE, 2);\\n        maxLeverage = _maxLeverage;\\n    }\\n\\n    function setBufferAmount(address _token, uint256 _amount) external override {\\n        _onlyGov();\\n        bufferAmounts[_token] = _amount;\\n    }\\n\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external override {\\n        _onlyGov();\\n        maxGlobalShortSizes[_token] = _amount;\\n    }\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external override {\\n        _onlyGov();\\n        _validate(_taxBasisPoints <= MAX_FEE_BASIS_POINTS, 3);\\n        _validate(_stableTaxBasisPoints <= MAX_FEE_BASIS_POINTS, 4);\\n        _validate(_mintBurnFeeBasisPoints <= MAX_FEE_BASIS_POINTS, 5);\\n        _validate(_swapFeeBasisPoints <= MAX_FEE_BASIS_POINTS, 6);\\n        _validate(_stableSwapFeeBasisPoints <= MAX_FEE_BASIS_POINTS, 7);\\n        _validate(_marginFeeBasisPoints <= MAX_FEE_BASIS_POINTS, 8);\\n        _validate(_liquidationFeeUsd <= MAX_LIQUIDATION_FEE_USD, 9);\\n        taxBasisPoints = _taxBasisPoints;\\n        stableTaxBasisPoints = _stableTaxBasisPoints;\\n        mintBurnFeeBasisPoints = _mintBurnFeeBasisPoints;\\n        swapFeeBasisPoints = _swapFeeBasisPoints;\\n        stableSwapFeeBasisPoints = _stableSwapFeeBasisPoints;\\n        marginFeeBasisPoints = _marginFeeBasisPoints;\\n        liquidationFeeUsd = _liquidationFeeUsd;\\n        minProfitTime = _minProfitTime;\\n        hasDynamicFees = _hasDynamicFees;\\n    }\\n\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external override {\\n        _onlyGov();\\n        _validate(_fundingInterval >= MIN_FUNDING_RATE_INTERVAL, 10);\\n        _validate(_fundingRateFactor <= MAX_FUNDING_RATE_FACTOR, 11);\\n        _validate(_stableFundingRateFactor <= MAX_FUNDING_RATE_FACTOR, 12);\\n        fundingInterval = _fundingInterval;\\n        fundingRateFactor = _fundingRateFactor;\\n        stableFundingRateFactor = _stableFundingRateFactor;\\n    }\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _tokenWeight,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external override {\\n        _onlyGov();\\n        // increment token count for the first time\\n        if (!whitelistedTokens[_token]) {\\n            whitelistedTokenCount = whitelistedTokenCount.add(1);\\n            allWhitelistedTokens.push(_token);\\n        }\\n\\n        uint256 _totalTokenWeights = totalTokenWeights;\\n        _totalTokenWeights = _totalTokenWeights.sub(tokenWeights[_token]);\\n\\n        whitelistedTokens[_token] = true;\\n        tokenDecimals[_token] = _tokenDecimals;\\n        tokenWeights[_token] = _tokenWeight;\\n        minProfitBasisPoints[_token] = _minProfitBps;\\n        maxUsdgAmounts[_token] = _maxUsdgAmount;\\n        stableTokens[_token] = _isStable;\\n        shortableTokens[_token] = _isShortable;\\n\\n        totalTokenWeights = _totalTokenWeights.add(_tokenWeight);\\n\\n        // validate price feed\\n        getMaxPrice(_token);\\n    }\\n\\n    function clearTokenConfig(address _token) external {\\n        _onlyGov();\\n        _validate(whitelistedTokens[_token], 13);\\n        totalTokenWeights = totalTokenWeights.sub(tokenWeights[_token]);\\n        delete whitelistedTokens[_token];\\n        delete tokenDecimals[_token];\\n        delete tokenWeights[_token];\\n        delete minProfitBasisPoints[_token];\\n        delete maxUsdgAmounts[_token];\\n        delete stableTokens[_token];\\n        delete shortableTokens[_token];\\n        whitelistedTokenCount = whitelistedTokenCount.sub(1);\\n    }\\n\\n    function withdrawFees(address _token, address _receiver) external override returns (uint256) {\\n        _onlyGov();\\n        uint256 amount = feeReserves[_token];\\n        if(amount == 0) { return 0; }\\n        feeReserves[_token] = 0;\\n        _transferOut(_token, amount, _receiver);\\n        return amount;\\n    }\\n\\n    function addRouter(address _router) external {\\n        approvedRouters[msg.sender][_router] = true;\\n    }\\n\\n    function removeRouter(address _router) external {\\n        approvedRouters[msg.sender][_router] = false;\\n    }\\n\\n    function setUsdgAmount(address _token, uint256 _amount) external override {\\n        _onlyGov();\\n\\n        uint256 usdgAmount = usdgAmounts[_token];\\n        if (_amount > usdgAmount) {\\n            _increaseUsdgAmount(_token, _amount.sub(usdgAmount));\\n            return;\\n        }\\n\\n        _decreaseUsdgAmount(_token, usdgAmount.sub(_amount));\\n    }\\n\\n    // the governance controlling this function should have a timelock\\n    function upgradeVault(address _newVault, address _token, uint256 _amount) external {\\n        _onlyGov();\\n        IERC20(_token).safeTransfer(_newVault, _amount);\\n    }\\n\\n    // deposit into the pool without minting USDG tokens\\n    // useful in allowing the pool to become over-collaterised\\n    function directPoolDeposit(address _token) external override nonReentrant {\\n        _validate(whitelistedTokens[_token], 14);\\n        uint256 tokenAmount = _transferIn(_token);\\n        _validate(tokenAmount > 0, 15);\\n        _increasePoolAmount(_token, tokenAmount);\\n        emit DirectPoolDeposit(_token, tokenAmount);\\n    }\\n\\n    function buyUSDG(address _token, address _receiver) external override nonReentrant returns (uint256) {\\n        _validateManager();\\n        _validate(whitelistedTokens[_token], 16);\\n        useSwapPricing = true;\\n\\n        uint256 tokenAmount = _transferIn(_token);\\n        _validate(tokenAmount > 0, 17);\\n\\n        updateCumulativeFundingRate(_token, _token);\\n\\n        uint256 price = getMinPrice(_token);\\n\\n        uint256 usdgAmount = tokenAmount.mul(price).div(PRICE_PRECISION);\\n        usdgAmount = adjustForDecimals(usdgAmount, _token, usdg);\\n        _validate(usdgAmount > 0, 18);\\n\\n        uint256 feeBasisPoints = vaultUtils.getBuyUsdgFeeBasisPoints(_token, usdgAmount);\\n        uint256 amountAfterFees = _collectSwapFees(_token, tokenAmount, feeBasisPoints);\\n        uint256 mintAmount = amountAfterFees.mul(price).div(PRICE_PRECISION);\\n        mintAmount = adjustForDecimals(mintAmount, _token, usdg);\\n\\n        _increaseUsdgAmount(_token, mintAmount);\\n        _increasePoolAmount(_token, amountAfterFees);\\n\\n        IUSDG(usdg).mint(_receiver, mintAmount);\\n\\n        emit BuyUSDG(_receiver, _token, tokenAmount, mintAmount, feeBasisPoints);\\n\\n        useSwapPricing = false;\\n        return mintAmount;\\n    }\\n\\n    function sellUSDG(address _token, address _receiver) external override nonReentrant returns (uint256) {\\n        _validateManager();\\n        _validate(whitelistedTokens[_token], 19);\\n        useSwapPricing = true;\\n\\n        uint256 usdgAmount = _transferIn(usdg);\\n        _validate(usdgAmount > 0, 20);\\n\\n        updateCumulativeFundingRate(_token, _token);\\n\\n        uint256 redemptionAmount = getRedemptionAmount(_token, usdgAmount);\\n        _validate(redemptionAmount > 0, 21);\\n\\n        _decreaseUsdgAmount(_token, usdgAmount);\\n        _decreasePoolAmount(_token, redemptionAmount);\\n\\n        IUSDG(usdg).burn(address(this), usdgAmount);\\n\\n        // the _transferIn call increased the value of tokenBalances[usdg]\\n        // usually decreases in token balances are synced by calling _transferOut\\n        // however, for usdg, the tokens are burnt, so _updateTokenBalance should\\n        // be manually called to record the decrease in tokens\\n        _updateTokenBalance(usdg);\\n\\n        uint256 feeBasisPoints = vaultUtils.getSellUsdgFeeBasisPoints(_token, usdgAmount);\\n        uint256 amountOut = _collectSwapFees(_token, redemptionAmount, feeBasisPoints);\\n        _validate(amountOut > 0, 22);\\n\\n        _transferOut(_token, amountOut, _receiver);\\n\\n        emit SellUSDG(_receiver, _token, usdgAmount, amountOut, feeBasisPoints);\\n\\n        useSwapPricing = false;\\n        return amountOut;\\n    }\\n\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external override nonReentrant returns (uint256) {\\n        _validate(isSwapEnabled, 23);\\n        _validate(whitelistedTokens[_tokenIn], 24);\\n        _validate(whitelistedTokens[_tokenOut], 25);\\n        _validate(_tokenIn != _tokenOut, 26);\\n\\n        useSwapPricing = true;\\n\\n        updateCumulativeFundingRate(_tokenIn, _tokenIn);\\n        updateCumulativeFundingRate(_tokenOut, _tokenOut);\\n\\n        uint256 amountIn = _transferIn(_tokenIn);\\n        _validate(amountIn > 0, 27);\\n\\n        uint256 priceIn = getMinPrice(_tokenIn);\\n        uint256 priceOut = getMaxPrice(_tokenOut);\\n\\n        uint256 amountOut = amountIn.mul(priceIn).div(priceOut);\\n        amountOut = adjustForDecimals(amountOut, _tokenIn, _tokenOut);\\n\\n        // adjust usdgAmounts by the same usdgAmount as debt is shifted between the assets\\n        uint256 usdgAmount = amountIn.mul(priceIn).div(PRICE_PRECISION);\\n        usdgAmount = adjustForDecimals(usdgAmount, _tokenIn, usdg);\\n\\n        uint256 feeBasisPoints = vaultUtils.getSwapFeeBasisPoints(_tokenIn, _tokenOut, usdgAmount);\\n        uint256 amountOutAfterFees = _collectSwapFees(_tokenOut, amountOut, feeBasisPoints);\\n\\n        _increaseUsdgAmount(_tokenIn, usdgAmount);\\n        _decreaseUsdgAmount(_tokenOut, usdgAmount);\\n\\n        _increasePoolAmount(_tokenIn, amountIn);\\n        _decreasePoolAmount(_tokenOut, amountOut);\\n\\n        _validateBufferAmount(_tokenOut);\\n\\n        _transferOut(_tokenOut, amountOutAfterFees, _receiver);\\n\\n        emit Swap(_receiver, _tokenIn, _tokenOut, amountIn, amountOut, amountOutAfterFees, feeBasisPoints);\\n\\n        useSwapPricing = false;\\n        return amountOutAfterFees;\\n    }\\n\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external override nonReentrant {\\n        _validate(isLeverageEnabled, 28);\\n        _validateGasPrice();\\n        _validateRouter(_account);\\n        _validateTokens(_collateralToken, _indexToken, _isLong);\\n        vaultUtils.validateIncreasePosition(_account, _collateralToken, _indexToken, _sizeDelta, _isLong);\\n\\n        updateCumulativeFundingRate(_collateralToken, _indexToken);\\n\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        Position storage position = positions[key];\\n\\n        uint256 price = _isLong ? getMaxPrice(_indexToken) : getMinPrice(_indexToken);\\n\\n        if (position.size == 0) {\\n            position.averagePrice = price;\\n        }\\n\\n        if (position.size > 0 && _sizeDelta > 0) {\\n            position.averagePrice = getNextAveragePrice(_indexToken, position.size, position.averagePrice, _isLong, price, _sizeDelta, position.lastIncreasedTime);\\n        }\\n\\n        uint256 fee = _collectMarginFees(_account, _collateralToken, _indexToken, _isLong, _sizeDelta, position.size, position.entryFundingRate);\\n        uint256 collateralDelta = _transferIn(_collateralToken);\\n        uint256 collateralDeltaUsd = tokenToUsdMin(_collateralToken, collateralDelta);\\n\\n        position.collateral = position.collateral.add(collateralDeltaUsd);\\n        _validate(position.collateral >= fee, 29);\\n\\n        position.collateral = position.collateral.sub(fee);\\n        position.entryFundingRate = getEntryFundingRate(_collateralToken, _indexToken, _isLong);\\n        position.size = position.size.add(_sizeDelta);\\n        position.lastIncreasedTime = block.timestamp;\\n\\n        _validate(position.size > 0, 30);\\n        _validatePosition(position.size, position.collateral);\\n        validateLiquidation(_account, _collateralToken, _indexToken, _isLong, true);\\n\\n        // reserve tokens to pay profits on the position\\n        uint256 reserveDelta = usdToTokenMax(_collateralToken, _sizeDelta);\\n        position.reserveAmount = position.reserveAmount.add(reserveDelta);\\n        _increaseReservedAmount(_collateralToken, reserveDelta);\\n\\n        if (_isLong) {\\n            // guaranteedUsd stores the sum of (position.size - position.collateral) for all positions\\n            // if a fee is charged on the collateral then guaranteedUsd should be increased by that fee amount\\n            // since (position.size - position.collateral) would have increased by `fee`\\n            _increaseGuaranteedUsd(_collateralToken, _sizeDelta.add(fee));\\n            _decreaseGuaranteedUsd(_collateralToken, collateralDeltaUsd);\\n            // treat the deposited collateral as part of the pool\\n            _increasePoolAmount(_collateralToken, collateralDelta);\\n            // fees need to be deducted from the pool since fees are deducted from position.collateral\\n            // and collateral is treated as part of the pool\\n            _decreasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, fee));\\n        } else {\\n            if (globalShortSizes[_indexToken] == 0) {\\n                globalShortAveragePrices[_indexToken] = price;\\n            } else {\\n                globalShortAveragePrices[_indexToken] = getNextGlobalShortAveragePrice(_indexToken, price, _sizeDelta);\\n            }\\n\\n            _increaseGlobalShortSize(_indexToken, _sizeDelta);\\n        }\\n\\n        emit IncreasePosition(key, _account, _collateralToken, _indexToken, collateralDeltaUsd, _sizeDelta, _isLong, price, fee);\\n        emit UpdatePosition(key, position.size, position.collateral, position.averagePrice, position.entryFundingRate, position.reserveAmount, position.realisedPnl, price);\\n    }\\n\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external override nonReentrant returns (uint256) {\\n        _validateGasPrice();\\n        _validateRouter(_account);\\n        return _decreasePosition(_account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, _receiver);\\n    }\\n\\n    function _decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) private returns (uint256) {\\n        vaultUtils.validateDecreasePosition(_account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, _receiver);\\n        updateCumulativeFundingRate(_collateralToken, _indexToken);\\n\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        Position storage position = positions[key];\\n        _validate(position.size > 0, 31);\\n        _validate(position.size >= _sizeDelta, 32);\\n        _validate(position.collateral >= _collateralDelta, 33);\\n\\n        uint256 collateral = position.collateral;\\n        // scrop variables to avoid stack too deep errors\\n        {\\n        uint256 reserveDelta = position.reserveAmount.mul(_sizeDelta).div(position.size);\\n        position.reserveAmount = position.reserveAmount.sub(reserveDelta);\\n        _decreaseReservedAmount(_collateralToken, reserveDelta);\\n        }\\n\\n        (uint256 usdOut, uint256 usdOutAfterFee) = _reduceCollateral(_account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong);\\n\\n        if (position.size != _sizeDelta) {\\n            position.entryFundingRate = getEntryFundingRate(_collateralToken, _indexToken, _isLong);\\n            position.size = position.size.sub(_sizeDelta);\\n\\n            _validatePosition(position.size, position.collateral);\\n            validateLiquidation(_account, _collateralToken, _indexToken, _isLong, true);\\n\\n            if (_isLong) {\\n                _increaseGuaranteedUsd(_collateralToken, collateral.sub(position.collateral));\\n                _decreaseGuaranteedUsd(_collateralToken, _sizeDelta);\\n            }\\n\\n            uint256 price = _isLong ? getMinPrice(_indexToken) : getMaxPrice(_indexToken);\\n            emit DecreasePosition(key, _account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, price, usdOut.sub(usdOutAfterFee));\\n            emit UpdatePosition(key, position.size, position.collateral, position.averagePrice, position.entryFundingRate, position.reserveAmount, position.realisedPnl, price);\\n        } else {\\n            if (_isLong) {\\n                _increaseGuaranteedUsd(_collateralToken, collateral);\\n                _decreaseGuaranteedUsd(_collateralToken, _sizeDelta);\\n            }\\n\\n            uint256 price = _isLong ? getMinPrice(_indexToken) : getMaxPrice(_indexToken);\\n            emit DecreasePosition(key, _account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, price, usdOut.sub(usdOutAfterFee));\\n            emit ClosePosition(key, position.size, position.collateral, position.averagePrice, position.entryFundingRate, position.reserveAmount, position.realisedPnl);\\n\\n            delete positions[key];\\n        }\\n\\n        if (!_isLong) {\\n            _decreaseGlobalShortSize(_indexToken, _sizeDelta);\\n        }\\n\\n        if (usdOut > 0) {\\n            if (_isLong) {\\n                _decreasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, usdOut));\\n            }\\n            uint256 amountOutAfterFees = usdToTokenMin(_collateralToken, usdOutAfterFee);\\n            _transferOut(_collateralToken, amountOutAfterFees, _receiver);\\n            return amountOutAfterFees;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external override nonReentrant {\\n        if (inPrivateLiquidationMode) {\\n            _validate(isLiquidator[msg.sender], 34);\\n        }\\n\\n        // set includeAmmPrice to false to prevent manipulated liquidations\\n        includeAmmPrice = false;\\n\\n        updateCumulativeFundingRate(_collateralToken, _indexToken);\\n\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        Position memory position = positions[key];\\n        _validate(position.size > 0, 35);\\n\\n        (uint256 liquidationState, uint256 marginFees) = validateLiquidation(_account, _collateralToken, _indexToken, _isLong, false);\\n        _validate(liquidationState != 0, 36);\\n        if (liquidationState == 2) {\\n            // max leverage exceeded but there is collateral remaining after deducting losses so decreasePosition instead\\n            _decreasePosition(_account, _collateralToken, _indexToken, 0, position.size, _isLong, _account);\\n            includeAmmPrice = true;\\n            return;\\n        }\\n\\n        uint256 feeTokens = usdToTokenMin(_collateralToken, marginFees);\\n        feeReserves[_collateralToken] = feeReserves[_collateralToken].add(feeTokens);\\n        emit CollectMarginFees(_collateralToken, marginFees, feeTokens);\\n\\n        _decreaseReservedAmount(_collateralToken, position.reserveAmount);\\n        if (_isLong) {\\n            _decreaseGuaranteedUsd(_collateralToken, position.size.sub(position.collateral));\\n            _decreasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, marginFees));\\n        }\\n\\n        uint256 markPrice = _isLong ? getMinPrice(_indexToken) : getMaxPrice(_indexToken);\\n        emit LiquidatePosition(key, _account, _collateralToken, _indexToken, _isLong, position.size, position.collateral, position.reserveAmount, position.realisedPnl, markPrice);\\n\\n        if (!_isLong && marginFees < position.collateral) {\\n            uint256 remainingCollateral = position.collateral.sub(marginFees);\\n            _increasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, remainingCollateral));\\n        }\\n\\n        if (!_isLong) {\\n            _decreaseGlobalShortSize(_indexToken, position.size);\\n        }\\n\\n        delete positions[key];\\n\\n        // pay the fee receiver using the pool, we assume that in general the liquidated amount should be sufficient to cover\\n        // the liquidation fees\\n        _decreasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, liquidationFeeUsd));\\n        _transferOut(_collateralToken, usdToTokenMin(_collateralToken, liquidationFeeUsd), _feeReceiver);\\n\\n        includeAmmPrice = true;\\n    }\\n\\n    // validateLiquidation returns (state, fees)\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) public view returns (uint256, uint256) {\\n        return vaultUtils.validateLiquidation(_account, _collateralToken, _indexToken, _isLong, _raise);\\n    }\\n\\n    function getMaxPrice(address _token) public override view returns (uint256) {\\n        return IVaultPriceFeed(priceFeed).getPrice(_token, true, includeAmmPrice, useSwapPricing);\\n    }\\n\\n    function getMinPrice(address _token) public override view returns (uint256) {\\n        return IVaultPriceFeed(priceFeed).getPrice(_token, false, includeAmmPrice, useSwapPricing);\\n    }\\n\\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) public override view returns (uint256) {\\n        uint256 price = getMaxPrice(_token);\\n        uint256 redemptionAmount = _usdgAmount.mul(PRICE_PRECISION).div(price);\\n        return adjustForDecimals(redemptionAmount, usdg, _token);\\n    }\\n\\n    function getRedemptionCollateral(address _token) public view returns (uint256) {\\n        if (stableTokens[_token]) {\\n            return poolAmounts[_token];\\n        }\\n        uint256 collateral = usdToTokenMin(_token, guaranteedUsd[_token]);\\n        return collateral.add(poolAmounts[_token]).sub(reservedAmounts[_token]);\\n    }\\n\\n    function getRedemptionCollateralUsd(address _token) public view returns (uint256) {\\n        return tokenToUsdMin(_token, getRedemptionCollateral(_token));\\n    }\\n\\n    function adjustForDecimals(uint256 _amount, address _tokenDiv, address _tokenMul) public view returns (uint256) {\\n        uint256 decimalsDiv = _tokenDiv == usdg ? USDG_DECIMALS : tokenDecimals[_tokenDiv];\\n        uint256 decimalsMul = _tokenMul == usdg ? USDG_DECIMALS : tokenDecimals[_tokenMul];\\n        return _amount.mul(10 ** decimalsMul).div(10 ** decimalsDiv);\\n    }\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) public override view returns (uint256) {\\n        if (_tokenAmount == 0) { return 0; }\\n        uint256 price = getMinPrice(_token);\\n        uint256 decimals = tokenDecimals[_token];\\n        return _tokenAmount.mul(price).div(10 ** decimals);\\n    }\\n\\n    function usdToTokenMax(address _token, uint256 _usdAmount) public view returns (uint256) {\\n        if (_usdAmount == 0) { return 0; }\\n        return usdToToken(_token, _usdAmount, getMinPrice(_token));\\n    }\\n\\n    function usdToTokenMin(address _token, uint256 _usdAmount) public view returns (uint256) {\\n        if (_usdAmount == 0) { return 0; }\\n        return usdToToken(_token, _usdAmount, getMaxPrice(_token));\\n    }\\n\\n    function usdToToken(address _token, uint256 _usdAmount, uint256 _price) public view returns (uint256) {\\n        if (_usdAmount == 0) { return 0; }\\n        uint256 decimals = tokenDecimals[_token];\\n        return _usdAmount.mul(10 ** decimals).div(_price);\\n    }\\n\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) public override view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256) {\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        Position memory position = positions[key];\\n        uint256 realisedPnl = position.realisedPnl > 0 ? uint256(position.realisedPnl) : uint256(-position.realisedPnl);\\n        return (\\n            position.size, // 0\\n            position.collateral, // 1\\n            position.averagePrice, // 2\\n            position.entryFundingRate, // 3\\n            position.reserveAmount, // 4\\n            realisedPnl, // 5\\n            position.realisedPnl >= 0, // 6\\n            position.lastIncreasedTime // 7\\n        );\\n    }\\n\\n    function getPositionKey(address _account, address _collateralToken, address _indexToken, bool _isLong) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\n            _account,\\n            _collateralToken,\\n            _indexToken,\\n            _isLong\\n        ));\\n    }\\n\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) public {\\n        bool shouldUpdate = vaultUtils.updateCumulativeFundingRate(_collateralToken, _indexToken);\\n        if (!shouldUpdate) {\\n            return;\\n        }\\n\\n        if (lastFundingTimes[_collateralToken] == 0) {\\n            lastFundingTimes[_collateralToken] = block.timestamp.div(fundingInterval).mul(fundingInterval);\\n            return;\\n        }\\n\\n        if (lastFundingTimes[_collateralToken].add(fundingInterval) > block.timestamp) {\\n            return;\\n        }\\n\\n        uint256 fundingRate = getNextFundingRate(_collateralToken);\\n        cumulativeFundingRates[_collateralToken] = cumulativeFundingRates[_collateralToken].add(fundingRate);\\n        lastFundingTimes[_collateralToken] = block.timestamp.div(fundingInterval).mul(fundingInterval);\\n\\n        emit UpdateFundingRate(_collateralToken, cumulativeFundingRates[_collateralToken]);\\n    }\\n\\n    function getNextFundingRate(address _token) public override view returns (uint256) {\\n        if (lastFundingTimes[_token].add(fundingInterval) > block.timestamp) { return 0; }\\n\\n        uint256 intervals = block.timestamp.sub(lastFundingTimes[_token]).div(fundingInterval);\\n        uint256 poolAmount = poolAmounts[_token];\\n        if (poolAmount == 0) { return 0; }\\n\\n        uint256 _fundingRateFactor = stableTokens[_token] ? stableFundingRateFactor : fundingRateFactor;\\n        return _fundingRateFactor.mul(reservedAmounts[_token]).mul(intervals).div(poolAmount);\\n    }\\n\\n    function getUtilisation(address _token) public view returns (uint256) {\\n        uint256 poolAmount = poolAmounts[_token];\\n        if (poolAmount == 0) { return 0; }\\n\\n        return reservedAmounts[_token].mul(FUNDING_RATE_PRECISION).div(poolAmount);\\n    }\\n\\n    function getPositionLeverage(address _account, address _collateralToken, address _indexToken, bool _isLong) public view returns (uint256) {\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        Position memory position = positions[key];\\n        _validate(position.collateral > 0, 37);\\n        return position.size.mul(BASIS_POINTS_DIVISOR).div(position.collateral);\\n    }\\n\\n    // for longs: nextAveragePrice = (nextPrice * nextSize)/ (nextSize + delta)\\n    // for shorts: nextAveragePrice = (nextPrice * nextSize) / (nextSize - delta)\\n    function getNextAveragePrice(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _nextPrice, uint256 _sizeDelta, uint256 _lastIncreasedTime) public view returns (uint256) {\\n        (bool hasProfit, uint256 delta) = getDelta(_indexToken, _size, _averagePrice, _isLong, _lastIncreasedTime);\\n        uint256 nextSize = _size.add(_sizeDelta);\\n        uint256 divisor;\\n        if (_isLong) {\\n            divisor = hasProfit ? nextSize.add(delta) : nextSize.sub(delta);\\n        } else {\\n            divisor = hasProfit ? nextSize.sub(delta) : nextSize.add(delta);\\n        }\\n        return _nextPrice.mul(nextSize).div(divisor);\\n    }\\n\\n    // for longs: nextAveragePrice = (nextPrice * nextSize)/ (nextSize + delta)\\n    // for shorts: nextAveragePrice = (nextPrice * nextSize) / (nextSize - delta)\\n    function getNextGlobalShortAveragePrice(address _indexToken, uint256 _nextPrice, uint256 _sizeDelta) public view returns (uint256) {\\n        uint256 size = globalShortSizes[_indexToken];\\n        uint256 averagePrice = globalShortAveragePrices[_indexToken];\\n        uint256 priceDelta = averagePrice > _nextPrice ? averagePrice.sub(_nextPrice) : _nextPrice.sub(averagePrice);\\n        uint256 delta = size.mul(priceDelta).div(averagePrice);\\n        bool hasProfit = averagePrice > _nextPrice;\\n\\n        uint256 nextSize = size.add(_sizeDelta);\\n        uint256 divisor = hasProfit ? nextSize.sub(delta) : nextSize.add(delta);\\n\\n        return _nextPrice.mul(nextSize).div(divisor);\\n    }\\n\\n    function getGlobalShortDelta(address _token) public view returns (bool, uint256) {\\n        uint256 size = globalShortSizes[_token];\\n        if (size == 0) { return (false, 0); }\\n\\n        uint256 nextPrice = getMaxPrice(_token);\\n        uint256 averagePrice = globalShortAveragePrices[_token];\\n        uint256 priceDelta = averagePrice > nextPrice ? averagePrice.sub(nextPrice) : nextPrice.sub(averagePrice);\\n        uint256 delta = size.mul(priceDelta).div(averagePrice);\\n        bool hasProfit = averagePrice > nextPrice;\\n\\n        return (hasProfit, delta);\\n    }\\n\\n    function getPositionDelta(address _account, address _collateralToken, address _indexToken, bool _isLong) public view returns (bool, uint256) {\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        Position memory position = positions[key];\\n        return getDelta(_indexToken, position.size, position.averagePrice, _isLong, position.lastIncreasedTime);\\n    }\\n\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) public override view returns (bool, uint256) {\\n        _validate(_averagePrice > 0, 38);\\n        uint256 price = _isLong ? getMinPrice(_indexToken) : getMaxPrice(_indexToken);\\n        uint256 priceDelta = _averagePrice > price ? _averagePrice.sub(price) : price.sub(_averagePrice);\\n        uint256 delta = _size.mul(priceDelta).div(_averagePrice);\\n\\n        bool hasProfit;\\n\\n        if (_isLong) {\\n            hasProfit = price > _averagePrice;\\n        } else {\\n            hasProfit = _averagePrice > price;\\n        }\\n\\n        // if the minProfitTime has passed then there will be no min profit threshold\\n        // the min profit threshold helps to prevent front-running issues\\n        uint256 minBps = block.timestamp > _lastIncreasedTime.add(minProfitTime) ? 0 : minProfitBasisPoints[_indexToken];\\n        if (hasProfit && delta.mul(BASIS_POINTS_DIVISOR) <= _size.mul(minBps)) {\\n            delta = 0;\\n        }\\n\\n        return (hasProfit, delta);\\n    }\\n\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) public view returns (uint256) {\\n        return vaultUtils.getEntryFundingRate(_collateralToken, _indexToken, _isLong);\\n    }\\n\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) public view returns (uint256) {\\n        return vaultUtils.getFundingFee(_account, _collateralToken, _indexToken, _isLong, _size, _entryFundingRate);\\n    }\\n\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) public view returns (uint256) {\\n        return vaultUtils.getPositionFee(_account, _collateralToken, _indexToken, _isLong, _sizeDelta);\\n    }\\n\\n    // cases to consider\\n    // 1. initialAmount is far from targetAmount, action increases balance slightly => high rebate\\n    // 2. initialAmount is far from targetAmount, action increases balance largely => high rebate\\n    // 3. initialAmount is close to targetAmount, action increases balance slightly => low rebate\\n    // 4. initialAmount is far from targetAmount, action reduces balance slightly => high tax\\n    // 5. initialAmount is far from targetAmount, action reduces balance largely => high tax\\n    // 6. initialAmount is close to targetAmount, action reduces balance largely => low tax\\n    // 7. initialAmount is above targetAmount, nextAmount is below targetAmount and vice versa\\n    // 8. a large swap should have similar fees as the same trade split into multiple smaller swaps\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) public override view returns (uint256) {\\n        return vaultUtils.getFeeBasisPoints(_token, _usdgDelta, _feeBasisPoints, _taxBasisPoints, _increment);\\n    }\\n\\n    function getTargetUsdgAmount(address _token) public override view returns (uint256) {\\n        uint256 supply = IERC20(usdg).totalSupply();\\n        if (supply == 0) { return 0; }\\n        uint256 weight = tokenWeights[_token];\\n        return weight.mul(supply).div(totalTokenWeights);\\n    }\\n\\n    function _reduceCollateral(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong) private returns (uint256, uint256) {\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        Position storage position = positions[key];\\n\\n        uint256 fee = _collectMarginFees(_account, _collateralToken, _indexToken, _isLong, _sizeDelta, position.size, position.entryFundingRate);\\n        bool hasProfit;\\n        uint256 adjustedDelta;\\n\\n        // scope variables to avoid stack too deep errors\\n        {\\n        (bool _hasProfit, uint256 delta) = getDelta(_indexToken, position.size, position.averagePrice, _isLong, position.lastIncreasedTime);\\n        hasProfit = _hasProfit;\\n        // get the proportional change in pnl\\n        adjustedDelta = _sizeDelta.mul(delta).div(position.size);\\n        }\\n\\n        uint256 usdOut;\\n        // transfer profits out\\n        if (hasProfit && adjustedDelta > 0) {\\n            usdOut = adjustedDelta;\\n            position.realisedPnl = position.realisedPnl + int256(adjustedDelta);\\n\\n            // pay out realised profits from the pool amount for short positions\\n            if (!_isLong) {\\n                uint256 tokenAmount = usdToTokenMin(_collateralToken, adjustedDelta);\\n                _decreasePoolAmount(_collateralToken, tokenAmount);\\n            }\\n        }\\n\\n        if (!hasProfit && adjustedDelta > 0) {\\n            position.collateral = position.collateral.sub(adjustedDelta);\\n\\n            // transfer realised losses to the pool for short positions\\n            // realised losses for long positions are not transferred here as\\n            // _increasePoolAmount was already called in increasePosition for longs\\n            if (!_isLong) {\\n                uint256 tokenAmount = usdToTokenMin(_collateralToken, adjustedDelta);\\n                _increasePoolAmount(_collateralToken, tokenAmount);\\n            }\\n\\n            position.realisedPnl = position.realisedPnl - int256(adjustedDelta);\\n        }\\n\\n        // reduce the position's collateral by _collateralDelta\\n        // transfer _collateralDelta out\\n        if (_collateralDelta > 0) {\\n            usdOut = usdOut.add(_collateralDelta);\\n            position.collateral = position.collateral.sub(_collateralDelta);\\n        }\\n\\n        // if the position will be closed, then transfer the remaining collateral out\\n        if (position.size == _sizeDelta) {\\n            usdOut = usdOut.add(position.collateral);\\n            position.collateral = 0;\\n        }\\n\\n        // if the usdOut is more than the fee then deduct the fee from the usdOut directly\\n        // else deduct the fee from the position's collateral\\n        uint256 usdOutAfterFee = usdOut;\\n        if (usdOut > fee) {\\n            usdOutAfterFee = usdOut.sub(fee);\\n        } else {\\n            position.collateral = position.collateral.sub(fee);\\n            if (_isLong) {\\n                uint256 feeTokens = usdToTokenMin(_collateralToken, fee);\\n                _decreasePoolAmount(_collateralToken, feeTokens);\\n            }\\n        }\\n\\n        emit UpdatePnl(key, hasProfit, adjustedDelta);\\n\\n        return (usdOut, usdOutAfterFee);\\n    }\\n\\n    function _validatePosition(uint256 _size, uint256 _collateral) private view {\\n        if (_size == 0) {\\n            _validate(_collateral == 0, 39);\\n            return;\\n        }\\n        _validate(_size >= _collateral, 40);\\n    }\\n\\n    function _validateRouter(address _account) private view {\\n        if (msg.sender == _account) { return; }\\n        if (msg.sender == router) { return; }\\n        _validate(approvedRouters[_account][msg.sender], 41);\\n    }\\n\\n    function _validateTokens(address _collateralToken, address _indexToken, bool _isLong) private view {\\n        if (_isLong) {\\n            _validate(_collateralToken == _indexToken, 42);\\n            _validate(whitelistedTokens[_collateralToken], 43);\\n            _validate(!stableTokens[_collateralToken], 44);\\n            return;\\n        }\\n\\n        _validate(whitelistedTokens[_collateralToken], 45);\\n        _validate(stableTokens[_collateralToken], 46);\\n        _validate(!stableTokens[_indexToken], 47);\\n        _validate(shortableTokens[_indexToken], 48);\\n    }\\n\\n    function _collectSwapFees(address _token, uint256 _amount, uint256 _feeBasisPoints) private returns (uint256) {\\n        uint256 afterFeeAmount = _amount.mul(BASIS_POINTS_DIVISOR.sub(_feeBasisPoints)).div(BASIS_POINTS_DIVISOR);\\n        uint256 feeAmount = _amount.sub(afterFeeAmount);\\n        feeReserves[_token] = feeReserves[_token].add(feeAmount);\\n        emit CollectSwapFees(_token, tokenToUsdMin(_token, feeAmount), feeAmount);\\n        return afterFeeAmount;\\n    }\\n\\n    function _collectMarginFees(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta, uint256 _size, uint256 _entryFundingRate) private returns (uint256) {\\n        uint256 feeUsd = getPositionFee(_account, _collateralToken, _indexToken, _isLong, _sizeDelta);\\n\\n        uint256 fundingFee = getFundingFee(_account, _collateralToken, _indexToken, _isLong, _size, _entryFundingRate);\\n        feeUsd = feeUsd.add(fundingFee);\\n\\n        uint256 feeTokens = usdToTokenMin(_collateralToken, feeUsd);\\n        feeReserves[_collateralToken] = feeReserves[_collateralToken].add(feeTokens);\\n\\n        emit CollectMarginFees(_collateralToken, feeUsd, feeTokens);\\n        return feeUsd;\\n    }\\n\\n    function _transferIn(address _token) private returns (uint256) {\\n        uint256 prevBalance = tokenBalances[_token];\\n        uint256 nextBalance = IERC20(_token).balanceOf(address(this));\\n        tokenBalances[_token] = nextBalance;\\n\\n        return nextBalance.sub(prevBalance);\\n    }\\n\\n    function _transferOut(address _token, uint256 _amount, address _receiver) private {\\n        IERC20(_token).safeTransfer(_receiver, _amount);\\n        tokenBalances[_token] = IERC20(_token).balanceOf(address(this));\\n    }\\n\\n    function _updateTokenBalance(address _token) private {\\n        uint256 nextBalance = IERC20(_token).balanceOf(address(this));\\n        tokenBalances[_token] = nextBalance;\\n    }\\n\\n    function _increasePoolAmount(address _token, uint256 _amount) private {\\n        poolAmounts[_token] = poolAmounts[_token].add(_amount);\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        _validate(poolAmounts[_token] <= balance, 49);\\n        emit IncreasePoolAmount(_token, _amount);\\n    }\\n\\n    function _decreasePoolAmount(address _token, uint256 _amount) private {\\n        poolAmounts[_token] = poolAmounts[_token].sub(_amount, \\\"Vault: poolAmount exceeded\\\");\\n        _validate(reservedAmounts[_token] <= poolAmounts[_token], 50);\\n        emit DecreasePoolAmount(_token, _amount);\\n    }\\n\\n    function _validateBufferAmount(address _token) private view {\\n        if (poolAmounts[_token] < bufferAmounts[_token]) {\\n            revert(\\\"Vault: poolAmount < buffer\\\");\\n        }\\n    }\\n\\n    function _increaseUsdgAmount(address _token, uint256 _amount) private {\\n        usdgAmounts[_token] = usdgAmounts[_token].add(_amount);\\n        uint256 maxUsdgAmount = maxUsdgAmounts[_token];\\n        if (maxUsdgAmount != 0) {\\n            _validate(usdgAmounts[_token] <= maxUsdgAmount, 51);\\n        }\\n        emit IncreaseUsdgAmount(_token, _amount);\\n    }\\n\\n    function _decreaseUsdgAmount(address _token, uint256 _amount) private {\\n        uint256 value = usdgAmounts[_token];\\n        // since USDG can be minted using multiple assets\\n        // it is possible for the USDG debt for a single asset to be less than zero\\n        // the USDG debt is capped to zero for this case\\n        if (value <= _amount) {\\n            usdgAmounts[_token] = 0;\\n            emit DecreaseUsdgAmount(_token, value);\\n            return;\\n        }\\n        usdgAmounts[_token] = value.sub(_amount);\\n        emit DecreaseUsdgAmount(_token, _amount);\\n    }\\n\\n    function _increaseReservedAmount(address _token, uint256 _amount) private {\\n        reservedAmounts[_token] = reservedAmounts[_token].add(_amount);\\n        _validate(reservedAmounts[_token] <= poolAmounts[_token], 52);\\n        emit IncreaseReservedAmount(_token, _amount);\\n    }\\n\\n    function _decreaseReservedAmount(address _token, uint256 _amount) private {\\n        reservedAmounts[_token] = reservedAmounts[_token].sub(_amount, \\\"Vault: insufficient reserve\\\");\\n        emit DecreaseReservedAmount(_token, _amount);\\n    }\\n\\n    function _increaseGuaranteedUsd(address _token, uint256 _usdAmount) private {\\n        guaranteedUsd[_token] = guaranteedUsd[_token].add(_usdAmount);\\n        emit IncreaseGuaranteedUsd(_token, _usdAmount);\\n    }\\n\\n    function _decreaseGuaranteedUsd(address _token, uint256 _usdAmount) private {\\n        guaranteedUsd[_token] = guaranteedUsd[_token].sub(_usdAmount);\\n        emit DecreaseGuaranteedUsd(_token, _usdAmount);\\n    }\\n\\n    function _increaseGlobalShortSize(address _token, uint256 _amount) private {\\n        globalShortSizes[_token] = globalShortSizes[_token].add(_amount);\\n\\n        uint256 maxSize = maxGlobalShortSizes[_token];\\n        if (maxSize != 0) {\\n            require(globalShortSizes[_token] <= maxSize, \\\"Vault: max shorts exceeded\\\");\\n        }\\n    }\\n\\n    function _decreaseGlobalShortSize(address _token, uint256 _amount) private {\\n        uint256 size = globalShortSizes[_token];\\n        if (_amount > size) {\\n          globalShortSizes[_token] = 0;\\n          return;\\n        }\\n\\n        globalShortSizes[_token] = size.sub(_amount);\\n    }\\n\\n    // we have this validation as a function instead of a modifier to reduce contract size\\n    function _onlyGov() private view {\\n        _validate(msg.sender == gov, 53);\\n    }\\n\\n    // we have this validation as a function instead of a modifier to reduce contract size\\n    function _validateManager() private view {\\n        if (inManagerMode) {\\n            _validate(isManager[msg.sender], 54);\\n        }\\n    }\\n\\n    // we have this validation as a function instead of a modifier to reduce contract size\\n    function _validateGasPrice() private view {\\n        if (maxGasPrice == 0) { return; }\\n        _validate(tx.gasprice <= maxGasPrice, 55);\\n    }\\n\\n    function _validate(bool _condition, uint256 _errorCode) private view {\\n        require(_condition, errors[_errorCode]);\\n    }\\n}\\n\"\n    },\n    \"contracts/core/VaultUtils.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IVaultUtils.sol\\\";\\n\\nimport \\\"../access/Governable.sol\\\";\\n\\ncontract VaultUtils is IVaultUtils, Governable {\\n    using SafeMath for uint256;\\n\\n    struct Position {\\n        uint256 size;\\n        uint256 collateral;\\n        uint256 averagePrice;\\n        uint256 entryFundingRate;\\n        uint256 reserveAmount;\\n        int256 realisedPnl;\\n        uint256 lastIncreasedTime;\\n    }\\n\\n    IVault public vault;\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n\\n    constructor(IVault _vault) public {\\n        vault = _vault;\\n    }\\n\\n    function updateCumulativeFundingRate(address /* _collateralToken */, address /* _indexToken */) public override returns (bool) {\\n        return true;\\n    }\\n\\n    function validateIncreasePosition(address /* _account */, address /* _collateralToken */, address /* _indexToken */, uint256 /* _sizeDelta */, bool /* _isLong */) external override view {\\n        // no additional validations\\n    }\\n\\n    function validateDecreasePosition(address /* _account */, address /* _collateralToken */, address /* _indexToken */ , uint256 /* _collateralDelta */, uint256 /* _sizeDelta */, bool /* _isLong */, address /* _receiver */) external override view {\\n        // no additional validations\\n    }\\n\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) internal view returns (Position memory) {\\n        IVault _vault = vault;\\n        Position memory position;\\n        {\\n            (uint256 size, uint256 collateral, uint256 averagePrice, uint256 entryFundingRate, /* reserveAmount */, /* realisedPnl */, /* hasProfit */, uint256 lastIncreasedTime) = _vault.getPosition(_account, _collateralToken, _indexToken, _isLong);\\n            position.size = size;\\n            position.collateral = collateral;\\n            position.averagePrice = averagePrice;\\n            position.entryFundingRate = entryFundingRate;\\n            position.lastIncreasedTime = lastIncreasedTime;\\n        }\\n        return position;\\n    }\\n\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) public view override returns (uint256, uint256) {\\n        Position memory position = getPosition(_account, _collateralToken, _indexToken, _isLong);\\n        IVault _vault = vault;\\n\\n        (bool hasProfit, uint256 delta) = _vault.getDelta(_indexToken, position.size, position.averagePrice, _isLong, position.lastIncreasedTime);\\n        uint256 marginFees = getFundingFee(_account, _collateralToken, _indexToken, _isLong, position.size, position.entryFundingRate);\\n        marginFees = marginFees.add(getPositionFee(_account, _collateralToken, _indexToken, _isLong, position.size));\\n\\n        if (!hasProfit && position.collateral < delta) {\\n            if (_raise) { revert(\\\"Vault: losses exceed collateral\\\"); }\\n            return (1, marginFees);\\n        }\\n\\n        uint256 remainingCollateral = position.collateral;\\n        if (!hasProfit) {\\n            remainingCollateral = position.collateral.sub(delta);\\n        }\\n\\n        if (remainingCollateral < marginFees) {\\n            if (_raise) { revert(\\\"Vault: fees exceed collateral\\\"); }\\n            // cap the fees to the remainingCollateral\\n            return (1, remainingCollateral);\\n        }\\n\\n        if (remainingCollateral < marginFees.add(_vault.liquidationFeeUsd())) {\\n            if (_raise) { revert(\\\"Vault: liquidation fees exceed collateral\\\"); }\\n            return (1, marginFees);\\n        }\\n\\n        if (remainingCollateral.mul(_vault.maxLeverage()) < position.size.mul(BASIS_POINTS_DIVISOR)) {\\n            if (_raise) { revert(\\\"Vault: maxLeverage exceeded\\\"); }\\n            return (2, marginFees);\\n        }\\n\\n        return (0, marginFees);\\n    }\\n\\n    function getEntryFundingRate(address _collateralToken, address /* _indexToken */, bool /* _isLong */) public override view returns (uint256) {\\n        return vault.cumulativeFundingRates(_collateralToken);\\n    }\\n\\n    function getPositionFee(address /* _account */, address /* _collateralToken */, address /* _indexToken */, bool /* _isLong */, uint256 _sizeDelta) public override view returns (uint256) {\\n        if (_sizeDelta == 0) { return 0; }\\n        uint256 afterFeeUsd = _sizeDelta.mul(BASIS_POINTS_DIVISOR.sub(vault.marginFeeBasisPoints())).div(BASIS_POINTS_DIVISOR);\\n        return _sizeDelta.sub(afterFeeUsd);\\n    }\\n\\n    function getFundingFee(address /* _account */, address _collateralToken, address /* _indexToken */, bool /* _isLong */, uint256 _size, uint256 _entryFundingRate) public override view returns (uint256) {\\n        if (_size == 0) { return 0; }\\n\\n        uint256 fundingRate = vault.cumulativeFundingRates(_collateralToken).sub(_entryFundingRate);\\n        if (fundingRate == 0) { return 0; }\\n\\n        return _size.mul(fundingRate).div(FUNDING_RATE_PRECISION);\\n    }\\n\\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) public override view returns (uint256) {\\n        return getFeeBasisPoints(_token, _usdgAmount, vault.mintBurnFeeBasisPoints(), vault.taxBasisPoints(), true);\\n    }\\n\\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) public override view returns (uint256) {\\n        return getFeeBasisPoints(_token, _usdgAmount, vault.mintBurnFeeBasisPoints(), vault.taxBasisPoints(), false);\\n    }\\n\\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdgAmount) public override view returns (uint256) {\\n        bool isStableSwap = vault.stableTokens(_tokenIn) && vault.stableTokens(_tokenOut);\\n        uint256 baseBps = isStableSwap ? vault.stableSwapFeeBasisPoints() : vault.swapFeeBasisPoints();\\n        uint256 taxBps = isStableSwap ? vault.stableTaxBasisPoints() : vault.taxBasisPoints();\\n        uint256 feesBasisPoints0 = getFeeBasisPoints(_tokenIn, _usdgAmount, baseBps, taxBps, true);\\n        uint256 feesBasisPoints1 = getFeeBasisPoints(_tokenOut, _usdgAmount, baseBps, taxBps, false);\\n        // use the higher of the two fee basis points\\n        return feesBasisPoints0 > feesBasisPoints1 ? feesBasisPoints0 : feesBasisPoints1;\\n    }\\n\\n    // cases to consider\\n    // 1. initialAmount is far from targetAmount, action increases balance slightly => high rebate\\n    // 2. initialAmount is far from targetAmount, action increases balance largely => high rebate\\n    // 3. initialAmount is close to targetAmount, action increases balance slightly => low rebate\\n    // 4. initialAmount is far from targetAmount, action reduces balance slightly => high tax\\n    // 5. initialAmount is far from targetAmount, action reduces balance largely => high tax\\n    // 6. initialAmount is close to targetAmount, action reduces balance largely => low tax\\n    // 7. initialAmount is above targetAmount, nextAmount is below targetAmount and vice versa\\n    // 8. a large swap should have similar fees as the same trade split into multiple smaller swaps\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) public override view returns (uint256) {\\n        if (!vault.hasDynamicFees()) { return _feeBasisPoints; }\\n\\n        uint256 initialAmount = vault.usdgAmounts(_token);\\n        uint256 nextAmount = initialAmount.add(_usdgDelta);\\n        if (!_increment) {\\n            nextAmount = _usdgDelta > initialAmount ? 0 : initialAmount.sub(_usdgDelta);\\n        }\\n\\n        uint256 targetAmount = vault.getTargetUsdgAmount(_token);\\n        if (targetAmount == 0) { return _feeBasisPoints; }\\n\\n        uint256 initialDiff = initialAmount > targetAmount ? initialAmount.sub(targetAmount) : targetAmount.sub(initialAmount);\\n        uint256 nextDiff = nextAmount > targetAmount ? nextAmount.sub(targetAmount) : targetAmount.sub(nextAmount);\\n\\n        // action improves relative asset balance\\n        if (nextDiff < initialDiff) {\\n            uint256 rebateBps = _taxBasisPoints.mul(initialDiff).div(targetAmount);\\n            return rebateBps > _feeBasisPoints ? 0 : _feeBasisPoints.sub(rebateBps);\\n        }\\n\\n        uint256 averageDiff = initialDiff.add(nextDiff).div(2);\\n        if (averageDiff > targetAmount) {\\n            averageDiff = targetAmount;\\n        }\\n        uint256 taxBps = _taxBasisPoints.mul(averageDiff).div(targetAmount);\\n        return _feeBasisPoints.add(taxBps);\\n    }\\n}\\n\"\n    },\n    \"contracts/peripherals/RewardReader.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\nimport \\\"../staking/interfaces/IVester.sol\\\";\\nimport \\\"../staking/interfaces/IRewardTracker.sol\\\";\\n\\ncontract RewardReader {\\n    using SafeMath for uint256;\\n\\n    function getDepositBalances(address _account, address[] memory _depositTokens, address[] memory _rewardTrackers) public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](_rewardTrackers.length);\\n        for (uint256 i = 0; i < _rewardTrackers.length; i++) {\\n            IRewardTracker rewardTracker = IRewardTracker(_rewardTrackers[i]);\\n            amounts[i] = rewardTracker.depositBalances(_account, _depositTokens[i]);\\n        }\\n        return amounts;\\n    }\\n\\n    function getStakingInfo(address _account, address[] memory _rewardTrackers) public view returns (uint256[] memory) {\\n        uint256 propsLength = 5;\\n        uint256[] memory amounts = new uint256[](_rewardTrackers.length * propsLength);\\n        for (uint256 i = 0; i < _rewardTrackers.length; i++) {\\n            IRewardTracker rewardTracker = IRewardTracker(_rewardTrackers[i]);\\n            amounts[i * propsLength] = rewardTracker.claimable(_account);\\n            amounts[i * propsLength + 1] = rewardTracker.tokensPerInterval();\\n            amounts[i * propsLength + 2] = rewardTracker.averageStakedAmounts(_account);\\n            amounts[i * propsLength + 3] = rewardTracker.cumulativeRewards(_account);\\n            amounts[i * propsLength + 4] = IERC20(_rewardTrackers[i]).totalSupply();\\n        }\\n        return amounts;\\n    }\\n\\n    function getVestingInfoV2(address _account, address[] memory _vesters) public view returns (uint256[] memory) {\\n        uint256 propsLength = 12;\\n        uint256[] memory amounts = new uint256[](_vesters.length * propsLength);\\n        for (uint256 i = 0; i < _vesters.length; i++) {\\n            IVester vester = IVester(_vesters[i]);\\n            IRewardTracker rewardTracker = IRewardTracker(vester.rewardTracker());\\n            amounts[i * propsLength] = vester.pairAmounts(_account);\\n            amounts[i * propsLength + 1] = vester.getVestedAmount(_account);\\n            amounts[i * propsLength + 2] = IERC20(_vesters[i]).balanceOf(_account);\\n            amounts[i * propsLength + 3] = vester.claimedAmounts(_account);\\n            amounts[i * propsLength + 4] = vester.claimable(_account);\\n            amounts[i * propsLength + 5] = vester.getMaxVestableAmount(_account);\\n            amounts[i * propsLength + 6] = vester.getCombinedAverageStakedAmount(_account);\\n            amounts[i * propsLength + 7] = rewardTracker.cumulativeRewards(_account);\\n            amounts[i * propsLength + 8] = vester.transferredCumulativeRewards(_account);\\n            amounts[i * propsLength + 9] = vester.bonusRewards(_account);\\n            amounts[i * propsLength + 10] = rewardTracker.averageStakedAmounts(_account);\\n            amounts[i * propsLength + 11] = vester.transferredAverageStakedAmounts(_account);\\n        }\\n        return amounts;\\n    }\\n}\\n\"\n    },\n    \"contracts/peripherals/EsXdxBatchSender.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\nimport \\\"../staking/interfaces/IVester.sol\\\";\\nimport \\\"../staking/interfaces/IRewardTracker.sol\\\";\\n\\ncontract EsXdxBatchSender {\\n    using SafeMath for uint256;\\n\\n    address public admin;\\n    address public esXdx;\\n\\n    constructor(address _esXdx) public {\\n        admin = msg.sender;\\n        esXdx = _esXdx;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"EsXdxBatchSender: forbidden\\\");\\n        _;\\n    }\\n\\n    function send(\\n        IVester _vester,\\n        uint256 _minRatio,\\n        address[] memory _accounts,\\n        uint256[] memory _amounts\\n    ) external onlyAdmin {\\n        IRewardTracker rewardTracker = IRewardTracker(_vester.rewardTracker());\\n\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            IERC20(esXdx).transferFrom(msg.sender, _accounts[i], _amounts[i]);\\n\\n            uint256 nextTransferredCumulativeReward = _vester.transferredCumulativeRewards(_accounts[i]).add(_amounts[i]);\\n            _vester.setTransferredCumulativeRewards(_accounts[i], nextTransferredCumulativeReward);\\n\\n            uint256 cumulativeReward = rewardTracker.cumulativeRewards(_accounts[i]);\\n            uint256 totalCumulativeReward = cumulativeReward.add(nextTransferredCumulativeReward);\\n\\n            uint256 combinedAverageStakedAmount = _vester.getCombinedAverageStakedAmount(_accounts[i]);\\n\\n            if (combinedAverageStakedAmount > totalCumulativeReward.mul(_minRatio)) {\\n                continue;\\n            }\\n\\n            uint256 nextTransferredAverageStakedAmount = _minRatio.mul(totalCumulativeReward);\\n            nextTransferredAverageStakedAmount = nextTransferredAverageStakedAmount.sub(\\n                rewardTracker.averageStakedAmounts(_accounts[i]).mul(cumulativeReward).div(totalCumulativeReward)\\n            );\\n\\n            nextTransferredAverageStakedAmount = nextTransferredAverageStakedAmount.mul(totalCumulativeReward).div(nextTransferredCumulativeReward);\\n\\n            _vester.setTransferredAverageStakedAmounts(_accounts[i], nextTransferredAverageStakedAmount);\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/gambit-token/Treasury.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../amm/interfaces/IPancakeRouter.sol\\\";\\nimport \\\"./interfaces/IGMT.sol\\\";\\nimport \\\"../peripherals/interfaces/ITimelockTarget.sol\\\";\\n\\ncontract Treasury is ReentrancyGuard, ITimelockTarget {\\n    using SafeMath for uint256;\\n\\n    uint256 constant PRECISION = 1000000;\\n    uint256 constant BASIS_POINTS_DIVISOR = 10000;\\n\\n    bool public isInitialized;\\n    bool public isSwapActive = true;\\n    bool public isLiquidityAdded = false;\\n\\n    address public gmt;\\n    address public busd;\\n    address public router;\\n    address public fund;\\n\\n    uint256 public gmtPresalePrice;\\n    uint256 public gmtListingPrice;\\n    uint256 public busdSlotCap;\\n    uint256 public busdHardCap;\\n    uint256 public busdBasisPoints;\\n    uint256 public unlockTime;\\n\\n    uint256 public busdReceived;\\n\\n    address public gov;\\n\\n    mapping (address => uint256) public swapAmounts;\\n    mapping (address => bool) public swapWhitelist;\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Treasury: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    function initialize(\\n        address[] memory _addresses,\\n        uint256[] memory _values\\n    ) external onlyGov {\\n        require(!isInitialized, \\\"Treasury: already initialized\\\");\\n        isInitialized = true;\\n\\n        gmt = _addresses[0];\\n        busd = _addresses[1];\\n        router = _addresses[2];\\n        fund = _addresses[3];\\n\\n        gmtPresalePrice = _values[0];\\n        gmtListingPrice = _values[1];\\n        busdSlotCap = _values[2];\\n        busdHardCap = _values[3];\\n        busdBasisPoints = _values[4];\\n        unlockTime = _values[5];\\n    }\\n\\n    function setGov(address _gov) external override onlyGov nonReentrant {\\n        gov = _gov;\\n    }\\n\\n    function setFund(address _fund) external onlyGov nonReentrant {\\n        fund = _fund;\\n    }\\n\\n    function extendUnlockTime(uint256 _unlockTime) external onlyGov nonReentrant {\\n        require(_unlockTime > unlockTime, \\\"Treasury: invalid _unlockTime\\\");\\n        unlockTime = _unlockTime;\\n    }\\n\\n    function addWhitelists(address[] memory _accounts) external onlyGov nonReentrant {\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            address account = _accounts[i];\\n            swapWhitelist[account] = true;\\n        }\\n    }\\n\\n    function removeWhitelists(address[] memory _accounts) external onlyGov nonReentrant {\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            address account = _accounts[i];\\n            swapWhitelist[account] = false;\\n        }\\n    }\\n\\n    function updateWhitelist(address prevAccount, address nextAccount) external onlyGov nonReentrant {\\n        require(swapWhitelist[prevAccount], \\\"Treasury: invalid prevAccount\\\");\\n        swapWhitelist[prevAccount] = false;\\n        swapWhitelist[nextAccount] = true;\\n    }\\n\\n    function swap(uint256 _busdAmount) external nonReentrant {\\n        address account = msg.sender;\\n        require(swapWhitelist[account], \\\"Treasury: forbidden\\\");\\n        require(isSwapActive, \\\"Treasury: swap is no longer active\\\");\\n        require(_busdAmount > 0, \\\"Treasury: invalid _busdAmount\\\");\\n\\n        busdReceived = busdReceived.add(_busdAmount);\\n        require(busdReceived <= busdHardCap, \\\"Treasury: busdHardCap exceeded\\\");\\n\\n        swapAmounts[account] = swapAmounts[account].add(_busdAmount);\\n        require(swapAmounts[account] <= busdSlotCap, \\\"Treasury: busdSlotCap exceeded\\\");\\n\\n        // receive BUSD\\n        uint256 busdBefore = IERC20(busd).balanceOf(address(this));\\n        IERC20(busd).transferFrom(account, address(this), _busdAmount);\\n        uint256 busdAfter = IERC20(busd).balanceOf(address(this));\\n        require(busdAfter.sub(busdBefore) == _busdAmount, \\\"Treasury: invalid transfer\\\");\\n\\n        // send GMT\\n        uint256 gmtAmount = _busdAmount.mul(PRECISION).div(gmtPresalePrice);\\n        IERC20(gmt).transfer(account, gmtAmount);\\n    }\\n\\n    function addLiquidity() external onlyGov nonReentrant {\\n        require(!isLiquidityAdded, \\\"Treasury: liquidity already added\\\");\\n        isLiquidityAdded = true;\\n\\n        uint256 busdAmount = busdReceived.mul(busdBasisPoints).div(BASIS_POINTS_DIVISOR);\\n        uint256 gmtAmount = busdAmount.mul(PRECISION).div(gmtListingPrice);\\n\\n        IERC20(busd).approve(router, busdAmount);\\n        IERC20(gmt).approve(router, gmtAmount);\\n\\n        IGMT(gmt).endMigration();\\n\\n        IPancakeRouter(router).addLiquidity(\\n            busd, // tokenA\\n            gmt, // tokenB\\n            busdAmount, // amountADesired\\n            gmtAmount, // amountBDesired\\n            0, // amountAMin\\n            0, // amountBMin\\n            address(this), // to\\n            block.timestamp // deadline\\n        );\\n\\n        IGMT(gmt).beginMigration();\\n\\n        uint256 fundAmount = busdReceived.sub(busdAmount);\\n        IERC20(busd).transfer(fund, fundAmount);\\n    }\\n\\n    function withdrawToken(address _token, address _account, uint256 _amount) external override onlyGov nonReentrant {\\n        require(block.timestamp > unlockTime, \\\"Treasury: unlockTime not yet passed\\\");\\n        IERC20(_token).transfer(_account, _amount);\\n    }\\n\\n    function increaseBusdBasisPoints(uint256 _busdBasisPoints) external onlyGov nonReentrant {\\n        require(_busdBasisPoints > busdBasisPoints, \\\"Treasury: invalid _busdBasisPoints\\\");\\n        busdBasisPoints = _busdBasisPoints;\\n    }\\n\\n    function endSwap() external onlyGov nonReentrant {\\n        isSwapActive = false;\\n    }\\n}\\n\"\n    },\n    \"contracts/amm/interfaces/IPancakeRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPancakeRouter {\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n}\\n\"\n    },\n    \"contracts/gambit-token/interfaces/IGMT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IGMT {\\n    function beginMigration() external;\\n    function endMigration() external;\\n}\\n\"\n    },\n    \"contracts/gambit-token/GMT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"./interfaces/IGMT.sol\\\";\\nimport \\\"../peripherals/interfaces/ITimelockTarget.sol\\\";\\n\\ncontract GMT is IERC20, IGMT, ITimelockTarget {\\n    using SafeMath for uint256;\\n\\n    string public constant name = \\\"Gambit\\\";\\n    string public constant symbol = \\\"GMT\\\";\\n    uint8 public constant decimals = 18;\\n\\n    uint256 public override totalSupply;\\n    address public gov;\\n\\n    bool public hasActiveMigration;\\n    uint256 public migrationTime;\\n\\n    mapping (address => uint256) public balances;\\n    mapping (address => mapping (address => uint256)) public allowances;\\n\\n    mapping (address => bool) public admins;\\n\\n    // only checked when hasActiveMigration is true\\n    // this can be used to block the AMM pair as a recipient\\n    // and protect liquidity providers during a migration\\n    // by disabling the selling of GMT\\n    mapping (address => bool) public blockedRecipients;\\n\\n    // only checked when hasActiveMigration is true\\n    // this can be used for:\\n    // - only allowing tokens to be transferred by the distribution contract\\n    // during the initial distribution phase, this would prevent token buyers\\n    // from adding liquidity before the initial liquidity is seeded\\n    // - only allowing removal of GMT liquidity and no other actions\\n    // during the migration phase\\n    mapping (address => bool) public allowedMsgSenders;\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"GMT: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(admins[msg.sender], \\\"GMT: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(uint256 _initialSupply) public {\\n        gov = msg.sender;\\n        admins[msg.sender] = true;\\n        _mint(msg.sender, _initialSupply);\\n    }\\n\\n    function setGov(address _gov) external override onlyGov {\\n        gov = _gov;\\n    }\\n\\n    function addAdmin(address _account) external onlyGov {\\n        admins[_account] = true;\\n    }\\n\\n    function removeAdmin(address _account) external onlyGov {\\n        admins[_account] = false;\\n    }\\n\\n    function setNextMigrationTime(uint256 _migrationTime) external onlyGov {\\n        require(_migrationTime > migrationTime, \\\"GMT: invalid _migrationTime\\\");\\n        migrationTime = _migrationTime;\\n    }\\n\\n    function beginMigration() external override onlyAdmin {\\n        require(block.timestamp > migrationTime, \\\"GMT: migrationTime not yet passed\\\");\\n        hasActiveMigration = true;\\n    }\\n\\n    function endMigration() external override onlyAdmin {\\n        hasActiveMigration = false;\\n    }\\n\\n    function addBlockedRecipient(address _recipient) external onlyGov {\\n        blockedRecipients[_recipient] = true;\\n    }\\n\\n    function removeBlockedRecipient(address _recipient) external onlyGov {\\n        blockedRecipients[_recipient] = false;\\n    }\\n\\n    function addMsgSender(address _msgSender) external onlyGov {\\n        allowedMsgSenders[_msgSender] = true;\\n    }\\n\\n    function removeMsgSender(address _msgSender) external onlyGov {\\n        allowedMsgSenders[_msgSender] = false;\\n    }\\n\\n    // to help users who accidentally send their tokens to this contract\\n    function withdrawToken(address _token, address _account, uint256 _amount) external override onlyGov {\\n        IERC20(_token).transfer(_account, _amount);\\n    }\\n\\n    function balanceOf(address _account) external view override returns (uint256) {\\n        return balances[_account];\\n    }\\n\\n    function transfer(address _recipient, uint256 _amount) external override returns (bool) {\\n        _transfer(msg.sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address _spender) external view override returns (uint256) {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    function approve(address _spender, uint256 _amount) external override returns (bool) {\\n        _approve(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external override returns (bool) {\\n        uint256 nextAllowance = allowances[_sender][msg.sender].sub(_amount, \\\"GMT: transfer amount exceeds allowance\\\");\\n        _approve(_sender, msg.sender, nextAllowance);\\n        _transfer(_sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\\n        require(_sender != address(0), \\\"GMT: transfer from the zero address\\\");\\n        require(_recipient != address(0), \\\"GMT: transfer to the zero address\\\");\\n\\n        if (hasActiveMigration) {\\n            require(allowedMsgSenders[msg.sender], \\\"GMT: forbidden msg.sender\\\");\\n            require(!blockedRecipients[_recipient], \\\"GMT: forbidden recipient\\\");\\n        }\\n\\n        balances[_sender] = balances[_sender].sub(_amount, \\\"GMT: transfer amount exceeds balance\\\");\\n        balances[_recipient] = balances[_recipient].add(_amount);\\n\\n        emit Transfer(_sender, _recipient,_amount);\\n    }\\n\\n    function _mint(address _account, uint256 _amount) private {\\n        require(_account != address(0), \\\"GMT: mint to the zero address\\\");\\n\\n        totalSupply = totalSupply.add(_amount);\\n        balances[_account] = balances[_account].add(_amount);\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    function _approve(address _owner, address _spender, uint256 _amount) private {\\n        require(_owner != address(0), \\\"GMT: approve from the zero address\\\");\\n        require(_spender != address(0), \\\"GMT: approve to the zero address\\\");\\n\\n        allowances[_owner][_spender] = _amount;\\n\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/amm/PancakeRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../tokens/Token.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"./interfaces/IPancakeRouter.sol\\\";\\n\\ncontract PancakeRouter is IPancakeRouter {\\n    address public pair;\\n\\n    constructor(address _pair) public {\\n        pair = _pair;\\n    }\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 /*amountAMin*/,\\n        uint256 /*amountBMin*/,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256 amountA, uint256 amountB, uint256 liquidity) {\\n        require(deadline >= block.timestamp, 'PancakeRouter: EXPIRED');\\n\\n        Token(pair).mint(to, 1000);\\n\\n        IERC20(tokenA).transferFrom(msg.sender, pair, amountADesired);\\n        IERC20(tokenB).transferFrom(msg.sender, pair, amountBDesired);\\n\\n        amountA = amountADesired;\\n        amountB = amountBDesired;\\n        liquidity = 1000;\\n    }\\n}\\n\"\n    },\n    \"contracts/tokens/Token.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract Token is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor() public {\\n        _name = \\\"Token\\\";\\n        _symbol = \\\"TOKEN\\\";\\n        _decimals = 18;\\n    }\\n\\n    function mint(address account, uint256 amount) public {\\n        _mint(account, amount);\\n    }\\n\\n    function withdrawToken(address token, address account, uint256 amount) public {\\n        IERC20(token).transfer(account, amount);\\n    }\\n\\n    function deposit() public payable {\\n        _mint(msg.sender, msg.value);\\n    }\\n\\n    function withdraw(uint256 amount) public {\\n        require(_balances[msg.sender] >= amount, \\\"Token: insufficient balance\\\");\\n        _burn(msg.sender, amount);\\n        msg.sender.transfer(amount);\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n}\\n\"\n    },\n    \"contracts/tokens/WETH.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract WETH is IERC20 {\\n    using SafeMath for uint256;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    mapping (address => uint256) private _balances;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals\\n    ) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    function deposit() public payable {\\n        _balances[msg.sender] = _balances[msg.sender].add(msg.value);\\n    }\\n\\n    function withdraw(uint256 amount) public {\\n        require(_balances[msg.sender] >= amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        msg.sender.transfer(amount);\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n}\\n\"\n    },\n    \"contracts/tokens/FaucetToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract FaucetToken is IERC20 {\\n    using SafeMath for uint256;\\n\\n    uint256 public DROPLET_INTERVAL = 8 hours;\\n\\n    address public _gov;\\n    uint256 public _dropletAmount;\\n    bool public _isFaucetEnabled;\\n\\n    mapping (address => uint256) public _claimedAt;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    mapping (address => uint256) private _balances;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        uint256 dropletAmount\\n    ) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n        _gov = msg.sender;\\n        _dropletAmount = dropletAmount;\\n    }\\n\\n    function mint(address account, uint256 amount) public {\\n        require(msg.sender == _gov, \\\"FaucetToken: forbidden\\\");\\n        _mint(account, amount);\\n    }\\n\\n    function enableFaucet() public {\\n        require(msg.sender == _gov, \\\"FaucetToken: forbidden\\\");\\n        _isFaucetEnabled = true;\\n    }\\n\\n    function disableFaucet() public {\\n        require(msg.sender == _gov, \\\"FaucetToken: forbidden\\\");\\n        _isFaucetEnabled = false;\\n    }\\n\\n    function setDropletAmount(uint256 dropletAmount) public {\\n        require(msg.sender == _gov, \\\"FaucetToken: forbidden\\\");\\n        _dropletAmount = dropletAmount;\\n    }\\n\\n    function claimDroplet() public {\\n        require(_isFaucetEnabled, \\\"FaucetToken: faucet not enabled\\\");\\n        require(_claimedAt[msg.sender].add(DROPLET_INTERVAL) <= block.timestamp, \\\"FaucetToken: droplet not available yet\\\");\\n        _claimedAt[msg.sender] = block.timestamp;\\n        _mint(msg.sender, _dropletAmount);\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n}\\n\"\n    },\n    \"contracts/peripherals/BatchSender.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\nimport \\\"../access/Governable.sol\\\";\\n\\ncontract BatchSender is Governable {\\n    using SafeMath for uint256;\\n\\n    mapping (address => bool) public isHandler;\\n\\n    event BatchSend(\\n        uint256 indexed typeId,\\n        address indexed token,\\n        address[] accounts,\\n        uint256[] amounts\\n    );\\n\\n    modifier onlyHandler() {\\n        require(isHandler[msg.sender], \\\"BatchSender: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor() public {\\n        isHandler[msg.sender] = true;\\n    }\\n\\n    function setHandler(address _handler, bool _isActive) external onlyGov {\\n        isHandler[_handler] = _isActive;\\n    }\\n\\n    function send(IERC20 _token, address[] memory _accounts, uint256[] memory _amounts) public onlyHandler {\\n        _send(_token, _accounts, _amounts, 0);\\n    }\\n\\n    function sendAndEmit(IERC20 _token, address[] memory _accounts, uint256[] memory _amounts, uint256 _typeId) public onlyHandler {\\n        _send(_token, _accounts, _amounts, _typeId);\\n    }\\n\\n    function _send(IERC20 _token, address[] memory _accounts, uint256[] memory _amounts, uint256 _typeId) private {\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            address account = _accounts[i];\\n            uint256 amount = _amounts[i];\\n            _token.transferFrom(msg.sender, account, amount);\\n        }\\n\\n        emit BatchSend(_typeId, address(_token), _accounts, _amounts);\\n    }\\n}\\n\"\n    },\n    \"contracts/peripherals/BalanceUpdater.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../core/interfaces/IVault.sol\\\";\\n\\ncontract BalanceUpdater {\\n    using SafeMath for uint256;\\n\\n    function updateBalance(\\n        address _vault,\\n        address _token,\\n        address _usdg,\\n        uint256 _usdgAmount\\n    ) public {\\n        IVault vault = IVault(_vault);\\n        IERC20 token = IERC20(_token);\\n        uint256 poolAmount = vault.poolAmounts(_token);\\n        uint256 fee = vault.feeReserves(_token);\\n        uint256 balance = token.balanceOf(_vault);\\n\\n        uint256 transferAmount = poolAmount.add(fee).sub(balance);\\n        token.transferFrom(msg.sender, _vault, transferAmount);\\n        IERC20(_usdg).transferFrom(msg.sender, _vault, _usdgAmount);\\n\\n        vault.sellUSDG(_token, msg.sender);\\n    }\\n}\\n\"\n    },\n    \"contracts/core/VaultErrorController.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\ncontract VaultErrorController is Governable {\\n    function setErrors(IVault _vault, string[] calldata _errors) external onlyGov {\\n        for (uint256 i = 0; i < _errors.length; i++) {\\n            _vault.setError(i, _errors[i]);\\n        }\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"metadata\": {\n      \"bytecodeHash\": \"none\",\n      \"useLiteralContent\": true\n    },\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 20\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"libraries\": {\n      \"\": {\n        \"__CACHE_BREAKER__\": \"0x00000000d41867734bbee4c6863d9255b2b06ac1\"\n      }\n    }\n  }\n}",
      "solcInputHash": "38f125bf9344c296031e870b443ff3d2",
      "transactionHash": "0xe6a8969e11f2cf224256a3938898f84a55c2680636f3874fdc83b2a7cbffc3fd",
      "args": []
    },
    "decoded": {
      "from": "0xf5CA36c9873d61Bc28C117BD470981Ef6647A685",
      "gasPrice": "2674185346",
      "gasLimit": "5571775",
      "to": null,
      "value": "0",
      "nonce": 38,
      "data": "0x60806040526001805462ff00001961ff00199091166101001716620100001781556207a1206008556032600a9081556014600b55601e600c819055600d556004600e55600f556011805460ff199081169091556170806012556016805463ffffff0019921690921716905534801561007657600080fd5b506001600055600680546001600160a01b03191633179055615ef4806200009e6000396000f3fe608060405234801561001057600080fd5b50600436106105995760003560e01c80638585f4d2116102e9578063c7e074c31161018f578063c7e074c314611225578063cea0c32814611265578063cfad57a21461129b578063d2fa635e146112c1578063d3127e63146112de578063d54d5a9f146112fb578063d66b000d1461135a578063d8f897c314611386578063d9ac4225146113ac578063da76524c146113b4578063daf9c210146113fe578063db3555fb14611424578063db97495f1461144a578063dc8f5fac14611496578063de2ea9481461149e578063df73a267146114e6578063e124e6d2146114ee578063e468baf014611514578063e67f59a714611531578063efa10a6e14611557578063f07456ce14611583578063f07bbf77146115a9578063f2555278146115c8578063f3ae2415146115f6578063f5b91b7b1461161c578063f887ea4014611624578063fa12dbc01461162c578063fbfded6d1461165e578063fce28c101461168c578063fdaf6ac314611694578063fed1a606146116d857610599565b80638585f4d214610e90578063870d917c14610ebc57806388b1fbdf14610ec45780638a27d46814610eea5780638a39735a1461061a5780638a78daa814610f135780638ee573ac14610f395780638f7b840414610f5f5780639060b1ca14610f855780639331621214610f8d57806395082d2514610fc55780639698d25a14610fcd5780639849e41214610ff35780639899cd0214610ffb5780639d7432ca146110275780639f392eb314611059578063a22f239214611061578063a42ab3d214611069578063a5e90eee14611095578063a93acac2146110c3578063ab08c1c6146110e9578063ab2f3ad4146110f1578063ad1e4f8d14611117578063ae3302c21461113d578063b06423f314611145578063b136ca491461114d578063b1cc53ab14611173578063b364accb146111ab578063c3c7b9e9146111d1578063c4f718bf146111f7578063c65bc7b1146111ff57610599565b80634453a3741161044e5780634453a3741461097057806345a6f3701461099e57806348d91abf146109f757806348f35cbb14610a3b5780634a3f088d14610a435780634a993ee914610ac45780634befe2ca14610aea5780634d47b30414610af2578063514ea4bf14610afa57806351723e8214610b4f578063523fba7f14610b8d578063529a356f14610bb357806352f55eed14610bd95780635c07eaab14610bff5780635f7bc11914610c3f5780636092219914610c6557806362287a3214610c935780636274980314610c9b5780636abbe0c814610cc15780636ae0b15414610cc95780636be6026b14610cef57806371089f4d14610cf7578063711e619014610d1d578063724e78da14610d4b578063728cdbca14610d71578063741bef1a14610db95780637a210a2b14610dc15780637c2eb9f714610dc9578063817bb85714610de857806381a612d614610e1657806382a0849014610e3c57610599565b806304fef1db1461059e57806307c58752146105d65780630842b076146105de5780630a48d5a9146105e657806310eb56c214610612578063126082cf1461061a57806312d43a5114610622578063134ca63b14610646578063174d26941461064e578063181e210e146106565780631aa4ace5146106725780631ce9cb8f1461069857806324b0c04d146106be57806324ca984e146106df57806328e67be51461070557806329ff96151461077a5780632c668ec1146107a05780632d4b0576146107cc57806330455ede1461080a578063318bc6891461082957806334c1557d1461061a578063351a964d14610831578063392e53cd146108395780633a05dcc1146108415780633c5a6e35146108675780633de39c11146108b55780633e72a262146108bd57806340eb3802146108c5578063421528731461091657806342b60b031461094a575b600080fd5b6105c4600480360360208110156105b457600080fd5b50356001600160a01b031661176a565b60408051918252519081900360200190f35b6105c46117cd565b6105c46117de565b6105c4600480360360408110156105fc57600080fd5b506001600160a01b0381351690602001356117e4565b6105c4611837565b6105c461183d565b61062a611843565b604080516001600160a01b039092168252519081900360200190f35b6105c4611852565b6105c4611858565b61065e61185e565b604080519115158252519081900360200190f35b6105c46004803603602081101561068857600080fd5b50356001600160a01b031661186e565b6105c4600480360360208110156106ae57600080fd5b50356001600160a01b0316611880565b6106dd600480360360208110156106d457600080fd5b50351515611892565b005b6106dd600480360360208110156106f557600080fd5b50356001600160a01b03166118b6565b6106dd6004803603604081101561071b57600080fd5b81359190810190604081016020820135600160201b81111561073c57600080fd5b82018360208201111561074e57600080fd5b803590602001918460018302840111600160201b8311171561076f57600080fd5b5090925090506118e7565b6105c46004803603602081101561079057600080fd5b50356001600160a01b0316611965565b6105c4600480360360408110156107b657600080fd5b506001600160a01b038135169060200135611979565b6105c4600480360360808110156107e257600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013515156119be565b6106dd6004803603602081101561082057600080fd5b50351515611a14565b6105c4611a36565b61065e611a3c565b61065e611a4a565b6105c46004803603602081101561085757600080fd5b50356001600160a01b0316611a53565b6106dd600480360360e081101561087d57600080fd5b506001600160a01b038135169060208101359060408101359060608101359060808101359060a081013515159060c001351515611b13565b6105c4611c55565b61065e611c5b565b6106dd60048036036101208110156108dc57600080fd5b5080359060208101359060408101359060608101359060808101359060a08101359060c08101359060e08101359061010001351515611c6a565b6105c46004803603606081101561092c57600080fd5b508035906001600160a01b0360208201358116916040013516611d24565b61065e6004803603602081101561096057600080fd5b50356001600160a01b0316611dc6565b6106dd6004803603604081101561098657600080fd5b506001600160a01b0381351690602001351515611ddb565b6109dc600480360360808110156109b457600080fd5b506001600160a01b038135811691602081013582169160408201351690606001351515611e0e565b60408051921515835260208301919091528051918290030190f35b6106dd600480360360a0811015610a0d57600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013590608001351515611eac565b61062a6122eb565b610a8160048036036080811015610a5957600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013515156122fa565b604080519889526020890197909752878701959095526060870193909352608086019190915260a0850152151560c084015260e083015251908190036101000190f35b6105c460048036036020811015610ada57600080fd5b50356001600160a01b03166123f0565b6105c4612402565b6105c4612408565b610b1760048036036020811015610b1057600080fd5b503561240e565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b6105c460048036036080811015610b6557600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135151561244b565b6105c460048036036020811015610ba357600080fd5b50356001600160a01b03166124f1565b61065e60048036036020811015610bc957600080fd5b50356001600160a01b0316612503565b6105c460048036036020811015610bef57600080fd5b50356001600160a01b0316612518565b6109dc600480360360a0811015610c1557600080fd5b506001600160a01b038135169060208101359060408101359060608101351515906080013561252a565b6106dd60048036036020811015610c5557600080fd5b50356001600160a01b0316612622565b61065e60048036036040811015610c7b57600080fd5b506001600160a01b0381358116916020013516612705565b6105c4612725565b6105c460048036036020811015610cb157600080fd5b50356001600160a01b031661272b565b61062a61273d565b6106dd60048036036020811015610cdf57600080fd5b50356001600160a01b0316612753565b6105c4612781565b6106dd60048036036020811015610d0d57600080fd5b50356001600160a01b0316612788565b6105c460048036036040811015610d3357600080fd5b506001600160a01b03813581169160200135166127bc565b6106dd60048036036020811015610d6157600080fd5b50356001600160a01b0316612a50565b6106dd600480360360c0811015610d8757600080fd5b506001600160a01b03813581169160208101358216916040820135169060608101359060808101359060a00135612a7a565b61062a612af1565b6105c4612b00565b6106dd60048036036020811015610ddf57600080fd5b50351515612b06565b6105c460048036036040811015610dfe57600080fd5b506001600160a01b0381358116916020013516612b2a565b6105c460048036036020811015610e2c57600080fd5b50356001600160a01b0316612dfa565b6105c4600480360360e0811015610e5257600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359160808201359160a081013515159160c09091013516612ea5565b6106dd60048036036040811015610ea657600080fd5b506001600160a01b038135169060200135612f23565b6105c4612f47565b6105c460048036036020811015610eda57600080fd5b50356001600160a01b0316612f4c565b6106dd60048036036060811015610f0057600080fd5b5080359060208101359060400135612f5e565b6105c460048036036020811015610f2957600080fd5b50356001600160a01b0316612fa4565b6105c460048036036020811015610f4f57600080fd5b50356001600160a01b0316612fb6565b6106dd60048036036020811015610f7557600080fd5b50356001600160a01b0316612fc8565b61065e612ff2565b6105c460048036036060811015610fa357600080fd5b506001600160a01b038135811691602081013582169160409091013516613001565b6105c46132e9565b6105c460048036036020811015610fe357600080fd5b50356001600160a01b03166132f9565b6105c461330b565b6105c46004803603604081101561101157600080fd5b506001600160a01b038135169060200135613311565b6105c46004803603606081101561103d57600080fd5b506001600160a01b038135169060208101359060400135613333565b61065e6133dc565b6105c46133e5565b6105c46004803603604081101561107f57600080fd5b506001600160a01b0381351690602001356133eb565b6106dd600480360360408110156110ab57600080fd5b506001600160a01b0381351690602001351515613408565b6105c4600480360360208110156110d957600080fd5b50356001600160a01b031661343b565b61065e613539565b6105c46004803603602081101561110757600080fd5b50356001600160a01b0316613542565b6105c46004803603602081101561112d57600080fd5b50356001600160a01b0316613554565b6105c4613566565b61065e61356c565b6105c46004803603602081101561116357600080fd5b50356001600160a01b031661357a565b6105c46004803603606081101561118957600080fd5b506001600160a01b03813581169160208101359091169060400135151561361b565b6109dc600480360360208110156111c157600080fd5b50356001600160a01b03166136b6565b6105c4600480360360208110156111e757600080fd5b50356001600160a01b031661374e565b6105c4613760565b6105c46004803603602081101561121557600080fd5b50356001600160a01b0316613766565b6105c4600480360360a081101561123b57600080fd5b506001600160a01b0381351690602081013590604081013590606081013590608001351515613778565b6106dd6004803603606081101561127b57600080fd5b506001600160a01b03813581169160208101359091169060400135613822565b6106dd600480360360208110156112b157600080fd5b50356001600160a01b0316613843565b6106dd600480360360208110156112d757600080fd5b503561386d565b6106dd600480360360208110156112f457600080fd5b503561387a565b611341600480360360a081101561131157600080fd5b506001600160a01b0381358116916020810135821691604082013516906060810135151590608001351515613896565b6040805192835260208301919091528051918290030190f35b6106dd6004803603604081101561137057600080fd5b506001600160a01b03813516906020013561394d565b6105c46004803603602081101561139c57600080fd5b50356001600160a01b03166139a6565b6105c46139b8565b6105c4600480360360c08110156113ca57600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013515159060808101359060a001356139be565b61065e6004803603602081101561141457600080fd5b50356001600160a01b0316613a72565b61065e6004803603602081101561143a57600080fd5b50356001600160a01b0316613a87565b6105c4600480360360e081101561146057600080fd5b506001600160a01b0381351690602081013590604081013590606081013515159060808101359060a08101359060c00135613a9b565b6105c4613b2c565b6106dd600480360360a08110156114b457600080fd5b506001600160a01b03813581169160208101358216916040820135811691606081013515159160809091013516613b32565b6105c4613f0a565b6105c46004803603602081101561150457600080fd5b50356001600160a01b0316613f10565b61062a6004803603602081101561152a57600080fd5b5035613f88565b6106dd6004803603602081101561154757600080fd5b50356001600160a01b0316613faf565b6106dd6004803603604081101561156d57600080fd5b506001600160a01b038135169060200135614082565b6105c46004803603602081101561159957600080fd5b50356001600160a01b03166140a6565b6106dd600480360360208110156115bf57600080fd5b503515156140b8565b6105c4600480360360408110156115de57600080fd5b506001600160a01b03813581169160200135166140de565b61065e6004803603602081101561160c57600080fd5b50356001600160a01b0316614134565b61062a614149565b61062a614158565b6105c46004803603606081101561164257600080fd5b506001600160a01b038135169060208101359060400135614167565b6106dd6004803603604081101561167457600080fd5b506001600160a01b03813581169160200135166141a1565b6105c461437a565b6105c4600480360360a08110156116aa57600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013515159060800135614380565b6116f5600480360360208110156116ee57600080fd5b50356143f6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561172f578181015183820152602001611717565b50505050905090810190601f16801561175c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6001600160a01b038116600090815260256020526040812054806117925760009150506117c8565b6001600160a01b0383166000908152602660205260409020546117c49082906117be90620f4240614491565b906144ea565b9150505b919050565b6904ee2d6d415b85acef8160201b81565b601b5490565b6000816117f357506000611831565b60006117fe84612dfa565b6001600160a01b0385166000908152601d602052604090205490915061182c600a82900a6117be8685614491565b925050505b92915050565b600b5481565b61271081565b6006546001600160a01b031681565b60145481565b60095481565b6016546301000000900460ff1681565b60236020526000908152604090205481565b602c6020526000908152604090205481565b61189a614529565b60168054911515620100000262ff000019909216919091179055565b3360009081526018602090815260408083206001600160a01b0394909416835292905220805460ff19166001179055565b6002546001600160a01b03163314611946576040805162461bcd60e51b815260206004820152601e60248201527f5661756c743a20696e76616c6964206572726f72436f6e74726f6c6c65720000604482015290519081900360640190fd5b600083815260306020526040902061195f908383615dac565b50505050565b6000611831826119748461357a565b6117e4565b60008061198584613f10565b905060006119a3826117be8668327cb2734119d3b7a9601e1b614491565b60055490915061182c9082906001600160a01b031687611d24565b604080516001600160601b0319606096871b811660208084019190915295871b811660348301529390951b9092166048850152151560f81b605c8401528051603d818503018152605d9093019052815191012090565b611a1c614529565b600180549115156101000261ff0019909216919091179055565b600f5481565b600154610100900460ff1681565b60015460ff1681565b600080600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aa457600080fd5b505afa158015611ab8573d6000803e3d6000fd5b505050506040513d6020811015611ace57600080fd5b5051905080611ae15760009150506117c8565b6001600160a01b038316600090815260226020526040902054601554611b0b906117be8385614491565b949350505050565b611b1b614529565b6001600160a01b0387166000908152601c602052604090205460ff16611b9857600754611b49906001614544565b600755601b80546001810182556000919091527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc10180546001600160a01b0319166001600160a01b0389161790555b6015546001600160a01b038816600090815260226020526040902054611bbf90829061459c565b6001600160a01b0389166000908152601c602090815260408083208054600160ff1991821617909155601d83528184208c9055602283528184208b9055601e83528184208a905560248352818420899055601f83528184208054821689151517905591805290912080549091168415151790559050611c3e8187614544565b601555611c4a88613f10565b505050505050505050565b60175481565b60015462010000900460ff1681565b611c72614529565b611c826101f48a111560036145de565b611c926101f489111560046145de565b611ca26101f488111560056145de565b611cb26101f487111560066145de565b611cc26101f486111560076145de565b611cd26101f485111560086145de565b611ced6904ee2d6d415b85acef8160201b84111560096145de565b600a98909855600b96909655600c94909455600d92909255600e55600f556009556010556011805460ff1916911515919091179055565b60055460009081906001600160a01b03858116911614611d5c576001600160a01b0384166000908152601d6020526040902054611d5f565b60125b6005549091506000906001600160a01b03858116911614611d98576001600160a01b0384166000908152601d6020526040902054611d9b565b60125b9050611dba82600a0a6117be83600a0a8961449190919063ffffffff16565b925050505b9392505050565b601f6020526000908152604090205460ff1681565b611de3614529565b6001600160a01b03919091166000908152601960205260409020805460ff1916911515919091179055565b6000806000611e1f878787876119be565b9050611e29615e2a565b506000818152602b6020908152604091829020825160e081018452815480825260018301549382019390935260028201549381018490526003820154606082015260048201546080820152600582015460a082015260069091015460c082018190529092611e9d928992909190899061252a565b93509350505094509492505050565b60026000541415611ef2576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b6002600055600154611f0e9062010000900460ff16601c6145de565b611f1661468a565b611f1f856146a6565b611f2a848483614709565b60015460408051634eae147d60e11b81526001600160a01b038881166004830152878116602483015286811660448301526064820186905284151560848301529151630100000090930490911691639d5c28fa9160a480820192600092909190829003018186803b158015611f9e57600080fd5b505afa158015611fb2573d6000803e3d6000fd5b50505050611fc084846141a1565b6000611fce868686856119be565b6000818152602b6020526040812091925083611ff257611fed86612dfa565b611ffb565b611ffb86613f10565b825490915061200c57600282018190555b81541580159061201c5750600085115b156120425761203c868360000154846002015487858a8860060154613a9b565b60028301555b600061205b898989888a8860000154896003015461481e565b90506000612068896148ec565b905060006120768a836117e4565b60018601549091506120889082614544565b6001860181905561209d90841115601d6145de565b60018501546120ac908461459c565b60018601556120bc8a8a8961361b565b600386015584546120cd9089614544565b8086554260068701556120e3901515601e6145de565b6120f585600001548660010154614999565b6121038b8b8b8a6001613896565b505060006121118b8a6133eb565b60048701549091506121239082614544565b60048701556121328b826149bd565b87156121775761214b8b6121468b87614544565b614a5d565b6121558b83614adc565b61215f8b84614b5b565b6121728b61216d8d87613311565b614c73565b6121e3565b6001600160a01b038a166000908152602d60205260409020546121b4576001600160a01b038a166000908152602e602052604090208590556121d9565b6121bf8a868b613333565b6001600160a01b038b166000908152602e60205260409020555b6121e38a8a614d46565b604080518881526001600160a01b03808f166020830152808e16828401528c1660608201526080810184905260a081018b905289151560c082015260e08101879052610100810186905290517f2fe68525253654c21998f35787a8d0f361905ef647c854092430ab65f2f15022918190036101200190a1855460018701546002880154600389015460048a015460058b0154604080518e81526020810197909752868101959095526060860193909352608085019190915260a084015260c083015260e08201879052517f20853733b590dce729d9f4628682ebd9a34d2354e72679e66f43a008fc03b773918190036101000190a15050600160005550505050505050505050565b6002546001600160a01b031681565b60008060008060008060008060006123148d8d8d8d6119be565b905061231e615e2a565b602b60008381526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505090506000808260a001511361239e578160a001516000036123a4565b8160a001515b9050816000015182602001518360400151846060015185608001518560008860a0015112158860c001519a509a509a509a509a509a509a509a5050505094995094995094999196509450565b60276020526000908152604090205481565b6101f481565b600c5481565b602b602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b60008061245a868686866119be565b9050612464615e2a565b506000818152602b6020908152604091829020825160e0810184528154815260018201549281018390526002820154938101939093526003810154606084015260048101546080840152600581015460a08401526006015460c08301526124ce90151560256145de565b602081015181516124e691906117be90612710614491565b979650505050505050565b60216020526000908152604090205481565b60196020526000908152604090205460ff1681565b60256020526000908152604090205481565b60008061253b6000861160266145de565b6000846125505761254b88613f10565b612559565b61255988612dfa565b905060008187116125735761256e828861459c565b61257d565b61257d878361459c565b9050600061258f886117be8b85614491565b9050600087156125a257508783116125a7565b508288115b60006125be6010548961454490919063ffffffff16565b42116125e2576001600160a01b038c166000908152601e60205260409020546125e5565b60005b905081801561260857506125f98b82614491565b61260584612710614491565b11155b1561261257600092505b509a909950975050505050505050565b60026000541415612668576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b600260009081556001600160a01b0382168152601c60205260409020546126939060ff16600e6145de565b600061269e826148ec565b90506126ae60008211600f6145de565b6126b88282614b5b565b604080516001600160a01b03841681526020810183905281517fa5a389190ebf6170a133bda5c769b77f4d6715b8aa172ec0ddf8473d0b4944bd929181900390910190a150506001600055565b601860209081526000928352604080842090915290825290205460ff1681565b60075481565b602e6020526000908152604090205481565b600154630100000090046001600160a01b031681565b3360009081526018602090815260408083206001600160a01b0394909416835292905220805460ff19169055565b620f424081565b612790614529565b600180546001600160a01b039092166301000000026301000000600160b81b0319909216919091179055565b600060026000541415612804576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b6002600055612811614dfe565b6001600160a01b0383166000908152601c60205260409020546128389060ff1660136145de565b6016805461ff00191661010017905560055460009061285f906001600160a01b03166148ec565b905061286f6000821160146145de565b61287984856141a1565b60006128858583611979565b90506128956000821160156145de565b61289f8583614e2d565b6128a98582614c73565b60055460408051632770a7eb60e21b81523060048201526024810185905290516001600160a01b0390921691639dc29fac9160448082019260009290919082900301818387803b1580156128fc57600080fd5b505af1158015612910573d6000803e3d6000fd5b505060055461292a92506001600160a01b03169050614f0f565b6001546040805163eb0835bf60e01b81526001600160a01b038881166004830152602482018690529151600093630100000090049092169163eb0835bf91604480820192602092909190829003018186803b15801561298857600080fd5b505afa15801561299c573d6000803e3d6000fd5b505050506040513d60208110156129b257600080fd5b5051905060006129c3878484614faa565b90506129d36000821160166145de565b6129de878288615072565b604080516001600160a01b03808916825289166020820152808201869052606081018390526080810184905290517fd732b7828fa6cee72c285eac756fc66a7477e3dc22e22e7c432f1c265d40b4839181900360a00190a16016805461ff001916905560016000559695505050505050565b612a58614529565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b612a82614529565b60018054612a969160ff90911615906145de565b6001805460ff191681179055600380546001600160a01b03199081166001600160a01b039889161790915560058054821696881696909617909555600480549095169390951692909217909255600991909155601355601455565b6004546001600160a01b031681565b600a5481565b612b0e614529565b60018054911515620100000262ff000019909216919091179055565b600060026000541415612b72576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b6002600055612b7f614dfe565b6001600160a01b0383166000908152601c6020526040902054612ba69060ff1660106145de565b6016805461ff0019166101001790556000612bc0846148ec565b9050612bd06000821160116145de565b612bda84856141a1565b6000612be585612dfa565b90506000612c0368327cb2734119d3b7a9601e1b6117be8585614491565b600554909150612c1f90829088906001600160a01b0316611d24565b9050612c2f6000821160126145de565b6001546040805163256f6ee360e11b81526001600160a01b0389811660048301526024820185905291516000936301000000900490921691634adeddc691604480820192602092909190829003018186803b158015612c8d57600080fd5b505afa158015612ca1573d6000803e3d6000fd5b505050506040513d6020811015612cb757600080fd5b505190506000612cc8888684614faa565b90506000612ce668327cb2734119d3b7a9601e1b6117be8488614491565b600554909150612d029082908b906001600160a01b0316611d24565b9050612d0e8982615119565b612d188983614b5b565b600554604080516340c10f1960e01b81526001600160a01b038b8116600483015260248201859052915191909216916340c10f1991604480830192600092919082900301818387803b158015612d6d57600080fd5b505af1158015612d81573d6000803e3d6000fd5b5050604080516001600160a01b03808d1682528d1660208201528082018a9052606081018590526080810187905290517fab4c77c74cd32c85f35416cf03e7ce9e2d4387f7b7f2c1f4bf53daaecf8ea72d93509081900360a0019150a16016805461ff0019169055600160005598975050505050505050565b60048054601654604080516317e1d38560e11b81526001600160a01b038681169582019590955260006024820181905260ff80851615156044840152610100909404909316151560648201529051919390921691632fc3a70a916084808301926020929190829003018186803b158015612e7357600080fd5b505afa158015612e87573d6000803e3d6000fd5b505050506040513d6020811015612e9d57600080fd5b505192915050565b600060026000541415612eed576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b6002600055612efa61468a565b612f03886146a6565b612f12888888888888886151d7565b600160005598975050505050505050565b612f2b614529565b6001600160a01b03909116600090815260276020526040902055565b601281565b601e6020526000908152604090205481565b612f66614529565b612f76610e10841015600a6145de565b612f86612710831115600b6145de565b612f96612710821115600c6145de565b601292909255601355601455565b602d6020526000908152604090205481565b601d6020526000908152604090205481565b612fd0614529565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60165462010000900460ff1681565b600060026000541415613049576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b600260005560015461306490610100900460ff1660176145de565b6001600160a01b0384166000908152601c602052604090205461308b9060ff1660186145de565b6001600160a01b0383166000908152601c60205260409020546130b29060ff1660196145de565b6130d2836001600160a01b0316856001600160a01b03161415601a6145de565b6016805461ff0019166101001790556130eb84806141a1565b6130f583846141a1565b6000613100856148ec565b905061311060008211601b6145de565b600061311b86612dfa565b9050600061312886613f10565b9050600061313a826117be8686614491565b9050613147818989611d24565b9050600061316568327cb2734119d3b7a9601e1b6117be8787614491565b6005549091506131819082908b906001600160a01b0316611d24565b60015460408051636d099c0b60e11b81526001600160a01b038d811660048301528c8116602483015260448201859052915193945060009363010000009093049091169163da13381691606480820192602092909190829003018186803b1580156131eb57600080fd5b505afa1580156131ff573d6000803e3d6000fd5b505050506040513d602081101561321557600080fd5b5051905060006132268a8584614faa565b90506132328b84615119565b61323c8a84614e2d565b6132468b88614b5b565b6132508a85614c73565b6132598a61569a565b6132648a828b615072565b604080516001600160a01b03808c168252808e1660208301528c1681830152606081018990526080810186905260a0810183905260c0810184905290517f0874b2d545cb271cdbda4e093020c452328b24af12382ed62c4d00f5c26709db9181900360e00190a16016805461ff001916905560016000559a9950505050505050505050565b68327cb2734119d3b7a9601e1b81565b602f6020526000908152604090205481565b60125481565b60008161332057506000611831565b611dbf838361332e86613f10565b614167565b6001600160a01b0383166000908152602d6020908152604080832054602e9092528220548285821161336e57613369868361459c565b613378565b613378828761459c565b9050600061338a836117be8685614491565b9050868311600061339b8689614544565b90506000826133b3576133ae8285614544565b6133bd565b6133bd828561459c565b90506133cd816117be8c85614491565b9b9a5050505050505050505050565b60115460ff1681565b600d5481565b6000816133fa57506000611831565b611dbf838361332e86612dfa565b613410614529565b6001600160a01b03919091166000908152601a60205260409020805460ff1916911515919091179055565b6012546001600160a01b0382166000908152602a60205260408120549091429161346491614544565b1115613472575060006117c8565b6012546001600160a01b0383166000908152602a6020526040812054909161349f916117be90429061459c565b6001600160a01b038416600090815260256020526040902054909150806134cb576000925050506117c8565b6001600160a01b0384166000908152601f602052604081205460ff166134f3576013546134f7565b6014545b6001600160a01b0386166000908152602660205260409020549091506135309083906117be90869061352a908690614491565b90614491565b95945050505050565b60165460ff1681565b60226020526000908152604090205481565b60246020526000908152604090205481565b60085481565b601654610100900460ff1681565b6001600160a01b0381166000908152601f602052604081205460ff16156135ba57506001600160a01b0381166000908152602560205260409020546117c8565b6001600160a01b0382166000908152602860205260408120546135de908490613311565b6001600160a01b0384166000908152602660209081526040808320546025909252909120549192506117c491613615908490614544565b9061459c565b6001546040805163b1cc53ab60e01b81526001600160a01b038681166004830152858116602483015284151560448301529151600093630100000090049092169163b1cc53ab91606480820192602092909190829003018186803b15801561368257600080fd5b505afa158015613696573d6000803e3d6000fd5b505050506040513d60208110156136ac57600080fd5b5051949350505050565b6001600160a01b0381166000908152602d60205260408120548190806136e3576000809250925050613749565b60006136ee85613f10565b6001600160a01b0386166000908152602e60205260408120549192508282116137205761371b838361459c565b61372a565b61372a828461459c565b9050600061373c836117be8785614491565b9390921195509193505050505b915091565b60266020526000908152604090205481565b60135481565b60296020526000908152604090205481565b6001546040805163c7e074c360e01b81526001600160a01b03888116600483015260248201889052604482018790526064820186905284151560848301529151600093630100000090049092169163c7e074c39160a480820192602092909190829003018186803b1580156137ec57600080fd5b505afa158015613800573d6000803e3d6000fd5b505050506040513d602081101561381657600080fd5b50519695505050505050565b61382a614529565b61383e6001600160a01b038316848361570f565b505050565b61384b614529565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b613875614529565b601755565b613882614529565b613891612710821160026145de565b600855565b6001546040805163d54d5a9f60e01b81526001600160a01b03888116600483015287811660248301528681166044830152851515606483015284151560848301528251600094859463010000009091049092169263d54d5a9f9260a4808301939192829003018186803b15801561390c57600080fd5b505afa158015613920573d6000803e3d6000fd5b505050506040513d604081101561393657600080fd5b508051602090910151909890975095505050505050565b613955614529565b6001600160a01b0382166000908152602360205260409020548082111561398f5761398983613984848461459c565b615119565b506139a2565b61383e8361399d838561459c565b614e2d565b5050565b602a6020526000908152604090205481565b60105481565b6001546040805163369d949360e21b81526001600160a01b0389811660048301528881166024830152878116604483015286151560648301526084820186905260a482018590529151600093630100000090049092169163da76524c9160c480820192602092909190829003018186803b158015613a3b57600080fd5b505afa158015613a4f573d6000803e3d6000fd5b505050506040513d6020811015613a6557600080fd5b5051979650505050505050565b601c6020526000908152604090205460ff1681565b602080526000908152604090205460ff1681565b6000806000613aad8a8a8a8a8861252a565b90925090506000613abe8a87614544565b905060008815613aed5783613adc57613ad7828461459c565b613ae6565b613ae68284614544565b9050613b0e565b83613b0157613afc8284614544565b613b0b565b613b0b828461459c565b90505b613b1c816117be8a85614491565b9c9b505050505050505050505050565b60155481565b60026000541415613b78576040805162461bcd60e51b815260206004820152601f6024820152600080516020615e7d833981519152604482015290519081900360640190fd5b60026000556016546301000000900460ff1615613bad5733600090815260196020526040902054613bad9060ff1660226145de565b6016805460ff19169055613bc184846141a1565b6000613bcf868686866119be565b9050613bd9615e2a565b506000818152602b6020908152604091829020825160e08101845281548082526001830154938201939093526002820154938101939093526003810154606084015260048101546080840152600581015460a08401526006015460c0830152613c4590151560236145de565b600080613c56898989896000613896565b91509150613c69826000141560246145de565b8160021415613c9e57613c86898989600087600001518b8f6151d7565b50506016805460ff1916600117905550613efe915050565b6000613caa8983613311565b6001600160a01b038a166000908152602c6020526040902054909150613cd09082614544565b6001600160a01b038a166000818152602c602090815260409182902093909355805191825291810184905280820183905290517f5d0c0019d3d45fadeb74eff9d2c9924d146d000ac6bcf3c28bf0ac3c9baa011a9181900360600190a1613d3b898560800151615761565b8615613d6a5760208401518451613d5c918b91613d579161459c565b614adc565b613d6a8961216d8b85613311565b600087613d7f57613d7a89613f10565b613d88565b613d8889612dfa565b90507f2e1f85a64a2f22cf2f0c42584e7c919ed4abe8d53675cff0f62bf1e95a1c676f868c8c8c8c8a600001518b602001518c608001518d60a001518a604051808b81526020018a6001600160a01b03168152602001896001600160a01b03168152602001886001600160a01b0316815260200187151581526020018681526020018581526020018481526020018381526020018281526020019a505050505050505050505060405180910390a187158015613e475750846020015183105b15613e75576020850151600090613e5e908561459c565b9050613e738b613e6e8d84613311565b614b5b565b505b87613e8857613e88898660000151615816565b6000868152602b60205260408120818155600181018290556002810182905560038101829055600481018290556005810182905560060155600954613ed4908b9061216d908290613311565b613eea8a613ee48c600954613311565b89615072565b50506016805460ff19166001179055505050505b50506001600055505050565b600e5481565b60048054601654604080516317e1d38560e11b81526001600160a01b03868116958201959095526001602482015260ff80841615156044830152610100909304909216151560648301525160009390921691632fc3a70a91608480820192602092909190829003018186803b158015612e7357600080fd5b601b8181548110613f9557fe5b6000918252602090912001546001600160a01b0316905081565b613fb7614529565b6001600160a01b0381166000908152601c6020526040902054613fde9060ff16600d6145de565b6001600160a01b0381166000908152602260205260409020546015546140039161459c565b6015556001600160a01b0381166000908152601c60209081526040808320805460ff19908116909155601d835281842084905560228352818420849055601e835281842084905560248352818420849055601f83528184208054821690559180529091208054909116905560075461407c90600161459c565b60075550565b61408a614529565b6001600160a01b039091166000908152602f6020526040902055565b60286020526000908152604090205481565b6140c0614529565b6016805491151563010000000263ff00000019909216919091179055565b60006140e8614529565b6001600160a01b0383166000908152602c602052604090205480614110576000915050611831565b6001600160a01b0384166000908152602c6020526040812055611dbf848285615072565b601a6020526000908152604090205460ff1681565b6005546001600160a01b031681565b6003546001600160a01b031681565b60008261417657506000611dbf565b6001600160a01b0384166000908152601d6020526040902054613530836117be86600a85900a614491565b6001546040805163fbfded6d60e01b81526001600160a01b03858116600483015284811660248301529151600093630100000090049092169163fbfded6d9160448082019260209290919082900301818787803b15801561420157600080fd5b505af1158015614215573d6000803e3d6000fd5b505050506040513d602081101561422b57600080fd5b505190508061423a57506139a2565b6001600160a01b0383166000908152602a6020526040902054614287576012546142689061352a42826144ea565b6001600160a01b0384166000908152602a6020526040902055506139a2565b6012546001600160a01b0384166000908152602a602052604090205442916142af9190614544565b11156142bb57506139a2565b60006142c68461343b565b6001600160a01b0385166000908152602960205260409020549091506142ec9082614544565b6001600160a01b0385166000908152602960205260409020556012546143169061352a42826144ea565b6001600160a01b0385166000818152602a602090815260408083209490945560298152908390205483519283529082015281517fa146fc154e1913322e9817d49f0d5c37466c24326e15de10e739a948be815eab929181900390910190a150505050565b610e1081565b6001546040805163fdaf6ac360e01b81526001600160a01b038881166004830152878116602483015286811660448301528515156064830152608482018590529151600093630100000090049092169163fdaf6ac39160a480820192602092909190829003018186803b1580156137ec57600080fd5b60306020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156144895780601f1061445e57610100808354040283529160200191614489565b820191906000526020600020905b81548152906001019060200180831161446c57829003601f168201915b505050505081565b6000826144a057506000611831565b828202828482816144ad57fe5b0414611dbf5760405162461bcd60e51b8152600401808060200182810382526021815260200180615e9d6021913960400191505060405180910390fd5b6000611dbf83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b81525061587e565b600654614542906001600160a01b0316331460356145de565b565b600082820183811015611dbf576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b6000611dbf83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615920565b60008181526030602052604090208261383e5760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561467b5780601f106146505761010080835404028352916020019161467b565b820191906000526020600020905b81548152906001019060200180831161465e57829003601f168201915b50509250505060405180910390fd5b60175461469657614542565b6145426017543a111560376145de565b336001600160a01b03821614156146bc57614706565b6003546001600160a01b03163314156146d457614706565b6001600160a01b03811660009081526018602090815260408083203384529091529020546147069060ff1660296145de565b50565b80156147825761472e826001600160a01b0316846001600160a01b031614602a6145de565b6001600160a01b0383166000908152601c60205260409020546147559060ff16602b6145de565b6001600160a01b0383166000908152601f602052604090205461477d9060ff1615602c6145de565b61383e565b6001600160a01b0383166000908152601c60205260409020546147a99060ff16602d6145de565b6001600160a01b0383166000908152601f60205260409020546147d09060ff16602e6145de565b6001600160a01b0382166000908152601f60205260409020546147f89060ff1615602f6145de565b6001600160a01b038216600090815260208052604090205461383e9060ff1660306145de565b60008061482e8989898989614380565b905060006148408a8a8a8a89896139be565b905061484c8282614544565b9150600061485a8a84613311565b6001600160a01b038b166000908152602c60205260409020549091506148809082614544565b6001600160a01b038b166000818152602c602090815260409182902093909355805191825291810185905280820183905290517f5d0c0019d3d45fadeb74eff9d2c9924d146d000ac6bcf3c28bf0ac3c9baa011a9181900360600190a150909998505050505050505050565b6001600160a01b03811660008181526021602090815260408083205481516370a0823160e01b8152306004820152915193949093859391926370a08231926024808301939192829003018186803b15801561494657600080fd5b505afa15801561495a573d6000803e3d6000fd5b505050506040513d602081101561497057600080fd5b50516001600160a01b03851660009081526021602052604090208190559050611b0b818361459c565b816149af576149aa811560276145de565b6139a2565b6139a28183101560286145de565b6001600160a01b0382166000908152602660205260409020546149e09082614544565b6001600160a01b038316600090815260266020818152604080842085905560258252909220549152614a1591111560346145de565b604080516001600160a01b03841681526020810183905281517faa5649d82f5462be9d19b0f2b31a59b2259950a6076550bac9f3a1c07db9f66d929181900390910190a15050565b6001600160a01b038216600090815260286020526040902054614a809082614544565b6001600160a01b03831660008181526028602090815260409182902093909355805191825291810183905281517fd9d4761f75e0d0103b5cbeab941eeb443d7a56a35b5baf2a0787c03f03f4e474929181900390910190a15050565b6001600160a01b038216600090815260286020526040902054614aff908261459c565b6001600160a01b03831660008181526028602090815260409182902093909355805191825291810183905281517f34e07158b9db50df5613e591c44ea2ebc82834eff4a4dc3a46e000e608261d68929181900390910190a15050565b6001600160a01b038216600090815260256020526040902054614b7e9082614544565b6001600160a01b03831660008181526025602090815260408083209490945583516370a0823160e01b8152306004820152935191936370a082319260248083019392829003018186803b158015614bd457600080fd5b505afa158015614be8573d6000803e3d6000fd5b505050506040513d6020811015614bfe57600080fd5b50516001600160a01b038416600090815260256020526040902054909150614c2a9082101560316145de565b604080516001600160a01b03851681526020810184905281517f976177fbe09a15e5e43f848844963a42b41ef919ef17ff21a17a5421de8f4737929181900390910190a1505050565b604080518082018252601a81527915985d5b1d0e881c1bdbdb105b5bdd5b9d08195e18d95959195960321b6020808301919091526001600160a01b038516600090815260259091529190912054614ccb918390615920565b6001600160a01b03831660009081526025602090815260408083208490556026909152902054614cfe91101560326145de565b604080516001600160a01b03841681526020810183905281517f112726233fbeaeed0f5b1dba5cb0b2b81883dee49fb35ff99fd98ed9f6d31eb0929181900390910190a15050565b6001600160a01b0382166000908152602d6020526040902054614d699082614544565b6001600160a01b0383166000908152602d6020908152604080832093909355602f90522054801561383e576001600160a01b0383166000908152602d602052604090205481101561383e576040805162461bcd60e51b815260206004820152601a60248201527915985d5b1d0e881b585e081cda1bdc9d1cc8195e18d95959195960321b604482015290519081900360640190fd5b60165462010000900460ff161561454257336000908152601a60205260409020546145429060ff1660366145de565b6001600160a01b038216600090815260236020526040902054818111614ea8576001600160a01b0383166000818152602360209081526040808320929092558151928352820183905280517fe1e812596aac93a06ecc4ca627014d18e30f5c33b825160cc9d5c0ba61e452279281900390910190a1506139a2565b614eb2818361459c565b6001600160a01b03841660008181526023602090815260409182902093909355805191825291810184905281517fe1e812596aac93a06ecc4ca627014d18e30f5c33b825160cc9d5c0ba61e45227929181900390910190a1505050565b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015614f5e57600080fd5b505afa158015614f72573d6000803e3d6000fd5b505050506040513d6020811015614f8857600080fd5b50516001600160a01b0390921660009081526021602052604090209190915550565b600080614fc76127106117be614fc0828761459c565b8790614491565b90506000614fd5858361459c565b6001600160a01b0387166000908152602c6020526040902054909150614ffb9082614544565b6001600160a01b0387166000908152602c60205260409020557f47cd9dda0e50ce30bcaaacd0488452b596221c07ac402a581cfae4d3933cac2b8661504081846117e4565b604080516001600160a01b0390931683526020830191909152818101849052519081900360600190a150949350505050565b6150866001600160a01b038416828461570f565b604080516370a0823160e01b815230600482015290516001600160a01b038516916370a08231916024808301926020929190829003018186803b1580156150cc57600080fd5b505afa1580156150e0573d6000803e3d6000fd5b505050506040513d60208110156150f657600080fd5b50516001600160a01b039093166000908152602160205260409020929092555050565b6001600160a01b03821660009081526023602052604090205461513c9082614544565b6001600160a01b038316600090815260236020908152604080832093909355602490522054801561518e576001600160a01b03831660009081526023602052604090205461518e9082101560336145de565b604080516001600160a01b03851681526020810184905281517f64243679a443432e2293343b77d411ff6144370404618f00ca0d2025d9ca9882929181900390910190a1505050565b600154604080516381d11a2360e01b81526001600160a01b038a8116600483015289811660248301528881166044830152606482018890526084820187905285151560a483015284811660c4830152915160009363010000009004909216916381d11a239160e4808201928692909190829003018186803b15801561525b57600080fd5b505afa15801561526f573d6000803e3d6000fd5b5050505061527d87876141a1565b600061528b898989876119be565b6000818152602b602052604090208054919250906152ac901515601f6145de565b6152be868260000154101560206145de565b6152d0878260010154101560216145de565b6001810154815460048301546000916152ed916117be908b614491565b60048401549091506152ff908261459c565b600484015561530e8b82615761565b506000806153208d8d8d8d8d8d61597a565b8554919350915089146154c4576153388c8c8a61361b565b60038501558354615349908a61459c565b808555600185015461535b9190614999565b6153698d8d8d8b6001613896565b505087156153965761538c8c61214686600101548661459c90919063ffffffff16565b6153968c8a614adc565b6000886153ab576153a68c613f10565b6153b4565b6153b48c612dfa565b90507f93d75d64d1f84fc6f430a64fc578bdd4c1e090e90ea2d51773e626d19de56d30868f8f8f8f8f8f886153e98c8c61459c565b60408051998a526001600160a01b0398891660208b015296881689880152949096166060880152608087019290925260a0860152151560c085015260e084019290925261010083019190915251908190036101200190a18454600186015460028701546003880154600489015460058a0154604080518d81526020810197909752868101959095526060860193909352608085019190915260a084015260c083015260e08201839052517f20853733b590dce729d9f4628682ebd9a34d2354e72679e66f43a008fc03b773918190036101000190a150615638565b87156154de576154d48c84614a5d565b6154de8c8a614adc565b6000886154f3576154ee8c613f10565b6154fc565b6154fc8c612dfa565b90507f93d75d64d1f84fc6f430a64fc578bdd4c1e090e90ea2d51773e626d19de56d30868f8f8f8f8f8f886155318c8c61459c565b60408051998a526001600160a01b0398891660208b015296881689880152949096166060880152608087019290925260a0860152151560c085015260e084019290925261010083019190915251908190036101200190a18454600186015460028701546003880154600489015460058a0154604080518d81526020810197909752868101959095526060860193909352608085019190915260a084015260c0830152517f73af1d417d82c240fdb6d319b34ad884487c6bf2845d98980cc52ad9171cb4559181900360e00190a1506000858152602b602052604081208181556001810182905560028101829055600381018290556004810182905560058101829055600601555b87615647576156478b8a615816565b8115615687578715615661576156618c61216d8e85613311565b600061566d8d83613311565b905061567a8d828a615072565b95506124e6945050505050565b5060009c9b505050505050505050505050565b6001600160a01b0381166000908152602760209081526040808320546025909252909120541015614706576040805162461bcd60e51b815260206004820152601a6024820152792b30bab63a1d103837b7b620b6b7bab73a101e10313ab33332b960311b604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261383e908490615b74565b604080518082018252601b81527a5661756c743a20696e73756666696369656e74207265736572766560281b6020808301919091526001600160a01b0385166000908152602690915291909120546157ba918390615920565b6001600160a01b03831660008181526026602090815260409182902093909355805191825291810183905281517f533cb5ed32be6a90284e96b5747a1bfc2d38fdb5768a6b5f67ff7d62144ed67b929181900390910190a15050565b6001600160a01b0382166000908152602d60205260409020548082111561585657506001600160a01b0382166000908152602d60205260408120556139a2565b615860818361459c565b6001600160a01b0384166000908152602d6020526040902055505050565b6000818361590a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156158cf5781810151838201526020016158b7565b50505050905090810190601f1680156158fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161591657fe5b0495945050505050565b600081848411156159725760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156158cf5781810151838201526020016158b7565b505050900390565b600080600061598b898989876119be565b6000818152602b602052604081208054600382015493945090926159b8918d918d918d918b918d9161481e565b90506000806000806159d98d876000015488600201548d8a6006015461252a565b875491955085935091506159f1906117be8d84614491565b925050506000828015615a045750600082115b15615a345750600584018054820190558088615a34576000615a268e84613311565b9050615a328e82614c73565b505b82158015615a425750600082115b15615a86576001850154615a56908361459c565b600186015588615a7a576000615a6c8e84613311565b9050615a788e82614b5b565b505b60058501805483900390555b8a15615aae57615a96818c614544565b6001860154909150615aa8908c61459c565b60018601555b84548a1415615ad1576001850154615ac7908290614544565b6000600187015590505b8084811115615aeb57615ae4828661459c565b9050615b1f565b6001860154615afa908661459c565b60018701558915615b1f576000615b118f87613311565b9050615b1d8f82614c73565b505b60408051888152851515602082015280820185905290517f3ff41bdde87755b687ae83d0221a232b6be51a803330ed9661c1b5d0105e0d8a9181900360600190a1909e909d509b505050505050505050505050565b6060615bc9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316615c259092919063ffffffff16565b80519091501561383e57808060200190516020811015615be857600080fd5b505161383e5760405162461bcd60e51b815260040180806020018281038252602a815260200180615ebe602a913960400191505060405180910390fd5b6060611b0b848460008585615c3985615d40565b615c8a576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310615cc95780518252601f199092019160209182019101615caa565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114615d2b576040519150601f19603f3d011682016040523d82523d6000602084013e615d30565b606091505b50915091506124e6828286615d46565b3b151590565b60608315615d55575081611dbf565b825115615d655782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156158cf5781810151838201526020016158b7565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615ded5782800160ff19823516178555615e1a565b82800160010185558215615e1a579182015b82811115615e1a578235825591602001919060010190615dff565b50615e26929150615e67565b5090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5b80821115615e265760008155600101615e6856fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a164736f6c634300060c000a",
      "r": "0x4c00be4520b6aab88e134b205bd0b0750f26e5e95785d9baa119b314d163cced",
      "s": "0x410edc9b53ff825e3c3e5211cff91308edc8b24f8ca252814870e8112f5c2398",
      "v": 45,
      "chainId": 5
    }
  }
}