{
  "address": "0x4058ED3951770436984723B0C2C9C1DfC37b9017",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_shortsTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_orderBook",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marginFeeBasisPoints",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "referralCode",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "DecreasePositionReferral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sizeDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marginFeeBasisPoints",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "referralCode",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "IncreasePositionReferral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "SetAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositFee",
          "type": "uint256"
        }
      ],
      "name": "SetDepositFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "inLegacyMode",
          "type": "bool"
        }
      ],
      "name": "SetInLegacyMode",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "increasePositionBufferBps",
          "type": "uint256"
        }
      ],
      "name": "SetIncreasePositionBufferBps",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "SetLiquidator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "longSizes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "shortSizes",
          "type": "uint256[]"
        }
      ],
      "name": "SetMaxGlobalSizes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "SetOrderKeeper",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "SetPartner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "referralStorage",
          "type": "address"
        }
      ],
      "name": "SetReferralStorage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "shouldValidateIncreaseOrder",
          "type": "bool"
        }
      ],
      "name": "SetShouldValidateIncreaseOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFees",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "decreasePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        }
      ],
      "name": "decreasePositionAndSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "address payable",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        }
      ],
      "name": "decreasePositionAndSwapETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "address payable",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "decreasePositionETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "executeDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "executeIncreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "executeSwapOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inLegacyMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "increasePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increasePositionBufferBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "increasePositionETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isLiquidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOrderKeeper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPartner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "liquidatePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxGlobalLongSizes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxGlobalShortSizes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderBook",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralStorage",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositFee",
          "type": "uint256"
        }
      ],
      "name": "setDepositFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_inLegacyMode",
          "type": "bool"
        }
      ],
      "name": "setInLegacyMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_increasePositionBufferBps",
          "type": "uint256"
        }
      ],
      "name": "setIncreasePositionBufferBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setLiquidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_longSizes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_shortSizes",
          "type": "uint256[]"
        }
      ],
      "name": "setMaxGlobalSizes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setOrderKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setPartner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referralStorage",
          "type": "address"
        }
      ],
      "name": "setReferralStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_shouldValidateIncreaseOrder",
          "type": "bool"
        }
      ],
      "name": "setShouldValidateIncreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shortsTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shouldValidateIncreaseOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x42ecb639adb463b86aeebbf1427c53187365d5dd9c851efa033148a8f8cfda78",
  "receipt": {
    "to": null,
    "from": "0xf5CA36c9873d61Bc28C117BD470981Ef6647A685",
    "contractAddress": "0x4058ED3951770436984723B0C2C9C1DfC37b9017",
    "transactionIndex": 4,
    "gasUsed": "4706565",
    "logsBloom": "0x
    "blockHash": "0xc50762e80f4c83ef379479b59ab168a0bd7bc7155d3729c24516f73eb7fa8742",
    "transactionHash": "0x42ecb639adb463b86aeebbf1427c53187365d5dd9c851efa033148a8f8cfda78",
    "logs": [],
    "blockNumber": 17664609,
    "cumulativeGasUsed": "5175705",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x67B200de87Dc9B67310417c8B23BeE034F69ba41",
    "0xACB2e1a98244eB6e7f0d083E966cF8B3Ec6481DE",
    "0xED35D34ffF1d4d442258c552d2e88300763e7521",
    "0x90D2753010931972e7cb30b2fBFD1194E015104e",
    30,
    "0xE597b33311C419726Ba78594d1B69De043FaEb81"
  ],
  "numDeployments": 1,
  "solcInputHash": "a5c1ec6ed734a994a4a7c4ed9bed389b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shortsTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_orderBook\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marginFeeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"referralCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"DecreasePositionReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marginFeeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"referralCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"IncreasePositionReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"}],\"name\":\"SetDepositFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"inLegacyMode\",\"type\":\"bool\"}],\"name\":\"SetInLegacyMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increasePositionBufferBps\",\"type\":\"uint256\"}],\"name\":\"SetIncreasePositionBufferBps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"SetLiquidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"longSizes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"shortSizes\",\"type\":\"uint256[]\"}],\"name\":\"SetMaxGlobalSizes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"SetOrderKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"SetPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referralStorage\",\"type\":\"address\"}],\"name\":\"SetReferralStorage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"shouldValidateIncreaseOrder\",\"type\":\"bool\"}],\"name\":\"SetShouldValidateIncreaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFees\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"decreasePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"}],\"name\":\"decreasePositionAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"}],\"name\":\"decreasePositionAndSwapETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"decreasePositionETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"executeDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"executeIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"executeSwapOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inLegacyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"increasePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increasePositionBufferBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"increasePositionETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOrderKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPartner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"liquidatePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxGlobalLongSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxGlobalShortSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"}],\"name\":\"setDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inLegacyMode\",\"type\":\"bool\"}],\"name\":\"setInLegacyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_increasePositionBufferBps\",\"type\":\"uint256\"}],\"name\":\"setIncreasePositionBufferBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_longSizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shortSizes\",\"type\":\"uint256[]\"}],\"name\":\"setMaxGlobalSizes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setOrderKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralStorage\",\"type\":\"address\"}],\"name\":\"setReferralStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldValidateIncreaseOrder\",\"type\":\"bool\"}],\"name\":\"setShouldValidateIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shortsTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldValidateIncreaseOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/PositionManager.sol\":\"PositionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract Governable {\\n    address public gov;\\n\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\",\"keccak256\":\"0xe719b0de64ee00468f6a985c8ef08ebdd271d99d6616308cbba458f78ed8c532\",\"license\":\"MIT\"},\"contracts/core/BasePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/Address.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IShortsTracker.sol\\\";\\nimport \\\"./interfaces/IOrderBook.sol\\\";\\nimport \\\"./interfaces/IBasePositionManager.sol\\\";\\n\\nimport \\\"../access/Governable.sol\\\";\\nimport \\\"../peripherals/interfaces/ITimelock.sol\\\";\\n\\nimport \\\"../referrals/interfaces/IReferralStorage.sol\\\";\\n\\ncontract BasePositionManager is IBasePositionManager, ReentrancyGuard, Governable {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n  using Address for address payable;\\n\\n  uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n\\n  address public admin;\\n\\n  address public vault;\\n  address public shortsTracker;\\n  address public router;\\n  address public weth;\\n\\n  // to prevent using the deposit and withdrawal of collateral as a zero fee swap,\\n  // there is a small depositFee charged if a collateral deposit results in the decrease\\n  // of leverage for an existing position\\n  // increasePositionBufferBps allows for a small amount of decrease of leverage\\n  uint256 public depositFee;\\n  uint256 public increasePositionBufferBps = 100;\\n\\n  address public referralStorage;\\n\\n  mapping(address => uint256) public feeReserves;\\n\\n  mapping(address => uint256) public override maxGlobalLongSizes;\\n  mapping(address => uint256) public override maxGlobalShortSizes;\\n\\n  event SetDepositFee(uint256 depositFee);\\n  event SetIncreasePositionBufferBps(uint256 increasePositionBufferBps);\\n  event SetReferralStorage(address referralStorage);\\n  event SetAdmin(address admin);\\n  event WithdrawFees(address token, address receiver, uint256 amount);\\n\\n  event SetMaxGlobalSizes(address[] tokens, uint256[] longSizes, uint256[] shortSizes);\\n\\n  event IncreasePositionReferral(\\n    address account,\\n    uint256 sizeDelta,\\n    uint256 marginFeeBasisPoints,\\n    bytes32 referralCode,\\n    address referrer\\n  );\\n\\n  event DecreasePositionReferral(\\n    address account,\\n    uint256 sizeDelta,\\n    uint256 marginFeeBasisPoints,\\n    bytes32 referralCode,\\n    address referrer\\n  );\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == admin, \\\"BasePositionManager: forbidden\\\");\\n    _;\\n  }\\n\\n  constructor(\\n    address _vault,\\n    address _router,\\n    address _shortsTracker,\\n    address _weth,\\n    uint256 _depositFee\\n  ) public {\\n    vault = _vault;\\n    router = _router;\\n    weth = _weth;\\n    depositFee = _depositFee;\\n    shortsTracker = _shortsTracker;\\n\\n    admin = msg.sender;\\n  }\\n\\n  receive() external payable {\\n    require(msg.sender == weth, \\\"BasePositionManager: invalid sender\\\");\\n  }\\n\\n  function setAdmin(address _admin) external onlyGov {\\n    admin = _admin;\\n    emit SetAdmin(_admin);\\n  }\\n\\n  function setDepositFee(uint256 _depositFee) external onlyAdmin {\\n    depositFee = _depositFee;\\n    emit SetDepositFee(_depositFee);\\n  }\\n\\n  function setIncreasePositionBufferBps(uint256 _increasePositionBufferBps) external onlyAdmin {\\n    increasePositionBufferBps = _increasePositionBufferBps;\\n    emit SetIncreasePositionBufferBps(_increasePositionBufferBps);\\n  }\\n\\n  function setReferralStorage(address _referralStorage) external onlyAdmin {\\n    referralStorage = _referralStorage;\\n    emit SetReferralStorage(_referralStorage);\\n  }\\n\\n  function setMaxGlobalSizes(\\n    address[] memory _tokens,\\n    uint256[] memory _longSizes,\\n    uint256[] memory _shortSizes\\n  ) external onlyAdmin {\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      address token = _tokens[i];\\n      maxGlobalLongSizes[token] = _longSizes[i];\\n      maxGlobalShortSizes[token] = _shortSizes[i];\\n    }\\n\\n    emit SetMaxGlobalSizes(_tokens, _longSizes, _shortSizes);\\n  }\\n\\n  function withdrawFees(address _token, address _receiver) external onlyAdmin {\\n    uint256 amount = feeReserves[_token];\\n    if (amount == 0) {\\n      return;\\n    }\\n\\n    feeReserves[_token] = 0;\\n    IERC20(_token).safeTransfer(_receiver, amount);\\n\\n    emit WithdrawFees(_token, _receiver, amount);\\n  }\\n\\n  function approve(\\n    address _token,\\n    address _spender,\\n    uint256 _amount\\n  ) external onlyGov {\\n    IERC20(_token).approve(_spender, _amount);\\n  }\\n\\n  function sendValue(address payable _receiver, uint256 _amount) external onlyGov {\\n    _receiver.sendValue(_amount);\\n  }\\n\\n  function _validateMaxGlobalSize(\\n    address _indexToken,\\n    bool _isLong,\\n    uint256 _sizeDelta\\n  ) internal view {\\n    if (_sizeDelta == 0) {\\n      return;\\n    }\\n\\n    if (_isLong) {\\n      uint256 maxGlobalLongSize = maxGlobalLongSizes[_indexToken];\\n      if (\\n        maxGlobalLongSize > 0 &&\\n        IVault(vault).guaranteedUsd(_indexToken).add(_sizeDelta) > maxGlobalLongSize\\n      ) {\\n        revert(\\\"BasePositionManager: max global longs exceeded\\\");\\n      }\\n    } else {\\n      uint256 maxGlobalShortSize = maxGlobalShortSizes[_indexToken];\\n      if (\\n        maxGlobalShortSize > 0 &&\\n        IVault(vault).globalShortSizes(_indexToken).add(_sizeDelta) > maxGlobalShortSize\\n      ) {\\n        revert(\\\"BasePositionManager: max global shorts exceeded\\\");\\n      }\\n    }\\n  }\\n\\n  function _increasePosition(\\n    address _account,\\n    address _collateralToken,\\n    address _indexToken,\\n    uint256 _sizeDelta,\\n    bool _isLong,\\n    uint256 _price\\n  ) internal {\\n    address _vault = vault;\\n\\n    uint256 markPrice = _isLong\\n      ? IVault(_vault).getMaxPrice(_indexToken)\\n      : IVault(_vault).getMinPrice(_indexToken);\\n\\n    if (_isLong) {\\n      require(markPrice <= _price, \\\"BasePositionManager: mark price higher than limit\\\");\\n    } else {\\n      require(markPrice >= _price, \\\"BasePositionManager: mark price lower than limit\\\");\\n    }\\n\\n    _validateMaxGlobalSize(_indexToken, _isLong, _sizeDelta);\\n\\n    address timelock = IVault(_vault).gov();\\n\\n    // should be called strictly before position is updated in Vault\\n    IShortsTracker(shortsTracker).updateGlobalShortData(\\n      _account,\\n      _collateralToken,\\n      _indexToken,\\n      _isLong,\\n      _sizeDelta,\\n      markPrice,\\n      true\\n    );\\n\\n    ITimelock(timelock).enableLeverage(_vault);\\n    IRouter(router).pluginIncreasePosition(\\n      _account,\\n      _collateralToken,\\n      _indexToken,\\n      _sizeDelta,\\n      _isLong\\n    );\\n    ITimelock(timelock).disableLeverage(_vault);\\n\\n    _emitIncreasePositionReferral(_account, _sizeDelta);\\n  }\\n\\n  function _decreasePosition(\\n    address _account,\\n    address _collateralToken,\\n    address _indexToken,\\n    uint256 _collateralDelta,\\n    uint256 _sizeDelta,\\n    bool _isLong,\\n    address _receiver,\\n    uint256 _price\\n  ) internal returns (uint256) {\\n    address _vault = vault;\\n\\n    uint256 markPrice = _isLong\\n      ? IVault(_vault).getMinPrice(_indexToken)\\n      : IVault(_vault).getMaxPrice(_indexToken);\\n    if (_isLong) {\\n      require(markPrice >= _price, \\\"BasePositionManager: mark price lower than limit\\\");\\n    } else {\\n      require(markPrice <= _price, \\\"BasePositionManager: mark price higher than limit\\\");\\n    }\\n\\n    address timelock = IVault(_vault).gov();\\n\\n    // should be called strictly before position is updated in Vault\\n    IShortsTracker(shortsTracker).updateGlobalShortData(\\n      _account,\\n      _collateralToken,\\n      _indexToken,\\n      _isLong,\\n      _sizeDelta,\\n      markPrice,\\n      false\\n    );\\n\\n    ITimelock(timelock).enableLeverage(_vault);\\n    uint256 amountOut = IRouter(router).pluginDecreasePosition(\\n      _account,\\n      _collateralToken,\\n      _indexToken,\\n      _collateralDelta,\\n      _sizeDelta,\\n      _isLong,\\n      _receiver\\n    );\\n    ITimelock(timelock).disableLeverage(_vault);\\n\\n    _emitDecreasePositionReferral(_account, _sizeDelta);\\n\\n    return amountOut;\\n  }\\n\\n  function _emitIncreasePositionReferral(address _account, uint256 _sizeDelta) internal {\\n    address _referralStorage = referralStorage;\\n    if (_referralStorage == address(0)) {\\n      return;\\n    }\\n\\n    (bytes32 referralCode, address referrer) = IReferralStorage(_referralStorage)\\n      .getTraderReferralInfo(_account);\\n    emit IncreasePositionReferral(\\n      _account,\\n      _sizeDelta,\\n      IVault(vault).marginFeeBasisPoints(),\\n      referralCode,\\n      referrer\\n    );\\n  }\\n\\n  function _emitDecreasePositionReferral(address _account, uint256 _sizeDelta) internal {\\n    address _referralStorage = referralStorage;\\n    if (_referralStorage == address(0)) {\\n      return;\\n    }\\n\\n    (bytes32 referralCode, address referrer) = IReferralStorage(_referralStorage)\\n      .getTraderReferralInfo(_account);\\n\\n    if (referralCode == bytes32(0)) {\\n      return;\\n    }\\n\\n    emit DecreasePositionReferral(\\n      _account,\\n      _sizeDelta,\\n      IVault(vault).marginFeeBasisPoints(),\\n      referralCode,\\n      referrer\\n    );\\n  }\\n\\n  function _swap(\\n    address[] memory _path,\\n    uint256 _minOut,\\n    address _receiver\\n  ) internal returns (uint256) {\\n    if (_path.length == 2) {\\n      return _vaultSwap(_path[0], _path[1], _minOut, _receiver);\\n    }\\n    revert(\\\"BasePositionManager: invalid _path.length\\\");\\n  }\\n\\n  function _vaultSwap(\\n    address _tokenIn,\\n    address _tokenOut,\\n    uint256 _minOut,\\n    address _receiver\\n  ) internal returns (uint256) {\\n    uint256 amountOut = IVault(vault).swap(_tokenIn, _tokenOut, _receiver);\\n    require(amountOut >= _minOut, \\\"BasePositionManager: insufficient amountOut\\\");\\n    return amountOut;\\n  }\\n\\n  function _transferInETH() internal {\\n    if (msg.value != 0) {\\n      IWETH(weth).deposit{value: msg.value}();\\n    }\\n  }\\n\\n  function _transferOutETHWithGasLimitIgnoreFail(uint256 _amountOut, address payable _receiver)\\n    internal\\n  {\\n    IWETH(weth).withdraw(_amountOut);\\n\\n    // use `send` instead of `transfer` to not revert whole transaction in case ETH transfer was failed\\n    // it has limit of 2300 gas\\n    // this is to avoid front-running\\n    _receiver.send(_amountOut);\\n  }\\n\\n  function _collectFees(\\n    address _account,\\n    address[] memory _path,\\n    uint256 _amountIn,\\n    address _indexToken,\\n    bool _isLong,\\n    uint256 _sizeDelta\\n  ) internal returns (uint256) {\\n    bool shouldDeductFee = _shouldDeductFee(\\n      _account,\\n      _path,\\n      _amountIn,\\n      _indexToken,\\n      _isLong,\\n      _sizeDelta\\n    );\\n\\n    if (shouldDeductFee) {\\n      uint256 afterFeeAmount = _amountIn.mul(BASIS_POINTS_DIVISOR.sub(depositFee)).div(\\n        BASIS_POINTS_DIVISOR\\n      );\\n      uint256 feeAmount = _amountIn.sub(afterFeeAmount);\\n      address feeToken = _path[_path.length - 1];\\n      feeReserves[feeToken] = feeReserves[feeToken].add(feeAmount);\\n      return afterFeeAmount;\\n    }\\n\\n    return _amountIn;\\n  }\\n\\n  function _shouldDeductFee(\\n    address _account,\\n    address[] memory _path,\\n    uint256 _amountIn,\\n    address _indexToken,\\n    bool _isLong,\\n    uint256 _sizeDelta\\n  ) internal view returns (bool) {\\n    // if the position is a short, do not charge a fee\\n    if (!_isLong) {\\n      return false;\\n    }\\n\\n    // if the position size is not increasing, this is a collateral deposit\\n    if (_sizeDelta == 0) {\\n      return true;\\n    }\\n\\n    address collateralToken = _path[_path.length - 1];\\n\\n    IVault _vault = IVault(vault);\\n    (uint256 size, uint256 collateral, , , , , , ) = _vault.getPosition(\\n      _account,\\n      collateralToken,\\n      _indexToken,\\n      _isLong\\n    );\\n\\n    // if there is no existing position, do not charge a fee\\n    if (size == 0) {\\n      return false;\\n    }\\n\\n    uint256 nextSize = size.add(_sizeDelta);\\n    uint256 collateralDelta = _vault.tokenToUsdMin(collateralToken, _amountIn);\\n    uint256 nextCollateral = collateral.add(collateralDelta);\\n\\n    uint256 prevLeverage = size.mul(BASIS_POINTS_DIVISOR).div(collateral);\\n    // allow for a maximum of a increasePositionBufferBps decrease since there might be some swap fees taken from the collateral\\n    uint256 nextLeverage = nextSize.mul(BASIS_POINTS_DIVISOR + increasePositionBufferBps).div(\\n      nextCollateral\\n    );\\n\\n    // deduct a fee if the leverage is decreased\\n    return nextLeverage < prevLeverage;\\n  }\\n}\\n\",\"keccak256\":\"0x0894cf99ad063396f5ca6604769f3758a45a7cc81e8379fb0d360d8800efc42e\",\"license\":\"MIT\"},\"contracts/core/PositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IOrderBook.sol\\\";\\n\\nimport \\\"../peripherals/interfaces/ITimelock.sol\\\";\\nimport \\\"./BasePositionManager.sol\\\";\\n\\ncontract PositionManager is BasePositionManager {\\n\\n    address public orderBook;\\n    bool public inLegacyMode;\\n\\n    bool public shouldValidateIncreaseOrder = true;\\n\\n    mapping (address => bool) public isOrderKeeper;\\n    mapping (address => bool) public isPartner;\\n    mapping (address => bool) public isLiquidator;\\n\\n    event SetOrderKeeper(address indexed account, bool isActive);\\n    event SetLiquidator(address indexed account, bool isActive);\\n    event SetPartner(address account, bool isActive);\\n    event SetInLegacyMode(bool inLegacyMode);\\n    event SetShouldValidateIncreaseOrder(bool shouldValidateIncreaseOrder);\\n\\n    modifier onlyOrderKeeper() {\\n        require(isOrderKeeper[msg.sender], \\\"PositionManager: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyLiquidator() {\\n        require(isLiquidator[msg.sender], \\\"PositionManager: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyPartnersOrLegacyMode() {\\n        require(isPartner[msg.sender] || inLegacyMode, \\\"PositionManager: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _vault,\\n        address _router,\\n        address _shortsTracker,\\n        address _weth,\\n        uint256 _depositFee,\\n        address _orderBook\\n    ) public BasePositionManager(_vault, _router, _shortsTracker, _weth, _depositFee) {\\n        orderBook = _orderBook;\\n    }\\n\\n    function setOrderKeeper(address _account, bool _isActive) external onlyAdmin {\\n        isOrderKeeper[_account] = _isActive;\\n        emit SetOrderKeeper(_account, _isActive);\\n    }\\n\\n    function setLiquidator(address _account, bool _isActive) external onlyAdmin {\\n        isLiquidator[_account] = _isActive;\\n        emit SetLiquidator(_account, _isActive);\\n    }\\n\\n    function setPartner(address _account, bool _isActive) external onlyAdmin {\\n        isPartner[_account] = _isActive;\\n        emit SetPartner(_account, _isActive);\\n    }\\n\\n    function setInLegacyMode(bool _inLegacyMode) external onlyAdmin {\\n        inLegacyMode = _inLegacyMode;\\n        emit SetInLegacyMode(_inLegacyMode);\\n    }\\n\\n    function setShouldValidateIncreaseOrder(bool _shouldValidateIncreaseOrder) external onlyAdmin {\\n        shouldValidateIncreaseOrder = _shouldValidateIncreaseOrder;\\n        emit SetShouldValidateIncreaseOrder(_shouldValidateIncreaseOrder);\\n    }\\n\\n    function increasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _price\\n    ) external nonReentrant onlyPartnersOrLegacyMode {\\n        require(_path.length == 1 || _path.length == 2, \\\"PositionManager: invalid _path.length\\\");\\n\\n        if (_amountIn > 0) {\\n            if (_path.length == 1) {\\n                IRouter(router).pluginTransfer(_path[0], msg.sender, address(this), _amountIn);\\n            } else {\\n                IRouter(router).pluginTransfer(_path[0], msg.sender, vault, _amountIn);\\n                _amountIn = _swap(_path, _minOut, address(this));\\n            }\\n\\n            uint256 afterFeeAmount = _collectFees(msg.sender, _path, _amountIn, _indexToken, _isLong, _sizeDelta);\\n            IERC20(_path[_path.length - 1]).safeTransfer(vault, afterFeeAmount);\\n        }\\n\\n        _increasePosition(msg.sender, _path[_path.length - 1], _indexToken, _sizeDelta, _isLong, _price);\\n    }\\n\\n    function increasePositionETH(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _price\\n    ) external payable nonReentrant onlyPartnersOrLegacyMode {\\n        require(_path.length == 1 || _path.length == 2, \\\"PositionManager: invalid _path.length\\\");\\n        require(_path[0] == weth, \\\"PositionManager: invalid _path\\\");\\n\\n        if (msg.value > 0) {\\n            _transferInETH();\\n            uint256 _amountIn = msg.value;\\n\\n            if (_path.length > 1) {\\n                IERC20(weth).safeTransfer(vault, msg.value);\\n                _amountIn = _swap(_path, _minOut, address(this));\\n            }\\n\\n            uint256 afterFeeAmount = _collectFees(msg.sender, _path, _amountIn, _indexToken, _isLong, _sizeDelta);\\n            IERC20(_path[_path.length - 1]).safeTransfer(vault, afterFeeAmount);\\n        }\\n\\n        _increasePosition(msg.sender, _path[_path.length - 1], _indexToken, _sizeDelta, _isLong, _price);\\n    }\\n\\n    function decreasePosition(\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver,\\n        uint256 _price\\n    ) external nonReentrant onlyPartnersOrLegacyMode {\\n        _decreasePosition(msg.sender, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, _receiver, _price);\\n    }\\n\\n    function decreasePositionETH(\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address payable _receiver,\\n        uint256 _price\\n    ) external nonReentrant onlyPartnersOrLegacyMode {\\n        require(_collateralToken == weth, \\\"PositionManager: invalid _collateralToken\\\");\\n\\n        uint256 amountOut = _decreasePosition(msg.sender, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, address(this), _price);\\n        _transferOutETHWithGasLimitIgnoreFail(amountOut, _receiver);\\n    }\\n\\n    function decreasePositionAndSwap(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver,\\n        uint256 _price,\\n        uint256 _minOut\\n    ) external nonReentrant onlyPartnersOrLegacyMode {\\n        require(_path.length == 2, \\\"PositionManager: invalid _path.length\\\");\\n\\n        uint256 amount = _decreasePosition(msg.sender, _path[0], _indexToken, _collateralDelta, _sizeDelta, _isLong, address(this), _price);\\n        IERC20(_path[0]).safeTransfer(vault, amount);\\n        _swap(_path, _minOut, _receiver);\\n    }\\n\\n    function decreasePositionAndSwapETH(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address payable _receiver,\\n        uint256 _price,\\n        uint256 _minOut\\n    ) external nonReentrant onlyPartnersOrLegacyMode {\\n        require(_path.length == 2, \\\"PositionManager: invalid _path.length\\\");\\n        require(_path[_path.length - 1] == weth, \\\"PositionManager: invalid _path\\\");\\n\\n        uint256 amount = _decreasePosition(msg.sender, _path[0], _indexToken, _collateralDelta, _sizeDelta, _isLong, address(this), _price);\\n        IERC20(_path[0]).safeTransfer(vault, amount);\\n        uint256 amountOut = _swap(_path, _minOut, address(this));\\n        _transferOutETHWithGasLimitIgnoreFail(amountOut, _receiver);\\n    }\\n\\n    function liquidatePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        address _feeReceiver\\n    ) external nonReentrant onlyLiquidator {\\n        address _vault = vault;\\n        address timelock = IVault(_vault).gov();\\n        (uint256 size, , , , , , , ) = IVault(vault).getPosition(_account, _collateralToken, _indexToken, _isLong);\\n\\n        uint256 markPrice = _isLong ? IVault(_vault).getMinPrice(_indexToken) : IVault(_vault).getMaxPrice(_indexToken);\\n        // should be called strictly before position is updated in Vault\\n        IShortsTracker(shortsTracker).updateGlobalShortData(_account, _collateralToken, _indexToken, _isLong, size, markPrice, false);\\n\\n        ITimelock(timelock).enableLeverage(_vault);\\n        IVault(_vault).liquidatePosition(_account, _collateralToken, _indexToken, _isLong, _feeReceiver);\\n        ITimelock(timelock).disableLeverage(_vault);\\n    }\\n\\n    function executeSwapOrder(address _account, uint256 _orderIndex, address payable _feeReceiver) external onlyOrderKeeper {\\n        IOrderBook(orderBook).executeSwapOrder(_account, _orderIndex, _feeReceiver);\\n    }\\n\\n    function executeIncreaseOrder(address _account, uint256 _orderIndex, address payable _feeReceiver) external onlyOrderKeeper {\\n        _validateIncreaseOrder(_account, _orderIndex);\\n\\n        address _vault = vault;\\n        address timelock = IVault(_vault).gov();\\n\\n        (\\n            /*address purchaseToken*/,\\n            /*uint256 purchaseTokenAmount*/,\\n            address collateralToken,\\n            address indexToken,\\n            uint256 sizeDelta,\\n            bool isLong,\\n            /*uint256 triggerPrice*/,\\n            /*bool triggerAboveThreshold*/,\\n            /*uint256 executionFee*/\\n        ) = IOrderBook(orderBook).getIncreaseOrder(_account, _orderIndex);\\n\\n        uint256 markPrice = isLong ? IVault(_vault).getMaxPrice(indexToken) : IVault(_vault).getMinPrice(indexToken);\\n        // should be called strictly before position is updated in Vault\\n        IShortsTracker(shortsTracker).updateGlobalShortData(_account, collateralToken, indexToken, isLong, sizeDelta, markPrice, true);\\n\\n        ITimelock(timelock).enableLeverage(_vault);\\n        IOrderBook(orderBook).executeIncreaseOrder(_account, _orderIndex, _feeReceiver);\\n        ITimelock(timelock).disableLeverage(_vault);\\n\\n        _emitIncreasePositionReferral(_account, sizeDelta);\\n    }\\n\\n    function executeDecreaseOrder(address _account, uint256 _orderIndex, address payable _feeReceiver) external onlyOrderKeeper {\\n        address _vault = vault;\\n        address timelock = IVault(_vault).gov();\\n\\n        (\\n            address collateralToken,\\n            /*uint256 collateralDelta*/,\\n            address indexToken,\\n            uint256 sizeDelta,\\n            bool isLong,\\n            /*uint256 triggerPrice*/,\\n            /*bool triggerAboveThreshold*/,\\n            /*uint256 executionFee*/\\n        ) = IOrderBook(orderBook).getDecreaseOrder(_account, _orderIndex);\\n\\n        uint256 markPrice = isLong ? IVault(_vault).getMinPrice(indexToken) : IVault(_vault).getMaxPrice(indexToken);\\n        // should be called strictly before position is updated in Vault\\n        IShortsTracker(shortsTracker).updateGlobalShortData(_account, collateralToken, indexToken, isLong, sizeDelta, markPrice, false);\\n\\n        ITimelock(timelock).enableLeverage(_vault);\\n        IOrderBook(orderBook).executeDecreaseOrder(_account, _orderIndex, _feeReceiver);\\n        ITimelock(timelock).disableLeverage(_vault);\\n\\n        _emitDecreasePositionReferral(_account, sizeDelta);\\n    }\\n\\n    function _validateIncreaseOrder(address _account, uint256 _orderIndex) internal view {\\n        (\\n            address _purchaseToken,\\n            uint256 _purchaseTokenAmount,\\n            address _collateralToken,\\n            address _indexToken,\\n            uint256 _sizeDelta,\\n            bool _isLong,\\n            , // triggerPrice\\n            , // triggerAboveThreshold\\n            // executionFee\\n        ) = IOrderBook(orderBook).getIncreaseOrder(_account, _orderIndex);\\n\\n        _validateMaxGlobalSize(_indexToken, _isLong, _sizeDelta);\\n\\n        if (!shouldValidateIncreaseOrder) { return; }\\n\\n        // shorts are okay\\n        if (!_isLong) { return; }\\n\\n        // if the position size is not increasing, this is a collateral deposit\\n        require(_sizeDelta > 0, \\\"PositionManager: long deposit\\\");\\n\\n        IVault _vault = IVault(vault);\\n        (uint256 size, uint256 collateral, , , , , , ) = _vault.getPosition(_account, _collateralToken, _indexToken, _isLong);\\n\\n        // if there is no existing position, do not charge a fee\\n        if (size == 0) { return; }\\n\\n        uint256 nextSize = size.add(_sizeDelta);\\n        uint256 collateralDelta = _vault.tokenToUsdMin(_purchaseToken, _purchaseTokenAmount);\\n        uint256 nextCollateral = collateral.add(collateralDelta);\\n\\n        uint256 prevLeverage = size.mul(BASIS_POINTS_DIVISOR).div(collateral);\\n        // allow for a maximum of a increasePositionBufferBps decrease since there might be some swap fees taken from the collateral\\n        uint256 nextLeverageWithBuffer = nextSize.mul(BASIS_POINTS_DIVISOR + increasePositionBufferBps).div(nextCollateral);\\n\\n        require(nextLeverageWithBuffer >= prevLeverage, \\\"PositionManager: long leverage decrease\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1d81463b1aed30ff44ace43291280cf315bd4cb33648d2c39c57bc910af14e0e\",\"license\":\"MIT\"},\"contracts/core/interfaces/IBasePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IBasePositionManager {\\n    function maxGlobalLongSizes(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd3ec7cb225a19de7945d66c697546c875fc496395716cd394f91cdc61b1c54f7\",\"license\":\"MIT\"},\"contracts/core/interfaces/IOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IOrderBook {\\n\\tfunction getSwapOrder(address _account, uint256 _orderIndex) external view returns (\\n        address path0, \\n        address path1,\\n        address path2,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    );\\n\\n    function getIncreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address purchaseToken, \\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function getDecreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function executeSwapOrder(address, uint256, address payable) external;\\n    function executeDecreaseOrder(address, uint256, address payable) external;\\n    function executeIncreaseOrder(address, uint256, address payable) external;\\n}\\n\",\"keccak256\":\"0xbb5aed341b0274d09569bc4ede3b5e868cc68d93ea667a2b11d53afd677a7c5d\",\"license\":\"MIT\"},\"contracts/core/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRouter {\\n    function addPlugin(address _plugin) external;\\n    function pluginTransfer(address _token, address _account, address _receiver, uint256 _amount) external;\\n    function pluginIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function pluginDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function swap(address[] memory _path, uint256 _amountIn, uint256 _minOut, address _receiver) external;\\n}\\n\",\"keccak256\":\"0x944216f79857ed00b57025d6343648c5b75c2f60de431961f8801cf05319cad9\",\"license\":\"MIT\"},\"contracts/core/interfaces/IShortsTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IShortsTracker {\\n    function isGlobalShortDataReady() external view returns (bool);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function getNextGlobalShortData(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _nextPrice,\\n        uint256 _sizeDelta,\\n        bool _isIncrease\\n    ) external view returns (uint256, uint256);\\n    function updateGlobalShortData(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        uint256 _sizeDelta,\\n        uint256 _markPrice,\\n        bool _isIncrease\\n    ) external;\\n    function setIsGlobalShortDataReady(bool value) external;\\n    function setInitData(address[] calldata _tokens, uint256[] calldata _averagePrices) external;\\n}\\n\",\"keccak256\":\"0x7b3f7791cba4f3ccfa308a9bf176663e9cead74bf78ac1c7ae9f2a041a26075d\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IVaultUtils.sol\\\";\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n    function usdg() external view returns (address);\\n    function gov() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetUsdgAmount(address _token) external view returns (uint256);\\n\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setUsdgAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _redemptionBps,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit(address _token) external;\\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function usdgAmounts(address _token) external view returns (uint256);\\n    function maxUsdgAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n}\\n\",\"keccak256\":\"0x247067b8f88636424e799a2b72b81884273813e62ad3bfedf428e0fb97714637\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdgAmount) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc8cad694c33f968559eb3feac2226fe26d81d457529b87ae8852390e1474d7be\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa3ce253082421a9e79d2b884ae6f60507b0cc73ea356674072091454c44cc556\",\"license\":\"MIT\"},\"contracts/libraries/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf80766b21ea67a73c81e0dea4543375243938c8b223e29c5d783be61ab3f424c\",\"license\":\"MIT\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1845481964ebacf35afe1a006fa574793b52e698eba0a8db6e3d30202bc45429\",\"license\":\"MIT\"},\"contracts/libraries/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xae7a1e407ed171ecd3a0d3976875d6c58eefdccf831ebce6314ec94892dffc03\",\"license\":\"MIT\"},\"contracts/peripherals/interfaces/ITimelock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ITimelock {\\n    function setAdmin(address _admin) external;\\n    function enableLeverage(address _vault) external;\\n    function disableLeverage(address _vault) external;\\n    function setIsLeverageEnabled(address _vault, bool _isLeverageEnabled) external;\\n    function signalSetGov(address _target, address _gov) external;\\n}\\n\",\"keccak256\":\"0x5a7543c7b61c11b94a4d04137839a8ab392e2d1dd1ab717755a349366c2eaddd\",\"license\":\"MIT\"},\"contracts/referrals/interfaces/IReferralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IReferralStorage {\\n    function codeOwners(bytes32 _code) external view returns (address);\\n    function traderReferralCodes(address _account) external view returns (bytes32);\\n    function referrerDiscountShares(address _account) external view returns (uint256);\\n    function referrerTiers(address _account) external view returns (uint256);\\n    function getTraderReferralInfo(address _account) external view returns (bytes32, address);\\n    function setTraderReferralCode(address _account, bytes32 _code) external;\\n    function setTier(uint256 _tierId, uint256 _totalRebate, uint256 _discountShare) external;\\n    function setReferrerTier(address _referrer, uint256 _tierId) external;\\n    function govSetCodeOwner(bytes32 _code, address _newAccount) external;\\n}\\n\",\"keccak256\":\"0x35ca971b2ff701721ae7a6ae1d92353bc49a206ed09bc6843324a9b0cb7fbf86\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IWETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0x29613132c0162f9cdc8336e895d1da9aaf3660909adcf1a0134d714e53524ca4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526064600855600d805460ff60a81b1916600160a81b17905534801561002857600080fd5b506040516200511038038062005110833981810160405260c081101561004d57600080fd5b508051602082015160408301516060840151608085015160a0909501516001600081905580546001600160a01b031990811633908117909255600380546001600160a01b039889169083161790556005805496881696821696909617909555600680549387169386169390931790925560079590955560048054928516928416929092179091556002805483169091179055600d805492909316911617905561501480620000fc6000396000f3fe6080604052600436106101ff5760003560e01c8063657bc5d011610114578063657bc5d0146107da57806367a52793146107ef578063704b6c0214610804578063776af5ba146108375780638c0f9aac1461084c57806390205d8c1461087f5780639698d25a146108de57806398d1e03a146109115780639c95332f14610926578063ae4d7f9a14610952578063b32755de14610985578063b7ddc99214610a48578063cfad57a214610b1e578063d38ab51914610b51578063d4ca83f914610b94578063de2ea94814610ba9578063e1f21c6714610bfe578063ef12c67e14610c41578063f255527814610df3578063f851a44014610e2e578063f887ea4014610e43578063fbfa77cf14610e585761024f565b80626cc35e1461025457806307c7edc3146102855780631045c74e146102c857806311d9444a1461030d578063126082cf1461035057806312d43a51146103655780631b9043591461037a5780631ce9cb8f146103a65780631e261538146103d957806321acf65914610414578063233bfe3b1461044f57806324a084df146104795780633039e37f146104b25780633833f5f5146105925780633fc8cef3146105d9578063430ed37c146105ee5780634453a3741461064d5780634584bd4b14610688578063490ae2101461069d578063529a356f146106c75780635fc8500e146106fa5761024f565b3661024f576006546001600160a01b0316331461024d5760405162461bcd60e51b8152600401808060200182810382526023815260200180614f966023913960400191505060405180910390fd5b005b600080fd5b34801561026057600080fd5b50610269610e6d565b604080516001600160a01b039092168252519081900360200190f35b34801561029157600080fd5b5061024d600480360360608110156102a857600080fd5b506001600160a01b03813581169160208101359160409091013516610e7c565b3480156102d457600080fd5b506102fb600480360360208110156102eb57600080fd5b50356001600160a01b0316610f48565b60408051918252519081900360200190f35b34801561031957600080fd5b5061024d6004803603606081101561033057600080fd5b506001600160a01b03813581169160208101359160409091013516610f5a565b34801561035c57600080fd5b506102fb6113ba565b34801561037157600080fd5b506102696113c0565b34801561038657600080fd5b5061024d6004803603602081101561039d57600080fd5b503515156113cf565b3480156103b257600080fd5b506102fb600480360360208110156103c957600080fd5b50356001600160a01b031661146f565b3480156103e557600080fd5b5061024d600480360360408110156103fc57600080fd5b506001600160a01b0381351690602001351515611481565b34801561042057600080fd5b5061024d6004803603604081101561043757600080fd5b506001600160a01b038135169060200135151561152e565b34801561045b57600080fd5b5061024d6004803603602081101561047257600080fd5b50356115df565b34801561048557600080fd5b5061024d6004803603604081101561049c57600080fd5b506001600160a01b038135169060200135611667565b3480156104be57600080fd5b5061024d60048036036101008110156104d657600080fd5b810190602081018135600160201b8111156104f057600080fd5b82018360208201111561050257600080fd5b803590602001918460208302840111600160201b8311171561052357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505081356001600160a01b0390811693506020830135926040810135925060608101351515916080820135169060a08101359060c001356116cb565b34801561059e57600080fd5b506105c5600480360360208110156105b557600080fd5b50356001600160a01b03166118d8565b604080519115158252519081900360200190f35b3480156105e557600080fd5b506102696118ed565b3480156105fa57600080fd5b5061024d600480360360e081101561061157600080fd5b506001600160a01b0381358116916020810135821691604082013591606081013591608082013515159160a08101359091169060c001356118fc565b34801561065957600080fd5b5061024d6004803603604081101561067057600080fd5b506001600160a01b0381351690602001351515611a25565b34801561069457600080fd5b506105c5611ad2565b3480156106a957600080fd5b5061024d600480360360208110156106c057600080fd5b5035611ae2565b3480156106d357600080fd5b506105c5600480360360208110156106ea57600080fd5b50356001600160a01b0316611b6a565b34801561070657600080fd5b5061024d600480360361010081101561071e57600080fd5b810190602081018135600160201b81111561073857600080fd5b82018360208201111561074a57600080fd5b803590602001918460208302840111600160201b8311171561076b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505081356001600160a01b0390811693506020830135926040810135925060608101351515916080820135169060a08101359060c00135611b7f565b3480156107e657600080fd5b50610269611cb6565b3480156107fb57600080fd5b506102fb611cc5565b34801561081057600080fd5b5061024d6004803603602081101561082757600080fd5b50356001600160a01b0316611ccb565b34801561084357600080fd5b50610269611d6c565b34801561085857600080fd5b506105c56004803603602081101561086f57600080fd5b50356001600160a01b0316611d7b565b34801561088b57600080fd5b5061024d600480360360e08110156108a257600080fd5b506001600160a01b0381358116916020810135821691604082013591606081013591608082013515159160a08101359091169060c00135611d90565b3480156108ea57600080fd5b506102fb6004803603602081101561090157600080fd5b50356001600160a01b0316611e50565b34801561091d57600080fd5b506102fb611e62565b34801561093257600080fd5b5061024d6004803603602081101561094957600080fd5b50351515611e68565b34801561095e57600080fd5b5061024d6004803603602081101561097557600080fd5b50356001600160a01b0316611f08565b61024d600480360360c081101561099b57600080fd5b810190602081018135600160201b8111156109b557600080fd5b8201836020820111156109c757600080fd5b803590602001918460208302840111600160201b831117156109e857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550506001600160a01b0383351693505050602081013590604081013590606081013515159060800135611fa9565b348015610a5457600080fd5b5061024d600480360360e0811015610a6b57600080fd5b810190602081018135600160201b811115610a8557600080fd5b820183602082011115610a9757600080fd5b803590602001918460208302840111600160201b83111715610ab857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550506001600160a01b0383351693505050602081013590604081013590606081013590608081013515159060a001356121da565b348015610b2a57600080fd5b5061024d60048036036020811015610b4157600080fd5b50356001600160a01b03166124b9565b348015610b5d57600080fd5b5061024d60048036036060811015610b7457600080fd5b506001600160a01b03813581169160208101359160409091013516612528565b348015610ba057600080fd5b506105c5612989565b348015610bb557600080fd5b5061024d600480360360a0811015610bcc57600080fd5b506001600160a01b03813581169160208101358216916040820135811691606081013515159160809091013516612999565b348015610c0a57600080fd5b5061024d60048036036060811015610c2157600080fd5b506001600160a01b03813581169160208101359091169060400135612e3e565b348015610c4d57600080fd5b5061024d60048036036060811015610c6457600080fd5b810190602081018135600160201b811115610c7e57600080fd5b820183602082011115610c9057600080fd5b803590602001918460208302840111600160201b83111715610cb157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610d0057600080fd5b820183602082011115610d1257600080fd5b803590602001918460208302840111600160201b83111715610d3357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610d8257600080fd5b820183602082011115610d9457600080fd5b803590602001918460208302840111600160201b83111715610db557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612f13945050505050565b348015610dff57600080fd5b5061024d60048036036040811015610e1657600080fd5b506001600160a01b0381358116916020013516613102565b348015610e3a57600080fd5b506102696131e6565b348015610e4f57600080fd5b506102696131f5565b348015610e6457600080fd5b50610269613204565b6009546001600160a01b031681565b336000908152600e602052604090205460ff16610ece576040805162461bcd60e51b815260206004820152601a6024820152600080516020614efd833981519152604482015290519081900360640190fd5b600d54604080516307c7edc360e01b81526001600160a01b038681166004830152602482018690528481166044830152915191909216916307c7edc391606480830192600092919082900301818387803b158015610f2b57600080fd5b505af1158015610f3f573d6000803e3d6000fd5b50505050505050565b600b6020526000908152604090205481565b336000908152600e602052604090205460ff16610fac576040805162461bcd60e51b815260206004820152601a6024820152600080516020614efd833981519152604482015290519081900360640190fd5b600354604080516312d43a5160e01b815290516001600160a01b039092169160009183916312d43a5191600480820192602092909190829003018186803b158015610ff657600080fd5b505afa15801561100a573d6000803e3d6000fd5b505050506040513d602081101561102057600080fd5b5051600d5460408051630130197760e11b81526001600160a01b03898116600483015260248201899052915193945060009384938493849391169163026032ee9160448082019261010092909190829003018186803b15801561108257600080fd5b505afa158015611096573d6000803e3d6000fd5b505050506040513d6101008110156110ad57600080fd5b508051604082015160608301516080909301519196509450909250905060008161114f57866001600160a01b031663e124e6d2856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561111e57600080fd5b505afa158015611132573d6000803e3d6000fd5b505050506040513d602081101561114857600080fd5b50516111c9565b866001600160a01b03166381a612d6856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561119c57600080fd5b505afa1580156111b0573d6000803e3d6000fd5b505050506040513d60208110156111c657600080fd5b50515b6004805460408051633cc8e33b60e21b81526001600160a01b038f8116948201949094528984166024820152888416604482015286151560648201526084810188905260a48101859052600060c482018190529151949550929091169263f3238cec9260e480820193929182900301818387803b15801561124957600080fd5b505af115801561125d573d6000803e3d6000fd5b50505050856001600160a01b0316636d63c1d0886040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156112b057600080fd5b505af11580156112c4573d6000803e3d6000fd5b5050600d54604080516308eca22560e11b81526001600160a01b038f81166004830152602482018f90528d8116604483015291519190921693506311d9444a9250606480830192600092919082900301818387803b15801561132557600080fd5b505af1158015611339573d6000803e3d6000fd5b50505050856001600160a01b031663d3c87bbb886040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561138c57600080fd5b505af11580156113a0573d6000803e3d6000fd5b505050506113ae8a84613213565b50505050505050505050565b61271081565b6001546001600160a01b031681565b6002546001600160a01b0316331461141c576040805162461bcd60e51b815260206004820152601e6024820152600080516020614e5c833981519152604482015290519081900360640190fd5b600d8054821515600160a81b810260ff60a81b199092169190911790915560408051918252517fa956222e37fe025ff51e5440ac729a9bd417ff91e485e14dcffa2c0ba8894f409181900360200190a150565b600a6020526000908152604090205481565b6002546001600160a01b031633146114ce576040805162461bcd60e51b815260206004820152601e6024820152600080516020614e5c833981519152604482015290519081900360640190fd5b6001600160a01b0382166000818152600e6020908152604091829020805460ff1916851515908117909155825190815291517f1d5bc0255b943d6a5b5279e8a55d74d620baccbceecb25e87a3558f14c4c118e9281900390910190a25050565b6002546001600160a01b0316331461157b576040805162461bcd60e51b815260206004820152601e6024820152600080516020614e5c833981519152604482015290519081900360640190fd5b6001600160a01b0382166000818152600f6020908152604091829020805460ff191685151590811790915582519384529083015280517fa4e46c70ff429a91de7d1716d736e877c7cca1c22ac850b23d242530dd95e4749281900390910190a15050565b6002546001600160a01b0316331461162c576040805162461bcd60e51b815260206004820152601e6024820152600080516020614e5c833981519152604482015290519081900360640190fd5b60088190556040805182815290517f21167d0d4661af93817ebce920f18986eed3d75d5e1c03f2aed05efcbafbc4529181900360200190a150565b6001546001600160a01b031633146116b4576040805162461bcd60e51b81526020600482015260156024820152600080516020614d81833981519152604482015290519081900360640190fd5b6116c76001600160a01b0383168261339c565b5050565b60026000541415611711576040805162461bcd60e51b815260206004820152601f6024820152600080516020614d61833981519152604482015290519081900360640190fd5b60026000908155338152600f602052604090205460ff168061173c5750600d54600160a01b900460ff165b61177b576040805162461bcd60e51b815260206004820152601a6024820152600080516020614efd833981519152604482015290519081900360640190fd5b87516002146117bb5760405162461bcd60e51b8152600401808060200182810382526025815260200180614fe36025913960400191505060405180910390fd5b60065488516001600160a01b0390911690899060001981019081106117dc57fe5b60200260200101516001600160a01b03161461183f576040805162461bcd60e51b815260206004820152601e60248201527f506f736974696f6e4d616e616765723a20696e76616c6964205f706174680000604482015290519081900360640190fd5b6000611865338a60008151811061185257fe5b60200260200101518a8a8a8a308a613486565b90506118ae600360009054906101000a90046001600160a01b0316828b60008151811061188e57fe5b60200260200101516001600160a01b031661391f9092919063ffffffff16565b60006118bb8a8430613971565b90506118c781866139f6565b505060016000555050505050505050565b600e6020526000908152604090205460ff1681565b6006546001600160a01b031681565b60026000541415611942576040805162461bcd60e51b815260206004820152601f6024820152600080516020614d61833981519152604482015290519081900360640190fd5b60026000908155338152600f602052604090205460ff168061196d5750600d54600160a01b900460ff165b6119ac576040805162461bcd60e51b815260206004820152601a6024820152600080516020614efd833981519152604482015290519081900360640190fd5b6006546001600160a01b038881169116146119f85760405162461bcd60e51b8152600401808060200182810382526029815260200180614f6d6029913960400191505060405180910390fd5b6000611a0a3389898989893089613486565b9050611a1681846139f6565b50506001600055505050505050565b6002546001600160a01b03163314611a72576040805162461bcd60e51b815260206004820152601e6024820152600080516020614e5c833981519152604482015290519081900360640190fd5b6001600160a01b038216600081815260106020908152604091829020805460ff1916851515908117909155825190815291517f8c0d56805c3b43d441481229dc64bee168253ffe4305f37ab7cfe63b1c4268c69281900390910190a25050565b600d54600160a81b900460ff1681565b6002546001600160a01b03163314611b2f576040805162461bcd60e51b815260206004820152601e6024820152600080516020614e5c833981519152604482015290519081900360640190fd5b60078190556040805182815290517f974fd3c1fcb4653dfc4fb740c4c692cd212d55c28f163f310128cb64d83006759181900360200190a150565b60106020526000908152604090205460ff1681565b60026000541415611bc5576040805162461bcd60e51b815260206004820152601f6024820152600080516020614d61833981519152604482015290519081900360640190fd5b60026000908155338152600f602052604090205460ff1680611bf05750600d54600160a01b900460ff165b611c2f576040805162461bcd60e51b815260206004820152601a6024820152600080516020614efd833981519152604482015290519081900360640190fd5b8751600214611c6f5760405162461bcd60e51b8152600401808060200182810382526025815260200180614fe36025913960400191505060405180910390fd5b6000611c82338a60008151811061185257fe5b9050611cab600360009054906101000a90046001600160a01b0316828b60008151811061188e57fe5b6118c7898386613971565b6004546001600160a01b031681565b60075481565b6001546001600160a01b03163314611d18576040805162461bcd60e51b81526020600482015260156024820152600080516020614d81833981519152604482015290519081900360640190fd5b600280546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a19181900360200190a150565b600d546001600160a01b031681565b600f6020526000908152604090205460ff1681565b60026000541415611dd6576040805162461bcd60e51b815260206004820152601f6024820152600080516020614d61833981519152604482015290519081900360640190fd5b60026000908155338152600f602052604090205460ff1680611e015750600d54600160a01b900460ff165b611e40576040805162461bcd60e51b815260206004820152601a6024820152600080516020614efd833981519152604482015290519081900360640190fd5b611a163388888888888888613486565b600c6020526000908152604090205481565b60085481565b6002546001600160a01b03163314611eb5576040805162461bcd60e51b815260206004820152601e6024820152600080516020614e5c833981519152604482015290519081900360640190fd5b600d8054821515600160a01b810260ff60a01b199092169190911790915560408051918252517feac6b3611e79ff0d8ea5daa8439f6b1ab7eea4ebf95f1dd360417f712c3fc3049181900360200190a150565b6002546001600160a01b03163314611f55576040805162461bcd60e51b815260206004820152601e6024820152600080516020614e5c833981519152604482015290519081900360640190fd5b600980546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f828abcccea18192c21d645e575652c49e20b986dab777906fc473d056b01b6a89181900360200190a150565b60026000541415611fef576040805162461bcd60e51b815260206004820152601f6024820152600080516020614d61833981519152604482015290519081900360640190fd5b60026000908155338152600f602052604090205460ff168061201a5750600d54600160a01b900460ff165b612059576040805162461bcd60e51b815260206004820152601a6024820152600080516020614efd833981519152604482015290519081900360640190fd5b85516001148061206a575085516002145b6120a55760405162461bcd60e51b8152600401808060200182810382526025815260200180614fe36025913960400191505060405180910390fd5b60065486516001600160a01b039091169087906000906120c157fe5b60200260200101516001600160a01b031614612124576040805162461bcd60e51b815260206004820152601e60248201527f506f736974696f6e4d616e616765723a20696e76616c6964205f706174680000604482015290519081900360640190fd5b34156121a857612132613a84565b85513490600110156121695760035460065461215b916001600160a01b0391821691163461391f565b612166878630613971565b90505b60006121793389848a888a613af0565b90506121a5600360009054906101000a90046001600160a01b0316828a60018c51038151811061188e57fe5b50505b6121cd33876001895103815181106121bc57fe5b602002602001015187868686613bcf565b5050600160005550505050565b60026000541415612220576040805162461bcd60e51b815260206004820152601f6024820152600080516020614d61833981519152604482015290519081900360640190fd5b60026000908155338152600f602052604090205460ff168061224b5750600d54600160a01b900460ff165b61228a576040805162461bcd60e51b815260206004820152601a6024820152600080516020614efd833981519152604482015290519081900360640190fd5b86516001148061229b575086516002145b6122d65760405162461bcd60e51b8152600401808060200182810382526025815260200180614fe36025913960400191505060405180910390fd5b8415612486578651600114156123965760055487516001600160a01b0390911690631b82787890899060009061230857fe5b60200260200101513330896040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b03168152602001828152602001945050505050600060405180830381600087803b15801561237957600080fd5b505af115801561238d573d6000803e3d6000fd5b50505050612448565b60055487516001600160a01b0390911690631b8278789089906000906123b857fe5b6020908102919091010151600354604080516001600160e01b031960e086901b1681526001600160a01b0393841660048201523360248201529290911660448301526064820189905251608480830192600092919082900301818387803b15801561242257600080fd5b505af1158015612436573d6000803e3d6000fd5b50505050612445878530613971565b94505b60006124583389888a8789613af0565b9050612484600360009054906101000a90046001600160a01b0316828a60018c51038151811061188e57fe5b505b6124ab338860018a51038151811061249a57fe5b602002602001015188868686613bcf565b505060016000555050505050565b6001546001600160a01b03163314612506576040805162461bcd60e51b81526020600482015260156024820152600080516020614d81833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152600e602052604090205460ff1661257a576040805162461bcd60e51b815260206004820152601a6024820152600080516020614efd833981519152604482015290519081900360640190fd5b6125848383613fd7565b600354604080516312d43a5160e01b815290516001600160a01b039092169160009183916312d43a5191600480820192602092909190829003018186803b1580156125ce57600080fd5b505afa1580156125e2573d6000803e3d6000fd5b505050506040513d60208110156125f857600080fd5b5051600d546040805163d3bab1d160e01b81526001600160a01b03898116600483015260248201899052915193945060009384938493849391169163d3bab1d19160448082019261012092909190829003018186803b15801561265a57600080fd5b505afa15801561266e573d6000803e3d6000fd5b505050506040513d61012081101561268557600080fd5b5060408101516060820151608083015160a0909301519196509450909250905060008161272a57866001600160a01b03166381a612d6856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156126f957600080fd5b505afa15801561270d573d6000803e3d6000fd5b505050506040513d602081101561272357600080fd5b50516127a4565b866001600160a01b031663e124e6d2856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561277757600080fd5b505afa15801561278b573d6000803e3d6000fd5b505050506040513d60208110156127a157600080fd5b50515b6004805460408051633cc8e33b60e21b81526001600160a01b038f8116948201949094528984166024820152888416604482015286151560648201526084810188905260a48101859052600160c4820152905193945091169163f3238cec9160e48082019260009290919082900301818387803b15801561282457600080fd5b505af1158015612838573d6000803e3d6000fd5b50505050856001600160a01b0316636d63c1d0886040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561288b57600080fd5b505af115801561289f573d6000803e3d6000fd5b5050600d546040805163d38ab51960e01b81526001600160a01b038f81166004830152602482018f90528d81166044830152915191909216935063d38ab5199250606480830192600092919082900301818387803b15801561290057600080fd5b505af1158015612914573d6000803e3d6000fd5b50505050856001600160a01b031663d3c87bbb886040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561296757600080fd5b505af115801561297b573d6000803e3d6000fd5b505050506113ae8a846142fa565b600d54600160a01b900460ff1681565b600260005414156129df576040805162461bcd60e51b815260206004820152601f6024820152600080516020614d61833981519152604482015290519081900360640190fd5b600260009081553381526010602052604090205460ff16612a35576040805162461bcd60e51b815260206004820152601a6024820152600080516020614efd833981519152604482015290519081900360640190fd5b600354604080516312d43a5160e01b815290516001600160a01b039092169160009183916312d43a5191600480820192602092909190829003018186803b158015612a7f57600080fd5b505afa158015612a93573d6000803e3d6000fd5b505050506040513d6020811015612aa957600080fd5b505160035460408051634a3f088d60e01b81526001600160a01b038b811660048301528a811660248301528981166044830152881515606483015291519394506000939190921691634a3f088d91608480830192610100929190829003018186803b158015612b1757600080fd5b505afa158015612b2b573d6000803e3d6000fd5b505050506040513d610100811015612b4257600080fd5b50519050600085612bcb57836001600160a01b031663e124e6d2886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612b9a57600080fd5b505afa158015612bae573d6000803e3d6000fd5b505050506040513d6020811015612bc457600080fd5b5051612c45565b836001600160a01b03166381a612d6886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612c1857600080fd5b505afa158015612c2c573d6000803e3d6000fd5b505050506040513d6020811015612c4257600080fd5b50515b6004805460408051633cc8e33b60e21b81526001600160a01b038e8116948201949094528c841660248201528b841660448201528a151560648201526084810187905260a48101859052600060c482018190529151949550929091169263f3238cec9260e480820193929182900301818387803b158015612cc557600080fd5b505af1158015612cd9573d6000803e3d6000fd5b50505050826001600160a01b0316636d63c1d0856040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015612d2c57600080fd5b505af1158015612d40573d6000803e3d6000fd5b505060408051631bc5d52960e31b81526001600160a01b038d811660048301528c811660248301528b811660448301528a1515606483015289811660848301529151918816935063de2ea948925060a48082019260009290919082900301818387803b158015612daf57600080fd5b505af1158015612dc3573d6000803e3d6000fd5b50505050826001600160a01b031663d3c87bbb856040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015612e1657600080fd5b505af1158015612e2a573d6000803e3d6000fd5b505060016000555050505050505050505050565b6001546001600160a01b03163314612e8b576040805162461bcd60e51b81526020600482015260156024820152600080516020614d81833981519152604482015290519081900360640190fd5b826001600160a01b031663095ea7b383836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612ee257600080fd5b505af1158015612ef6573d6000803e3d6000fd5b505050506040513d6020811015612f0c57600080fd5b5050505050565b6002546001600160a01b03163314612f60576040805162461bcd60e51b815260206004820152601e6024820152600080516020614e5c833981519152604482015290519081900360640190fd5b60005b8351811015612ffb576000848281518110612f7a57fe5b60200260200101519050838281518110612f9057fe5b6020026020010151600b6000836001600160a01b03166001600160a01b0316815260200190815260200160002081905550828281518110612fcd57fe5b6020908102919091018101516001600160a01b039092166000908152600c9091526040902055600101612f63565b507fae32d569b058895b9620d6552b09aaffedc9a6f396be4d595a224ad09f8b213983838360405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015613068578181015183820152602001613050565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156130a757818101518382015260200161308f565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156130e65781810151838201526020016130ce565b50505050905001965050505050505060405180910390a1505050565b6002546001600160a01b0316331461314f576040805162461bcd60e51b815260206004820152601e6024820152600080516020614e5c833981519152604482015290519081900360640190fd5b6001600160a01b0382166000908152600a60205260409020548061317357506116c7565b6001600160a01b0383166000818152600a602052604081205561319790838361391f565b604080516001600160a01b0380861682528416602082015280820183905290517f4f1b51dd7a2fcb861aa2670f668be66835c4ee12b4bbbf037e4d0018f39819e49181900360600190a1505050565b6002546001600160a01b031681565b6005546001600160a01b031681565b6003546001600160a01b031681565b6009546001600160a01b03168061322a57506116c7565b600080826001600160a01b031663534ef883866040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050604080518083038186803b15801561327957600080fd5b505afa15801561328d573d6000803e3d6000fd5b505050506040513d60408110156132a357600080fd5b5080516020909101519092509050816132be575050506116c7565b7f474c763ff84bf2c2039a6d9fea955ecd0f724030e3c365b91169c6a16fe751b78585600360009054906101000a90046001600160a01b03166001600160a01b031663318bc6896040518163ffffffff1660e01b815260040160206040518083038186803b15801561332f57600080fd5b505afa158015613343573d6000803e3d6000fd5b505050506040513d602081101561335957600080fd5b5051604080516001600160a01b03948516815260208101939093528281019190915260608201869052918416608082015290519081900360a00190a15050505050565b804710156133f1576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d806000811461343c576040519150601f19603f3d011682016040523d82523d6000602084013e613441565b606091505b50509050806134815760405162461bcd60e51b815260040180806020018281038252603a815260200180614dcc603a913960400191505060405180910390fd5b505050565b6003546000906001600160a01b0316818561351957816001600160a01b031663e124e6d28a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156134e857600080fd5b505afa1580156134fc573d6000803e3d6000fd5b505050506040513d602081101561351257600080fd5b5051613593565b816001600160a01b03166381a612d68a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561356657600080fd5b505afa15801561357a573d6000803e3d6000fd5b505050506040513d602081101561359057600080fd5b50515b905085156135df57838110156135da5760405162461bcd60e51b8152600401808060200182810382526030815260200180614e2c6030913960400191505060405180910390fd5b61361e565b8381111561361e5760405162461bcd60e51b8152600401808060200182810382526031815260200180614ecc6031913960400191505060405180910390fd5b6000826001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b15801561365957600080fd5b505afa15801561366d573d6000803e3d6000fd5b505050506040513d602081101561368357600080fd5b81019080805190602001909291905050509050600460009054906101000a90046001600160a01b03166001600160a01b031663f3238cec8d8d8d8b8d8860006040518863ffffffff1660e01b815260040180886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b0316815260200185151581526020018481526020018381526020018215158152602001975050505050505050600060405180830381600087803b15801561374157600080fd5b505af1158015613755573d6000803e3d6000fd5b50505050806001600160a01b0316636d63c1d0846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156137a857600080fd5b505af11580156137bc573d6000803e3d6000fd5b505050506000600560009054906101000a90046001600160a01b03166001600160a01b0316632662166b8e8e8e8e8e8e8e6040518863ffffffff1660e01b815260040180886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b031681526020018581526020018481526020018315158152602001826001600160a01b03168152602001975050505050505050602060405180830381600087803b15801561387357600080fd5b505af1158015613887573d6000803e3d6000fd5b505050506040513d602081101561389d57600080fd5b50516040805163d3c87bbb60e01b81526001600160a01b03878116600483015291519293509084169163d3c87bbb9160248082019260009290919082900301818387803b1580156138ed57600080fd5b505af1158015613901573d6000803e3d6000fd5b5050505061390f8d8a613213565b9c9b505050505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052613481908490614400565b60008351600214156139b8576139b18460008151811061398d57fe5b6020026020010151856001815181106139a257fe5b602002602001015185856144b1565b90506139ef565b60405162461bcd60e51b8152600401808060200182810382526029815260200180614f446029913960400191505060405180910390fd5b9392505050565b60065460408051632e1a7d4d60e01b81526004810185905290516001600160a01b0390921691632e1a7d4d9160248082019260009290919082900301818387803b158015613a4357600080fd5b505af1158015613a57573d6000803e3d6000fd5b50506040516001600160a01b038416925084156108fc02915084906000818181858888f150505050505050565b3415613aee57600660009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015613ada57600080fd5b505af1158015612f0c573d6000803e3d6000fd5b565b600080613b01888888888888614587565b90508015613bc0576000613b38612710613b32613b2b60075461271061476490919063ffffffff16565b8a906147af565b90614808565b90506000613b468883614764565b905060008960018b510381518110613b5a57fe5b60200260200101519050613b9c82600a6000846001600160a01b03166001600160a01b031681526020019081526020016000205461484790919063ffffffff16565b6001600160a01b039091166000908152600a6020526040902055509150613bc59050565b859150505b9695505050505050565b6003546001600160a01b0316600083613c6057816001600160a01b03166381a612d6876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613c2f57600080fd5b505afa158015613c43573d6000803e3d6000fd5b505050506040513d6020811015613c5957600080fd5b5051613cda565b816001600160a01b031663e124e6d2876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613cad57600080fd5b505afa158015613cc1573d6000803e3d6000fd5b505050506040513d6020811015613cd757600080fd5b50515b90508315613d265782811115613d215760405162461bcd60e51b8152600401808060200182810382526031815260200180614ecc6031913960400191505060405180910390fd5b613d65565b82811015613d655760405162461bcd60e51b8152600401808060200182810382526030815260200180614e2c6030913960400191505060405180910390fd5b613d7086858761489f565b6000826001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b158015613dab57600080fd5b505afa158015613dbf573d6000803e3d6000fd5b505050506040513d6020811015613dd557600080fd5b50516004805460408051633cc8e33b60e21b81526001600160a01b038e8116948201949094528c841660248201528b841660448201528915156064820152608481018b905260a48101879052600160c4820152905193945091169163f3238cec9160e48082019260009290919082900301818387803b158015613e5757600080fd5b505af1158015613e6b573d6000803e3d6000fd5b50505050806001600160a01b0316636d63c1d0846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015613ebe57600080fd5b505af1158015613ed2573d6000803e3d6000fd5b505060055460408051630f8ee8bb60e11b81526001600160a01b038e811660048301528d811660248301528c81166044830152606482018c90528a151560848301529151919092169350631f1dd176925060a480830192600092919082900301818387803b158015613f4357600080fd5b505af1158015613f57573d6000803e3d6000fd5b50505050806001600160a01b031663d3c87bbb846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015613faa57600080fd5b505af1158015613fbe573d6000803e3d6000fd5b50505050613fcc89876142fa565b505050505050505050565b600d546040805163d3bab1d160e01b81526001600160a01b03858116600483015260248201859052915160009384938493849384938493169163d3bab1d191604480830192610120929190829003018186803b15801561403657600080fd5b505afa15801561404a573d6000803e3d6000fd5b505050506040513d61012081101561406157600080fd5b508051602082015160408301516060840151608085015160a090950151939a5091985096509450909250905061409883828461489f565b600d54600160a81b900460ff166140b4575050505050506116c7565b806140c4575050505050506116c7565b60008211614119576040805162461bcd60e51b815260206004820152601d60248201527f506f736974696f6e4d616e616765723a206c6f6e67206465706f736974000000604482015290519081900360640190fd5b60035460408051634a3f088d60e01b81526001600160a01b038b811660048301528781166024830152868116604483015284151560648301529151919092169160009182918491634a3f088d9160848082019261010092909190829003018186803b15801561418757600080fd5b505afa15801561419b573d6000803e3d6000fd5b505050506040513d6101008110156141b257600080fd5b5080516020909101519092509050816141d3575050505050505050506116c7565b60006141df8387614847565b90506000846001600160a01b0316630a48d5a98c8c6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b15801561423857600080fd5b505afa15801561424c573d6000803e3d6000fd5b505050506040513d602081101561426257600080fd5b5051905060006142728483614847565b9050600061428685613b32886127106147af565b905060006142a783613b3260085461271001886147af90919063ffffffff16565b9050818110156142e85760405162461bcd60e51b8152600401808060200182810382526027815260200180614f1d6027913960400191505060405180910390fd5b50505050505050505050505050505050565b6009546001600160a01b03168061431157506116c7565b600080826001600160a01b031663534ef883866040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050604080518083038186803b15801561436057600080fd5b505afa158015614374573d6000803e3d6000fd5b505050506040513d604081101561438a57600080fd5b5080516020918201516003546040805163318bc68960e01b815290519396509194507fc2414023ce7002ee98557d1e7be21e5559073336f2217ee5f9b2e50fd85f71ee93899389936001600160a01b039093169263318bc689926004808301939192829003018186803b15801561332f57600080fd5b6060614455826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614a579092919063ffffffff16565b8051909150156134815780806020019051602081101561447457600080fd5b50516134815760405162461bcd60e51b815260040180806020018281038252602a815260200180614fb9602a913960400191505060405180910390fd5b60035460408051634998b10960e11b81526001600160a01b03878116600483015286811660248301528481166044830152915160009384931691639331621291606480830192602092919082900301818787803b15801561451157600080fd5b505af1158015614525573d6000803e3d6000fd5b505050506040513d602081101561453b57600080fd5b505190508381101561457e5760405162461bcd60e51b815260040180806020018281038252602b815260200180614da1602b913960400191505060405180910390fd5b95945050505050565b60008261459657506000613bc5565b816145a357506001613bc5565b6000866001885103815181106145b557fe5b602090810291909101015160035460408051634a3f088d60e01b81526001600160a01b038c81166004830152808516602483015289811660448301528815156064830152915193945091169160009182918491634a3f088d91608480830192610100929190829003018186803b15801561462e57600080fd5b505afa158015614642573d6000803e3d6000fd5b505050506040513d61010081101561465957600080fd5b508051602090910151909250905081614679576000945050505050613bc5565b60006146858388614847565b90506000846001600160a01b0316630a48d5a9878d6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b1580156146de57600080fd5b505afa1580156146f2573d6000803e3d6000fd5b505050506040513d602081101561470857600080fd5b5051905060006147188483614847565b9050600061472c85613b32886127106147af565b9050600061474d83613b3260085461271001886147af90919063ffffffff16565b919091109f9e505050505050505050505050505050565b60006147a683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614a6e565b90505b92915050565b6000826147be575060006147a9565b828202828482816147cb57fe5b04146147a65760405162461bcd60e51b8152600401808060200182810382526021815260200180614eab6021913960400191505060405180910390fd5b60006147a683836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250614b05565b6000828201838110156147a6576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b806148a957613481565b811561499c576001600160a01b0383166000908152600b6020526040902054801580159061495a57506003546040805163783a2b6760e11b81526001600160a01b0387811660048301529151849361495893879391169163f07456ce91602480820192602092909190829003018186803b15801561492657600080fd5b505afa15801561493a573d6000803e3d6000fd5b505050506040513d602081101561495057600080fd5b505190614847565b115b156149965760405162461bcd60e51b815260040180806020018281038252602e815260200180614d33602e913960400191505060405180910390fd5b50613481565b6001600160a01b0383166000908152600c60205260409020548015801590614a1557506003546040805163114f1b5560e31b81526001600160a01b03878116600483015291518493614a13938793911691638a78daa891602480820192602092909190829003018186803b15801561492657600080fd5b115b15614a515760405162461bcd60e51b815260040180806020018281038252602f815260200180614e7c602f913960400191505060405180910390fd5b50505050565b6060614a668484600085614b6a565b949350505050565b60008184841115614afd5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614ac2578181015183820152602001614aaa565b50505050905090810190601f168015614aef5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183614b545760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315614ac2578181015183820152602001614aaa565b506000838581614b6057fe5b0495945050505050565b606082471015614bab5760405162461bcd60e51b8152600401808060200182810382526026815260200180614e066026913960400191505060405180910390fd5b614bb485614cc6565b614c05576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310614c445780518252601f199092019160209182019101614c25565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614ca6576040519150601f19603f3d011682016040523d82523d6000602084013e614cab565b606091505b5091509150614cbb828286614ccc565b979650505050505050565b3b151590565b60608315614cdb5750816139ef565b825115614ceb5782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315614ac2578181015183820152602001614aaa56fe42617365506f736974696f6e4d616e616765723a206d617820676c6f62616c206c6f6e67732065786365656465645265656e7472616e637947756172643a207265656e7472616e742063616c6c00476f7665726e61626c653a20666f7262696464656e000000000000000000000042617365506f736974696f6e4d616e616765723a20696e73756666696369656e7420616d6f756e744f7574416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c42617365506f736974696f6e4d616e616765723a206d61726b207072696365206c6f776572207468616e206c696d697442617365506f736974696f6e4d616e616765723a20666f7262696464656e000042617365506f736974696f6e4d616e616765723a206d617820676c6f62616c2073686f727473206578636565646564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7742617365506f736974696f6e4d616e616765723a206d61726b20707269636520686967686572207468616e206c696d6974506f736974696f6e4d616e616765723a20666f7262696464656e000000000000506f736974696f6e4d616e616765723a206c6f6e67206c6576657261676520646563726561736542617365506f736974696f6e4d616e616765723a20696e76616c6964205f706174682e6c656e677468506f736974696f6e4d616e616765723a20696e76616c6964205f636f6c6c61746572616c546f6b656e42617365506f736974696f6e4d616e616765723a20696e76616c69642073656e6465725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564506f736974696f6e4d616e616765723a20696e76616c6964205f706174682e6c656e677468a164736f6c634300060c000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23515,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "gov",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1548,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "admin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1550,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "vault",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1552,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "shortsTracker",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1554,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "router",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1556,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "weth",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1558,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "depositFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1561,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "increasePositionBufferBps",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1563,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "referralStorage",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1567,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "feeReserves",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1572,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "maxGlobalLongSizes",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1577,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "maxGlobalShortSizes",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5307,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "orderBook",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 5309,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "inLegacyMode",
        "offset": 20,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 5312,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "shouldValidateIncreaseOrder",
        "offset": 21,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 5316,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "isOrderKeeper",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5320,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "isPartner",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5324,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "isLiquidator",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}