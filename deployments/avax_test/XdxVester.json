{
  "address": "0x3215540a491f7a126aA2C4F0b479e610D9FB285a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_vestingDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_esToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pairToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_claimableToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardTracker",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "PairTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bonusRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimForAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimableToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cumulativeClaimAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cumulativeRewardDeductions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositForAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "esToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getCombinedAverageStakedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getMaxVestableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_esAmount",
          "type": "uint256"
        }
      ],
      "name": "getPairAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getTotalVested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getVestedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasMaxVestableAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasPairToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasRewardTracker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHandler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastVestingTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pairAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setBonusRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setCumulativeRewardDeductions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_handler",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_hasMaxVestableAmount",
          "type": "bool"
        }
      ],
      "name": "setHasMaxVestableAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setTransferredAverageStakedAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setTransferredCumulativeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "transferStakeValues",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "transferredAverageStakedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "transferredCumulativeRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x750f54a00737136cb96a9e8b1bae03a52cb5dd4def9dadba5096da9f65b3abb0",
  "receipt": {
    "to": null,
    "from": "0xf5CA36c9873d61Bc28C117BD470981Ef6647A685",
    "contractAddress": "0x3215540a491f7a126aA2C4F0b479e610D9FB285a",
    "transactionIndex": 4,
    "gasUsed": "2365375",
    "logsBloom": "0x
    "blockHash": "0xdf7e6df2011515eae9b7098e650d4ddacd4f684ccbf23e614e4f4625c8ad38e4",
    "transactionHash": "0x750f54a00737136cb96a9e8b1bae03a52cb5dd4def9dadba5096da9f65b3abb0",
    "logs": [],
    "blockNumber": 17665103,
    "cumulativeGasUsed": "2556220",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Vested XDX",
    "vXDX",
    31536000,
    "0x88e85DA84Acfe4113472255f0bE7b5bC385369FF",
    "0x8CdB7aA0F158C2D171656B8cBbA31a5D5582bf28",
    "0x256A8Af2a328781eC08ebE16949B4AeBA8c90901",
    "0x20df8ff0Cfc704c2160b925344E8f4eA1585B892"
  ],
  "numDeployments": 1,
  "solcInputHash": "a5c1ec6ed734a994a4a7c4ed9bed389b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_esToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_claimableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardTracker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PairTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonusRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cumulativeClaimAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cumulativeRewardDeductions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCombinedAverageStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getMaxVestableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_esAmount\",\"type\":\"uint256\"}],\"name\":\"getPairAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTotalVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getVestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasMaxVestableAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasPairToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasRewardTracker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastVestingTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBonusRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setCumulativeRewardDeductions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasMaxVestableAmount\",\"type\":\"bool\"}],\"name\":\"setHasMaxVestableAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTransferredAverageStakedAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTransferredCumulativeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"transferStakeValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferredAverageStakedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferredCumulativeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"totalSupply\":{\"details\":\"Returns the amount of tokens in existence.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/Vester.sol\":\"Vester\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract Governable {\\n    address public gov;\\n\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\",\"keccak256\":\"0xe719b0de64ee00468f6a985c8ef08ebdd271d99d6616308cbba458f78ed8c532\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa3ce253082421a9e79d2b884ae6f60507b0cc73ea356674072091454c44cc556\",\"license\":\"MIT\"},\"contracts/libraries/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf80766b21ea67a73c81e0dea4543375243938c8b223e29c5d783be61ab3f424c\",\"license\":\"MIT\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1845481964ebacf35afe1a006fa574793b52e698eba0a8db6e3d30202bc45429\",\"license\":\"MIT\"},\"contracts/libraries/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xae7a1e407ed171ecd3a0d3976875d6c58eefdccf831ebce6314ec94892dffc03\",\"license\":\"MIT\"},\"contracts/staking/Vester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IRewardTracker.sol\\\";\\nimport \\\"./interfaces/IVester.sol\\\";\\nimport \\\"../tokens/interfaces/IMintable.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\n\\n\\ncontract Vester is IVester, IERC20, ReentrancyGuard, Governable {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals = 18;\\n\\n  uint256 public vestingDuration;\\n\\n  address public esToken;\\n  address public pairToken;\\n  address public claimableToken;\\n\\n  address public override rewardTracker;\\n\\n  uint256 public override totalSupply;\\n  uint256 public pairSupply;\\n\\n  bool public hasMaxVestableAmount;\\n\\n  mapping(address => uint256) public balances;\\n  mapping(address => uint256) public override pairAmounts;\\n  mapping(address => uint256) public override cumulativeClaimAmounts;\\n  mapping(address => uint256) public override claimedAmounts;\\n  mapping(address => uint256) public lastVestingTimes;\\n\\n  mapping(address => uint256) public override transferredAverageStakedAmounts;\\n  mapping(address => uint256) public override transferredCumulativeRewards;\\n  mapping(address => uint256) public override cumulativeRewardDeductions;\\n  mapping(address => uint256) public override bonusRewards;\\n\\n  mapping(address => bool) public isHandler;\\n\\n  event Claim(address receiver, uint256 amount);\\n  event Deposit(address account, uint256 amount);\\n  event Withdraw(address account, uint256 claimedAmount, uint256 balance);\\n  event PairTransfer(address indexed from, address indexed to, uint256 value);\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    uint256 _vestingDuration,\\n    address _esToken,\\n    address _pairToken,\\n    address _claimableToken,\\n    address _rewardTracker\\n  ) public {\\n    name = _name;\\n    symbol = _symbol;\\n\\n    vestingDuration = _vestingDuration;\\n\\n    esToken = _esToken;\\n    pairToken = _pairToken;\\n    claimableToken = _claimableToken;\\n\\n    rewardTracker = _rewardTracker;\\n\\n    if (rewardTracker != address(0)) {\\n      hasMaxVestableAmount = true;\\n    }\\n  }\\n\\n  function setHandler(address _handler, bool _isActive) external onlyGov {\\n    isHandler[_handler] = _isActive;\\n  }\\n\\n  function setHasMaxVestableAmount(bool _hasMaxVestableAmount) external onlyGov {\\n    hasMaxVestableAmount = _hasMaxVestableAmount;\\n  }\\n\\n  function deposit(uint256 _amount) external nonReentrant {\\n    _deposit(msg.sender, _amount);\\n  }\\n\\n  function depositForAccount(address _account, uint256 _amount) external nonReentrant {\\n    _validateHandler();\\n    _deposit(_account, _amount);\\n  }\\n\\n  function claim() external nonReentrant returns (uint256) {\\n    return _claim(msg.sender, msg.sender);\\n  }\\n\\n  function claimForAccount(address _account, address _receiver)\\n    external\\n    override\\n    nonReentrant\\n    returns (uint256)\\n  {\\n    _validateHandler();\\n    return _claim(_account, _receiver);\\n  }\\n\\n  // to help users who accidentally send their tokens to this contract\\n  function withdrawToken(\\n    address _token,\\n    address _account,\\n    uint256 _amount\\n  ) external onlyGov {\\n    IERC20(_token).safeTransfer(_account, _amount);\\n  }\\n\\n  function withdraw() external nonReentrant {\\n    address account = msg.sender;\\n    address _receiver = account;\\n    _claim(account, _receiver);\\n\\n    uint256 claimedAmount = cumulativeClaimAmounts[account];\\n    uint256 balance = balances[account];\\n    uint256 totalVested = balance.add(claimedAmount);\\n    require(totalVested > 0, \\\"Vester: vested amount is zero\\\");\\n\\n    if (hasPairToken()) {\\n      uint256 pairAmount = pairAmounts[account];\\n      _burnPair(account, pairAmount);\\n      IERC20(pairToken).safeTransfer(_receiver, pairAmount);\\n    }\\n\\n    IERC20(esToken).safeTransfer(_receiver, balance);\\n    _burn(account, balance);\\n\\n    delete cumulativeClaimAmounts[account];\\n    delete claimedAmounts[account];\\n    delete lastVestingTimes[account];\\n\\n    emit Withdraw(account, claimedAmount, balance);\\n  }\\n\\n  function transferStakeValues(address _sender, address _receiver) external override nonReentrant {\\n    _validateHandler();\\n\\n    transferredAverageStakedAmounts[_receiver] = getCombinedAverageStakedAmount(_sender);\\n    transferredAverageStakedAmounts[_sender] = 0;\\n\\n    uint256 transferredCumulativeReward = transferredCumulativeRewards[_sender];\\n    uint256 cumulativeReward = IRewardTracker(rewardTracker).cumulativeRewards(_sender);\\n\\n    transferredCumulativeRewards[_receiver] = transferredCumulativeReward.add(cumulativeReward);\\n    cumulativeRewardDeductions[_sender] = cumulativeReward;\\n    transferredCumulativeRewards[_sender] = 0;\\n\\n    bonusRewards[_receiver] = bonusRewards[_sender];\\n    bonusRewards[_sender] = 0;\\n  }\\n\\n  function setTransferredAverageStakedAmounts(address _account, uint256 _amount)\\n    external\\n    override\\n    nonReentrant\\n  {\\n    _validateHandler();\\n    transferredAverageStakedAmounts[_account] = _amount;\\n  }\\n\\n  function setTransferredCumulativeRewards(address _account, uint256 _amount)\\n    external\\n    override\\n    nonReentrant\\n  {\\n    _validateHandler();\\n    transferredCumulativeRewards[_account] = _amount;\\n  }\\n\\n  function setCumulativeRewardDeductions(address _account, uint256 _amount)\\n    external\\n    override\\n    nonReentrant\\n  {\\n    _validateHandler();\\n    cumulativeRewardDeductions[_account] = _amount;\\n  }\\n\\n  function setBonusRewards(address _account, uint256 _amount) external override nonReentrant {\\n    _validateHandler();\\n    bonusRewards[_account] = _amount;\\n  }\\n\\n  function claimable(address _account) public view override returns (uint256) {\\n    uint256 amount = cumulativeClaimAmounts[_account].sub(claimedAmounts[_account]);\\n    uint256 nextClaimable = _getNextClaimableAmount(_account);\\n    return amount.add(nextClaimable);\\n  }\\n\\n  function getMaxVestableAmount(address _account) public view override returns (uint256) {\\n    if (!hasRewardTracker()) {\\n      return 0;\\n    }\\n\\n    uint256 transferredCumulativeReward = transferredCumulativeRewards[_account];\\n    uint256 bonusReward = bonusRewards[_account];\\n    uint256 cumulativeReward = IRewardTracker(rewardTracker).cumulativeRewards(_account);\\n    uint256 maxVestableAmount = cumulativeReward.add(transferredCumulativeReward).add(bonusReward);\\n\\n    uint256 cumulativeRewardDeduction = cumulativeRewardDeductions[_account];\\n\\n    if (maxVestableAmount < cumulativeRewardDeduction) {\\n      return 0;\\n    }\\n\\n    return maxVestableAmount.sub(cumulativeRewardDeduction);\\n  }\\n\\n  function getCombinedAverageStakedAmount(address _account) public view override returns (uint256) {\\n    uint256 cumulativeReward = IRewardTracker(rewardTracker).cumulativeRewards(_account);\\n    uint256 transferredCumulativeReward = transferredCumulativeRewards[_account];\\n    uint256 totalCumulativeReward = cumulativeReward.add(transferredCumulativeReward);\\n    if (totalCumulativeReward == 0) {\\n      return 0;\\n    }\\n\\n    uint256 averageStakedAmount = IRewardTracker(rewardTracker).averageStakedAmounts(_account);\\n    uint256 transferredAverageStakedAmount = transferredAverageStakedAmounts[_account];\\n\\n    return\\n      averageStakedAmount.mul(cumulativeReward).div(totalCumulativeReward).add(\\n        transferredAverageStakedAmount.mul(transferredCumulativeReward).div(totalCumulativeReward)\\n      );\\n  }\\n\\n  function getPairAmount(address _account, uint256 _esAmount) public view returns (uint256) {\\n    if (!hasRewardTracker()) {\\n      return 0;\\n    }\\n\\n    uint256 combinedAverageStakedAmount = getCombinedAverageStakedAmount(_account);\\n    if (combinedAverageStakedAmount == 0) {\\n      return 0;\\n    }\\n\\n    uint256 maxVestableAmount = getMaxVestableAmount(_account);\\n    if (maxVestableAmount == 0) {\\n      return 0;\\n    }\\n\\n    return _esAmount.mul(combinedAverageStakedAmount).div(maxVestableAmount);\\n  }\\n\\n  function hasRewardTracker() public view returns (bool) {\\n    return rewardTracker != address(0);\\n  }\\n\\n  function hasPairToken() public view returns (bool) {\\n    return pairToken != address(0);\\n  }\\n\\n  function getTotalVested(address _account) public view returns (uint256) {\\n    return balances[_account].add(cumulativeClaimAmounts[_account]);\\n  }\\n\\n  function balanceOf(address _account) public view override returns (uint256) {\\n    return balances[_account];\\n  }\\n\\n  // empty implementation, tokens are non-transferrable\\n  function transfer(\\n    address, /* recipient */\\n    uint256 /* amount */\\n  ) public override returns (bool) {\\n    revert(\\\"Vester: non-transferrable\\\");\\n  }\\n\\n  // empty implementation, tokens are non-transferrable\\n  function allowance(\\n    address, /* owner */\\n    address /* spender */\\n  ) public view virtual override returns (uint256) {\\n    return 0;\\n  }\\n\\n  // empty implementation, tokens are non-transferrable\\n  function approve(\\n    address, /* spender */\\n    uint256 /* amount */\\n  ) public virtual override returns (bool) {\\n    revert(\\\"Vester: non-transferrable\\\");\\n  }\\n\\n  // empty implementation, tokens are non-transferrable\\n  function transferFrom(\\n    address, /* sender */\\n    address, /* recipient */\\n    uint256 /* amount */\\n  ) public virtual override returns (bool) {\\n    revert(\\\"Vester: non-transferrable\\\");\\n  }\\n\\n  function getVestedAmount(address _account) public view override returns (uint256) {\\n    uint256 balance = balances[_account];\\n    uint256 cumulativeClaimAmount = cumulativeClaimAmounts[_account];\\n    return balance.add(cumulativeClaimAmount);\\n  }\\n\\n  function _mint(address _account, uint256 _amount) private {\\n    require(_account != address(0), \\\"Vester: mint to the zero address\\\");\\n\\n    totalSupply = totalSupply.add(_amount);\\n    balances[_account] = balances[_account].add(_amount);\\n\\n    emit Transfer(address(0), _account, _amount);\\n  }\\n\\n  function _mintPair(address _account, uint256 _amount) private {\\n    require(_account != address(0), \\\"Vester: mint to the zero address\\\");\\n\\n    pairSupply = pairSupply.add(_amount);\\n    pairAmounts[_account] = pairAmounts[_account].add(_amount);\\n\\n    emit PairTransfer(address(0), _account, _amount);\\n  }\\n\\n  function _burn(address _account, uint256 _amount) private {\\n    require(_account != address(0), \\\"Vester: burn from the zero address\\\");\\n\\n    balances[_account] = balances[_account].sub(_amount, \\\"Vester: burn amount exceeds balance\\\");\\n    totalSupply = totalSupply.sub(_amount);\\n\\n    emit Transfer(_account, address(0), _amount);\\n  }\\n\\n  function _burnPair(address _account, uint256 _amount) private {\\n    require(_account != address(0), \\\"Vester: burn from the zero address\\\");\\n\\n    pairAmounts[_account] = pairAmounts[_account].sub(\\n      _amount,\\n      \\\"Vester: burn amount exceeds balance\\\"\\n    );\\n    pairSupply = pairSupply.sub(_amount);\\n\\n    emit PairTransfer(_account, address(0), _amount);\\n  }\\n\\n  function _deposit(address _account, uint256 _amount) private {\\n    require(_amount > 0, \\\"Vester: invalid _amount\\\");\\n\\n    _updateVesting(_account);\\n\\n    IERC20(esToken).safeTransferFrom(_account, address(this), _amount);\\n\\n    _mint(_account, _amount);\\n\\n    if (hasPairToken()) {\\n      uint256 pairAmount = pairAmounts[_account];\\n      uint256 nextPairAmount = getPairAmount(_account, balances[_account]);\\n      if (nextPairAmount > pairAmount) {\\n        uint256 pairAmountDiff = nextPairAmount.sub(pairAmount);\\n        IERC20(pairToken).safeTransferFrom(_account, address(this), pairAmountDiff);\\n        _mintPair(_account, pairAmountDiff);\\n      }\\n    }\\n\\n    if (hasMaxVestableAmount) {\\n      uint256 maxAmount = getMaxVestableAmount(_account);\\n      require(getTotalVested(_account) <= maxAmount, \\\"Vester: max vestable amount exceeded\\\");\\n    }\\n\\n    emit Deposit(_account, _amount);\\n  }\\n\\n  function _updateVesting(address _account) private {\\n    uint256 amount = _getNextClaimableAmount(_account);\\n    lastVestingTimes[_account] = block.timestamp;\\n\\n    if (amount == 0) {\\n      return;\\n    }\\n\\n    // transfer claimableAmount from balances to cumulativeClaimAmounts\\n    _burn(_account, amount);\\n    cumulativeClaimAmounts[_account] = cumulativeClaimAmounts[_account].add(amount);\\n\\n    IMintable(esToken).burn(address(this), amount);\\n  }\\n\\n  function _getNextClaimableAmount(address _account) private view returns (uint256) {\\n    uint256 timeDiff = block.timestamp.sub(lastVestingTimes[_account]);\\n\\n    uint256 balance = balances[_account];\\n    if (balance == 0) {\\n      return 0;\\n    }\\n\\n    uint256 vestedAmount = getVestedAmount(_account);\\n    uint256 claimableAmount = vestedAmount.mul(timeDiff).div(vestingDuration);\\n\\n    if (claimableAmount < balance) {\\n      return claimableAmount;\\n    }\\n\\n    return balance;\\n  }\\n\\n  function _claim(address _account, address _receiver) private returns (uint256) {\\n    _updateVesting(_account);\\n    uint256 amount = claimable(_account);\\n    claimedAmounts[_account] = claimedAmounts[_account].add(amount);\\n    IERC20(claimableToken).safeTransfer(_receiver, amount);\\n    emit Claim(_account, amount);\\n    return amount;\\n  }\\n\\n  function _validateHandler() private view {\\n    require(isHandler[msg.sender], \\\"Vester: forbidden\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x060628b5c087fb12d72ca77fac0236b47426d6233cf26160e09bd60c3f8c7e2c\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IRewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardTracker {\\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n    function stakedAmounts(address _account) external view returns (uint256);\\n    function updateRewards() external;\\n    function stake(address _depositToken, uint256 _amount) external;\\n    function stakeForAccount(address _fundingAccount, address _account, address _depositToken, uint256 _amount) external;\\n    function unstake(address _depositToken, uint256 _amount) external;\\n    function unstakeForAccount(address _account, address _depositToken, uint256 _amount, address _receiver) external;\\n    function tokensPerInterval() external view returns (uint256);\\n    function claim(address _receiver) external returns (uint256);\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n    function claimable(address _account) external view returns (uint256);\\n    function averageStakedAmounts(address _account) external view returns (uint256);\\n    function cumulativeRewards(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaaacb5c485b9aaf2a290489fe212471580e5a7ba8ac022fe6d7fdd1e864a5330\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IVester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVester {\\n    function rewardTracker() external view returns (address);\\n\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n    function claimable(address _account) external view returns (uint256);\\n    function cumulativeClaimAmounts(address _account) external view returns (uint256);\\n    function claimedAmounts(address _account) external view returns (uint256);\\n    function pairAmounts(address _account) external view returns (uint256);\\n    function getVestedAmount(address _account) external view returns (uint256);\\n    function transferredAverageStakedAmounts(address _account) external view returns (uint256);\\n    function transferredCumulativeRewards(address _account) external view returns (uint256);\\n    function cumulativeRewardDeductions(address _account) external view returns (uint256);\\n    function bonusRewards(address _account) external view returns (uint256);\\n\\n    function transferStakeValues(address _sender, address _receiver) external;\\n    function setTransferredAverageStakedAmounts(address _account, uint256 _amount) external;\\n    function setTransferredCumulativeRewards(address _account, uint256 _amount) external;\\n    function setCumulativeRewardDeductions(address _account, uint256 _amount) external;\\n    function setBonusRewards(address _account, uint256 _amount) external;\\n\\n    function getMaxVestableAmount(address _account) external view returns (uint256);\\n    function getCombinedAverageStakedAmount(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xae96cdbfc636a9af965a3805d09626e578845b3e04eb54960c277cda55bc1855\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IMintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IMintable {\\n    function isMinter(address _account) external returns (bool);\\n    function setMinter(address _minter, bool _isActive) external;\\n    function mint(address _account, uint256 _amount) external;\\n    function burn(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb1174808dcd4195a8fadf042f9e8e3808ae61842af7ed29b3ec059a206c7f1fe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526004805460ff191660121790553480156200001e57600080fd5b506040516200284d3803806200284d833981810160405260e08110156200004457600080fd5b81019080805160405193929190846401000000008211156200006557600080fd5b9083019060208201858111156200007b57600080fd5b82516401000000008111828201881017156200009657600080fd5b82525081516020918201929091019080838360005b83811015620000c5578181015183820152602001620000ab565b50505050905090810190601f168015620000f35780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011757600080fd5b9083019060208201858111156200012d57600080fd5b82516401000000008111828201881017156200014857600080fd5b82525081516020918201929091019080838360005b83811015620001775781810151838201526020016200015d565b50505050905090810190601f168015620001a55780820380516001836020036101000a031916815260200191505b506040908152602082810151918301516060840151608085015160a0909501516001600081905580546001600160a01b03191633179055895194975091955093929091620001f9916002918a019062000280565b5085516200020f90600390602089019062000280565b506005859055600680546001600160a01b03199081166001600160a01b038781169190911790925560078054821686841617905560088054821685841617905560098054909116838316179081905516156200027357600c805460ff191660011790555b505050505050506200031c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002c357805160ff1916838001178555620002f3565b82800160010185558215620002f3579182015b82811115620002f3578251825591602001919060010190620002d6565b506200030192915062000305565b5090565b5b8082111562000301576000815560010162000306565b612521806200032c6000396000f3fe608060405234801561001057600080fd5b506004361061024b5760003560e01c806369de9b931161014257806369de9b93146105bd5780636bcb411a146105dc57806370a08231146105e457806371417b321461060a5780637337035c146106305780637cf8f3b214610656578063930354731461068257806395d89b41146106a85780639cb7de4b146106b0578063a2545fa5146106de578063a9059cbb1461033d578063acf077a514610704578063b5ff136d1461070c578063b6b55f2514610732578063b71bce2a1461074f578063cfad57a214610775578063d0b038b71461079b578063d5a73fdd146107c7578063d75abb57146107ed578063d89b7007146107f5578063dd62ed3e14610821578063e3ecc4b21461084f578063f421f62a1461087b578063f6d6d5aa14610883578063f713c2301461088b5761024b565b806301e336671461025057806306fdde031461028857806308f26c7614610305578063095ea7b31461033d5780630db9ea4a1461037d57806312d43a51146103a357806313e82e7a146103c75780631514617e146103f557806315e90a41146103fd57806316ca05c51461040557806318160ddd1461040d57806323b872dd1461041557806327e235e31461044b578063313ce56714610471578063342fcda91461048f578063387a785d146104bb5780633ccfd60b146104e15780633de35b79146104e9578063402914f5146104f157806341f227241461051757806345f01ee61461054357806346ea87af146105695780634e71d92d1461058f5780635d50e72914610597575b600080fd5b6102866004803603606081101561026657600080fd5b506001600160a01b038135811691602081013590911690604001356108b9565b005b61029061091f565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102ca5781810151838201526020016102b2565b50505050905090810190601f1680156102f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61032b6004803603602081101561031b57600080fd5b50356001600160a01b03166109aa565b60408051918252519081900360200190f35b6103696004803603604081101561035357600080fd5b506001600160a01b038135169060200135610ab3565b604080519115158252519081900360200190f35b61032b6004803603602081101561039357600080fd5b50356001600160a01b0316610afe565b6103ab610b10565b604080516001600160a01b039092168252519081900360200190f35b61032b600480360360408110156103dd57600080fd5b506001600160a01b0381358116916020013516610b1f565b61032b610b8a565b61032b610b90565b6103ab610b96565b61032b610ba5565b6103696004803603606081101561042b57600080fd5b506001600160a01b03813581169160208101359091169060400135610ab3565b61032b6004803603602081101561046157600080fd5b50356001600160a01b0316610bab565b610479610bbd565b6040805160ff9092168252519081900360200190f35b610286600480360360408110156104a557600080fd5b506001600160a01b038135169060200135610bc6565b61032b600480360360208110156104d157600080fd5b50356001600160a01b0316610c2c565b610286610c3e565b6103ab610e01565b61032b6004803603602081101561050757600080fd5b50356001600160a01b0316610e10565b6102866004803603604081101561052d57600080fd5b506001600160a01b038135169060200135610e61565b61032b6004803603602081101561055957600080fd5b50356001600160a01b0316610ed7565b6103696004803603602081101561057f57600080fd5b50356001600160a01b0316611049565b61032b61105e565b61032b600480360360208110156105ad57600080fd5b50356001600160a01b03166110bf565b610286600480360360208110156105d357600080fd5b503515156110d1565b6103ab611131565b61032b600480360360208110156105fa57600080fd5b50356001600160a01b0316611140565b61032b6004803603602081101561062057600080fd5b50356001600160a01b031661115b565b61032b6004803603602081101561064657600080fd5b50356001600160a01b031661116d565b61032b6004803603604081101561066c57600080fd5b506001600160a01b03813516906020013561117f565b61032b6004803603602081101561069857600080fd5b50356001600160a01b03166111e7565b610290611214565b610286600480360360408110156106c657600080fd5b506001600160a01b038135169060200135151561126f565b61032b600480360360208110156106f457600080fd5b50356001600160a01b03166112e7565b6103696112f9565b61032b6004803603602081101561072257600080fd5b50356001600160a01b0316611302565b6102866004803603602081101561074857600080fd5b5035611314565b61032b6004803603602081101561076557600080fd5b50356001600160a01b0316611371565b6102866004803603602081101561078b57600080fd5b50356001600160a01b0316611383565b610286600480360360408110156107b157600080fd5b506001600160a01b0381351690602001356113f2565b61032b600480360360208110156107dd57600080fd5b50356001600160a01b0316611468565b610369611496565b6102866004803603604081101561080b57600080fd5b506001600160a01b0381351690602001356114a7565b61032b6004803603604081101561083757600080fd5b506001600160a01b038135811691602001351661151d565b6102866004803603604081101561086557600080fd5b506001600160a01b038135169060200135611525565b61036961159b565b6103ab6115ac565b610286600480360360408110156108a157600080fd5b506001600160a01b03813581169160200135166115bb565b6001546001600160a01b03163314610906576040805162461bcd60e51b81526020600482015260156024820152600080516020612441833981519152604482015290519081900360640190fd5b61091a6001600160a01b0384168383611724565b505050565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156109a25780601f10610977576101008083540402835291602001916109a2565b820191906000526020600020905b81548152906001019060200180831161098557829003601f168201915b505050505081565b60006109b461159b565b6109c057506000610aae565b6001600160a01b0380831660008181526013602090815260408083205460158352818420546009548351633792def360e01b81526004810197909752925191969095921692633792def39260248082019391829003018186803b158015610a2657600080fd5b505afa158015610a3a573d6000803e3d6000fd5b505050506040513d6020811015610a5057600080fd5b505190506000610a6a83610a648487611776565b90611776565b6001600160a01b03871660009081526014602052604090205490915080821015610a9c57600095505050505050610aae565b610aa682826117d5565b955050505050505b919050565b6040805162461bcd60e51b81526020600482015260196024820152785665737465723a206e6f6e2d7472616e736665727261626c6560381b6044820152905160009181900360640190fd5b60116020526000908152604090205481565b6001546001600160a01b031681565b600060026000541415610b67576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b6002600055610b74611817565b610b7e8383611871565b60016000559392505050565b60055481565b600b5481565b6006546001600160a01b031681565b600a5481565b600d6020526000908152604090205481565b60045460ff1681565b60026000541415610c0c576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b6002600055610c19611817565b610c238282611924565b50506001600055565b60146020526000908152604090205481565b60026000541415610c84576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b60026000553380610c958180611871565b506001600160a01b0382166000908152600f6020908152604080832054600d9092528220549091610cc68284611776565b905060008111610d1d576040805162461bcd60e51b815260206004820152601d60248201527f5665737465723a2076657374656420616d6f756e74206973207a65726f000000604482015290519081900360640190fd5b610d25611496565b15610d66576001600160a01b0385166000908152600e6020526040902054610d4d8682611ac6565b600754610d64906001600160a01b03168683611724565b505b600654610d7d906001600160a01b03168584611724565b610d878583611bb6565b6001600160a01b0385166000818152600f6020908152604080832083905560108252808320839055601182528083209290925581519283528201859052818101849052517ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360600190a150506001600055505050565b6007546001600160a01b031681565b6001600160a01b038116600090815260106020908152604080832054600f9092528220548291610e4091906117d5565b90506000610e4d84611ca6565b9050610e598282611776565b949350505050565b60026000541415610ea7576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b6002600055610eb4611817565b6001600160a01b0390911660009081526015602052604081209190915560019055565b60095460408051633792def360e01b81526001600160a01b038481166004830152915160009384931691633792def3916024808301926020929190829003018186803b158015610f2657600080fd5b505afa158015610f3a573d6000803e3d6000fd5b505050506040513d6020811015610f5057600080fd5b50516001600160a01b038416600090815260136020526040812054919250610f788383611776565b905080610f8b5760009350505050610aae565b6009546040805163a318021760e01b81526001600160a01b0388811660048301529151600093929092169163a318021791602480820192602092909190829003018186803b158015610fdc57600080fd5b505afa158015610ff0573d6000803e3d6000fd5b505050506040513d602081101561100657600080fd5b50516001600160a01b038716600090815260126020526040902054909150610aa661103b846110358488611d3f565b90611d98565b610a6485611035868a611d3f565b60166020526000908152604090205460ff1681565b6000600260005414156110a6576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b60026000556110b53380611871565b9050600160005590565b600e6020526000908152604090205481565b6001546001600160a01b0316331461111e576040805162461bcd60e51b81526020600482015260156024820152600080516020612441833981519152604482015290519081900360640190fd5b600c805460ff1916911515919091179055565b6009546001600160a01b031681565b6001600160a01b03166000908152600d602052604090205490565b60106020526000908152604090205481565b60126020526000908152604090205481565b600061118961159b565b611195575060006111e1565b60006111a084610ed7565b9050806111b15760009150506111e1565b60006111bc856109aa565b9050806111ce576000925050506111e1565b6111dc816110358685611d3f565b925050505b92915050565b6001600160a01b0381166000908152600f6020908152604080832054600d9092528220546111e191611776565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109a25780601f10610977576101008083540402835291602001916109a2565b6001546001600160a01b031633146112bc576040805162461bcd60e51b81526020600482015260156024820152600080516020612441833981519152604482015290519081900360640190fd5b6001600160a01b03919091166000908152601660205260409020805460ff1916911515919091179055565b60156020526000908152604090205481565b600c5460ff1681565b600f6020526000908152604090205481565b6002600054141561135a576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b60026000556113693382611924565b506001600055565b60136020526000908152604090205481565b6001546001600160a01b031633146113d0576040805162461bcd60e51b81526020600482015260156024820152600080516020612441833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60026000541415611438576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b6002600055611445611817565b6001600160a01b0390911660009081526013602052604081209190915560019055565b6001600160a01b0381166000908152600d6020908152604080832054600f909252822054610e598282611776565b6007546001600160a01b0316151590565b600260005414156114ed576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b60026000556114fa611817565b6001600160a01b0390911660009081526014602052604081209190915560019055565b600092915050565b6002600054141561156b576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b6002600055611578611817565b6001600160a01b0390911660009081526012602052604081209190915560019055565b6009546001600160a01b0316151590565b6008546001600160a01b031681565b60026000541415611601576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b600260005561160e611817565b61161782610ed7565b6001600160a01b0380831660009081526012602090815260408083209490945585831680835284832083905560138252848320546009548651633792def360e01b815260048101939093529551909593949390931692633792def392602480840193919291829003018186803b15801561169057600080fd5b505afa1580156116a4573d6000803e3d6000fd5b505050506040513d60208110156116ba57600080fd5b505190506116c88282611776565b6001600160a01b0393841660008181526013602081815260408084209590955597909616808252601488528382209490945594865281852085905560159095528084208054958552908420949094558252509081905560019055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261091a908490611dd7565b6000828201838110156117ce576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b9392505050565b60006117ce83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611e88565b3360009081526016602052604090205460ff1661186f576040805162461bcd60e51b81526020600482015260116024820152702b32b9ba32b91d103337b93134b23232b760791b604482015290519081900360640190fd5b565b600061187c83611f1f565b600061188784610e10565b6001600160a01b0385166000908152601060205260409020549091506118ad9082611776565b6001600160a01b038086166000908152601060205260409020919091556008546118d991168483611724565b604080516001600160a01b03861681526020810183905281517f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4929181900390910190a19392505050565b60008111611973576040805162461bcd60e51b815260206004820152601760248201527615995cdd195c8e881a5b9d985b1a590817d85b5bdd5b9d604a1b604482015290519081900360640190fd5b61197c82611f1f565b600654611994906001600160a01b0316833084611ffd565b61199e828261205d565b6119a6611496565b15611a1d576001600160a01b0382166000908152600e6020908152604080832054600d9092528220549091906119dd90859061117f565b905081811115611a1a5760006119f382846117d5565b600754909150611a0e906001600160a01b0316863084611ffd565b611a188582612143565b505b50505b600c5460ff1615611a7e576000611a33836109aa565b905080611a3f846111e7565b1115611a7c5760405162461bcd60e51b81526004018080602001828103825260248152602001806124c76024913960400191505060405180910390fd5b505b604080516001600160a01b03841681526020810183905281517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c929181900390910190a15050565b6001600160a01b038216611b0b5760405162461bcd60e51b81526004018080602001828103825260228152602001806124846022913960400191505060405180910390fd5b611b4881604051806060016040528060238152602001612461602391396001600160a01b0385166000908152600e60205260409020549190611e88565b6001600160a01b0383166000908152600e6020526040902055600b54611b6e90826117d5565b600b556040805182815290516000916001600160a01b038516917f659523c479d006050ebc0d0e48fea36d1b2c5d45b2f31402ac6f8671fc84cc049181900360200190a35050565b6001600160a01b038216611bfb5760405162461bcd60e51b81526004018080602001828103825260228152602001806124846022913960400191505060405180910390fd5b611c3881604051806060016040528060238152602001612461602391396001600160a01b0385166000908152600d60205260409020549190611e88565b6001600160a01b0383166000908152600d6020526040902055600a54611c5e90826117d5565b600a556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b0381166000908152601160205260408120548190611ccc9042906117d5565b6001600160a01b0384166000908152600d602052604090205490915080611cf857600092505050610aae565b6000611d0385611468565b90506000611d206005546110358685611d3f90919063ffffffff16565b905082811015611d35579350610aae92505050565b5090949350505050565b600082611d4e575060006111e1565b82820282848281611d5b57fe5b04146117ce5760405162461bcd60e51b81526004018080602001828103825260218152602001806124a66021913960400191505060405180910390fd5b60006117ce83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250612229565b6060611e2c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661228e9092919063ffffffff16565b80519091501561091a57808060200190516020811015611e4b57600080fd5b505161091a5760405162461bcd60e51b815260040180806020018281038252602a8152602001806124eb602a913960400191505060405180910390fd5b60008184841115611f175760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611edc578181015183820152602001611ec4565b50505050905090810190601f168015611f095780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000611f2a82611ca6565b6001600160a01b0383166000908152601160205260409020429055905080611f525750611ffa565b611f5c8282611bb6565b6001600160a01b0382166000908152600f6020526040902054611f7f9082611776565b6001600160a01b038084166000908152600f6020526040808220939093556006548351632770a7eb60e21b8152306004820152602481018690529351921692639dc29fac926044808301939282900301818387803b158015611fe057600080fd5b505af1158015611ff4573d6000803e3d6000fd5b50505050505b50565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612057908590611dd7565b50505050565b6001600160a01b0382166120b8576040805162461bcd60e51b815260206004820181905260248201527f5665737465723a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b600a546120c59082611776565b600a556001600160a01b0382166000908152600d60205260409020546120eb9082611776565b6001600160a01b0383166000818152600d602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b03821661219e576040805162461bcd60e51b815260206004820181905260248201527f5665737465723a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b600b546121ab9082611776565b600b556001600160a01b0382166000908152600e60205260409020546121d19082611776565b6001600160a01b0383166000818152600e602090815260408083209490945583518581529351929391927f659523c479d006050ebc0d0e48fea36d1b2c5d45b2f31402ac6f8671fc84cc049281900390910190a35050565b600081836122785760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611edc578181015183820152602001611ec4565b50600083858161228457fe5b0495945050505050565b6060610e598484600085856122a2856123b4565b6122f3576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106123325780518252601f199092019160209182019101612313565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612394576040519150601f19603f3d011682016040523d82523d6000602084013e612399565b606091505b50915091506123a98282866123ba565b979650505050505050565b3b151590565b606083156123c95750816117ce565b8251156123d95782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315611edc578181015183820152602001611ec456fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00476f7665726e61626c653a20666f7262696464656e00000000000000000000005665737465723a206275726e20616d6f756e7420657863656564732062616c616e63655665737465723a206275726e2066726f6d20746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775665737465723a206d6178207665737461626c6520616d6f756e742065786365656465645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a164736f6c634300060c000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061024b5760003560e01c806369de9b931161014257806369de9b93146105bd5780636bcb411a146105dc57806370a08231146105e457806371417b321461060a5780637337035c146106305780637cf8f3b214610656578063930354731461068257806395d89b41146106a85780639cb7de4b146106b0578063a2545fa5146106de578063a9059cbb1461033d578063acf077a514610704578063b5ff136d1461070c578063b6b55f2514610732578063b71bce2a1461074f578063cfad57a214610775578063d0b038b71461079b578063d5a73fdd146107c7578063d75abb57146107ed578063d89b7007146107f5578063dd62ed3e14610821578063e3ecc4b21461084f578063f421f62a1461087b578063f6d6d5aa14610883578063f713c2301461088b5761024b565b806301e336671461025057806306fdde031461028857806308f26c7614610305578063095ea7b31461033d5780630db9ea4a1461037d57806312d43a51146103a357806313e82e7a146103c75780631514617e146103f557806315e90a41146103fd57806316ca05c51461040557806318160ddd1461040d57806323b872dd1461041557806327e235e31461044b578063313ce56714610471578063342fcda91461048f578063387a785d146104bb5780633ccfd60b146104e15780633de35b79146104e9578063402914f5146104f157806341f227241461051757806345f01ee61461054357806346ea87af146105695780634e71d92d1461058f5780635d50e72914610597575b600080fd5b6102866004803603606081101561026657600080fd5b506001600160a01b038135811691602081013590911690604001356108b9565b005b61029061091f565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102ca5781810151838201526020016102b2565b50505050905090810190601f1680156102f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61032b6004803603602081101561031b57600080fd5b50356001600160a01b03166109aa565b60408051918252519081900360200190f35b6103696004803603604081101561035357600080fd5b506001600160a01b038135169060200135610ab3565b604080519115158252519081900360200190f35b61032b6004803603602081101561039357600080fd5b50356001600160a01b0316610afe565b6103ab610b10565b604080516001600160a01b039092168252519081900360200190f35b61032b600480360360408110156103dd57600080fd5b506001600160a01b0381358116916020013516610b1f565b61032b610b8a565b61032b610b90565b6103ab610b96565b61032b610ba5565b6103696004803603606081101561042b57600080fd5b506001600160a01b03813581169160208101359091169060400135610ab3565b61032b6004803603602081101561046157600080fd5b50356001600160a01b0316610bab565b610479610bbd565b6040805160ff9092168252519081900360200190f35b610286600480360360408110156104a557600080fd5b506001600160a01b038135169060200135610bc6565b61032b600480360360208110156104d157600080fd5b50356001600160a01b0316610c2c565b610286610c3e565b6103ab610e01565b61032b6004803603602081101561050757600080fd5b50356001600160a01b0316610e10565b6102866004803603604081101561052d57600080fd5b506001600160a01b038135169060200135610e61565b61032b6004803603602081101561055957600080fd5b50356001600160a01b0316610ed7565b6103696004803603602081101561057f57600080fd5b50356001600160a01b0316611049565b61032b61105e565b61032b600480360360208110156105ad57600080fd5b50356001600160a01b03166110bf565b610286600480360360208110156105d357600080fd5b503515156110d1565b6103ab611131565b61032b600480360360208110156105fa57600080fd5b50356001600160a01b0316611140565b61032b6004803603602081101561062057600080fd5b50356001600160a01b031661115b565b61032b6004803603602081101561064657600080fd5b50356001600160a01b031661116d565b61032b6004803603604081101561066c57600080fd5b506001600160a01b03813516906020013561117f565b61032b6004803603602081101561069857600080fd5b50356001600160a01b03166111e7565b610290611214565b610286600480360360408110156106c657600080fd5b506001600160a01b038135169060200135151561126f565b61032b600480360360208110156106f457600080fd5b50356001600160a01b03166112e7565b6103696112f9565b61032b6004803603602081101561072257600080fd5b50356001600160a01b0316611302565b6102866004803603602081101561074857600080fd5b5035611314565b61032b6004803603602081101561076557600080fd5b50356001600160a01b0316611371565b6102866004803603602081101561078b57600080fd5b50356001600160a01b0316611383565b610286600480360360408110156107b157600080fd5b506001600160a01b0381351690602001356113f2565b61032b600480360360208110156107dd57600080fd5b50356001600160a01b0316611468565b610369611496565b6102866004803603604081101561080b57600080fd5b506001600160a01b0381351690602001356114a7565b61032b6004803603604081101561083757600080fd5b506001600160a01b038135811691602001351661151d565b6102866004803603604081101561086557600080fd5b506001600160a01b038135169060200135611525565b61036961159b565b6103ab6115ac565b610286600480360360408110156108a157600080fd5b506001600160a01b03813581169160200135166115bb565b6001546001600160a01b03163314610906576040805162461bcd60e51b81526020600482015260156024820152600080516020612441833981519152604482015290519081900360640190fd5b61091a6001600160a01b0384168383611724565b505050565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156109a25780601f10610977576101008083540402835291602001916109a2565b820191906000526020600020905b81548152906001019060200180831161098557829003601f168201915b505050505081565b60006109b461159b565b6109c057506000610aae565b6001600160a01b0380831660008181526013602090815260408083205460158352818420546009548351633792def360e01b81526004810197909752925191969095921692633792def39260248082019391829003018186803b158015610a2657600080fd5b505afa158015610a3a573d6000803e3d6000fd5b505050506040513d6020811015610a5057600080fd5b505190506000610a6a83610a648487611776565b90611776565b6001600160a01b03871660009081526014602052604090205490915080821015610a9c57600095505050505050610aae565b610aa682826117d5565b955050505050505b919050565b6040805162461bcd60e51b81526020600482015260196024820152785665737465723a206e6f6e2d7472616e736665727261626c6560381b6044820152905160009181900360640190fd5b60116020526000908152604090205481565b6001546001600160a01b031681565b600060026000541415610b67576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b6002600055610b74611817565b610b7e8383611871565b60016000559392505050565b60055481565b600b5481565b6006546001600160a01b031681565b600a5481565b600d6020526000908152604090205481565b60045460ff1681565b60026000541415610c0c576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b6002600055610c19611817565b610c238282611924565b50506001600055565b60146020526000908152604090205481565b60026000541415610c84576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b60026000553380610c958180611871565b506001600160a01b0382166000908152600f6020908152604080832054600d9092528220549091610cc68284611776565b905060008111610d1d576040805162461bcd60e51b815260206004820152601d60248201527f5665737465723a2076657374656420616d6f756e74206973207a65726f000000604482015290519081900360640190fd5b610d25611496565b15610d66576001600160a01b0385166000908152600e6020526040902054610d4d8682611ac6565b600754610d64906001600160a01b03168683611724565b505b600654610d7d906001600160a01b03168584611724565b610d878583611bb6565b6001600160a01b0385166000818152600f6020908152604080832083905560108252808320839055601182528083209290925581519283528201859052818101849052517ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360600190a150506001600055505050565b6007546001600160a01b031681565b6001600160a01b038116600090815260106020908152604080832054600f9092528220548291610e4091906117d5565b90506000610e4d84611ca6565b9050610e598282611776565b949350505050565b60026000541415610ea7576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b6002600055610eb4611817565b6001600160a01b0390911660009081526015602052604081209190915560019055565b60095460408051633792def360e01b81526001600160a01b038481166004830152915160009384931691633792def3916024808301926020929190829003018186803b158015610f2657600080fd5b505afa158015610f3a573d6000803e3d6000fd5b505050506040513d6020811015610f5057600080fd5b50516001600160a01b038416600090815260136020526040812054919250610f788383611776565b905080610f8b5760009350505050610aae565b6009546040805163a318021760e01b81526001600160a01b0388811660048301529151600093929092169163a318021791602480820192602092909190829003018186803b158015610fdc57600080fd5b505afa158015610ff0573d6000803e3d6000fd5b505050506040513d602081101561100657600080fd5b50516001600160a01b038716600090815260126020526040902054909150610aa661103b846110358488611d3f565b90611d98565b610a6485611035868a611d3f565b60166020526000908152604090205460ff1681565b6000600260005414156110a6576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b60026000556110b53380611871565b9050600160005590565b600e6020526000908152604090205481565b6001546001600160a01b0316331461111e576040805162461bcd60e51b81526020600482015260156024820152600080516020612441833981519152604482015290519081900360640190fd5b600c805460ff1916911515919091179055565b6009546001600160a01b031681565b6001600160a01b03166000908152600d602052604090205490565b60106020526000908152604090205481565b60126020526000908152604090205481565b600061118961159b565b611195575060006111e1565b60006111a084610ed7565b9050806111b15760009150506111e1565b60006111bc856109aa565b9050806111ce576000925050506111e1565b6111dc816110358685611d3f565b925050505b92915050565b6001600160a01b0381166000908152600f6020908152604080832054600d9092528220546111e191611776565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109a25780601f10610977576101008083540402835291602001916109a2565b6001546001600160a01b031633146112bc576040805162461bcd60e51b81526020600482015260156024820152600080516020612441833981519152604482015290519081900360640190fd5b6001600160a01b03919091166000908152601660205260409020805460ff1916911515919091179055565b60156020526000908152604090205481565b600c5460ff1681565b600f6020526000908152604090205481565b6002600054141561135a576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b60026000556113693382611924565b506001600055565b60136020526000908152604090205481565b6001546001600160a01b031633146113d0576040805162461bcd60e51b81526020600482015260156024820152600080516020612441833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60026000541415611438576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b6002600055611445611817565b6001600160a01b0390911660009081526013602052604081209190915560019055565b6001600160a01b0381166000908152600d6020908152604080832054600f909252822054610e598282611776565b6007546001600160a01b0316151590565b600260005414156114ed576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b60026000556114fa611817565b6001600160a01b0390911660009081526014602052604081209190915560019055565b600092915050565b6002600054141561156b576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b6002600055611578611817565b6001600160a01b0390911660009081526012602052604081209190915560019055565b6009546001600160a01b0316151590565b6008546001600160a01b031681565b60026000541415611601576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b600260005561160e611817565b61161782610ed7565b6001600160a01b0380831660009081526012602090815260408083209490945585831680835284832083905560138252848320546009548651633792def360e01b815260048101939093529551909593949390931692633792def392602480840193919291829003018186803b15801561169057600080fd5b505afa1580156116a4573d6000803e3d6000fd5b505050506040513d60208110156116ba57600080fd5b505190506116c88282611776565b6001600160a01b0393841660008181526013602081815260408084209590955597909616808252601488528382209490945594865281852085905560159095528084208054958552908420949094558252509081905560019055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261091a908490611dd7565b6000828201838110156117ce576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b9392505050565b60006117ce83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611e88565b3360009081526016602052604090205460ff1661186f576040805162461bcd60e51b81526020600482015260116024820152702b32b9ba32b91d103337b93134b23232b760791b604482015290519081900360640190fd5b565b600061187c83611f1f565b600061188784610e10565b6001600160a01b0385166000908152601060205260409020549091506118ad9082611776565b6001600160a01b038086166000908152601060205260409020919091556008546118d991168483611724565b604080516001600160a01b03861681526020810183905281517f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4929181900390910190a19392505050565b60008111611973576040805162461bcd60e51b815260206004820152601760248201527615995cdd195c8e881a5b9d985b1a590817d85b5bdd5b9d604a1b604482015290519081900360640190fd5b61197c82611f1f565b600654611994906001600160a01b0316833084611ffd565b61199e828261205d565b6119a6611496565b15611a1d576001600160a01b0382166000908152600e6020908152604080832054600d9092528220549091906119dd90859061117f565b905081811115611a1a5760006119f382846117d5565b600754909150611a0e906001600160a01b0316863084611ffd565b611a188582612143565b505b50505b600c5460ff1615611a7e576000611a33836109aa565b905080611a3f846111e7565b1115611a7c5760405162461bcd60e51b81526004018080602001828103825260248152602001806124c76024913960400191505060405180910390fd5b505b604080516001600160a01b03841681526020810183905281517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c929181900390910190a15050565b6001600160a01b038216611b0b5760405162461bcd60e51b81526004018080602001828103825260228152602001806124846022913960400191505060405180910390fd5b611b4881604051806060016040528060238152602001612461602391396001600160a01b0385166000908152600e60205260409020549190611e88565b6001600160a01b0383166000908152600e6020526040902055600b54611b6e90826117d5565b600b556040805182815290516000916001600160a01b038516917f659523c479d006050ebc0d0e48fea36d1b2c5d45b2f31402ac6f8671fc84cc049181900360200190a35050565b6001600160a01b038216611bfb5760405162461bcd60e51b81526004018080602001828103825260228152602001806124846022913960400191505060405180910390fd5b611c3881604051806060016040528060238152602001612461602391396001600160a01b0385166000908152600d60205260409020549190611e88565b6001600160a01b0383166000908152600d6020526040902055600a54611c5e90826117d5565b600a556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b0381166000908152601160205260408120548190611ccc9042906117d5565b6001600160a01b0384166000908152600d602052604090205490915080611cf857600092505050610aae565b6000611d0385611468565b90506000611d206005546110358685611d3f90919063ffffffff16565b905082811015611d35579350610aae92505050565b5090949350505050565b600082611d4e575060006111e1565b82820282848281611d5b57fe5b04146117ce5760405162461bcd60e51b81526004018080602001828103825260218152602001806124a66021913960400191505060405180910390fd5b60006117ce83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250612229565b6060611e2c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661228e9092919063ffffffff16565b80519091501561091a57808060200190516020811015611e4b57600080fd5b505161091a5760405162461bcd60e51b815260040180806020018281038252602a8152602001806124eb602a913960400191505060405180910390fd5b60008184841115611f175760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611edc578181015183820152602001611ec4565b50505050905090810190601f168015611f095780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000611f2a82611ca6565b6001600160a01b0383166000908152601160205260409020429055905080611f525750611ffa565b611f5c8282611bb6565b6001600160a01b0382166000908152600f6020526040902054611f7f9082611776565b6001600160a01b038084166000908152600f6020526040808220939093556006548351632770a7eb60e21b8152306004820152602481018690529351921692639dc29fac926044808301939282900301818387803b158015611fe057600080fd5b505af1158015611ff4573d6000803e3d6000fd5b50505050505b50565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612057908590611dd7565b50505050565b6001600160a01b0382166120b8576040805162461bcd60e51b815260206004820181905260248201527f5665737465723a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b600a546120c59082611776565b600a556001600160a01b0382166000908152600d60205260409020546120eb9082611776565b6001600160a01b0383166000818152600d602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b03821661219e576040805162461bcd60e51b815260206004820181905260248201527f5665737465723a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b600b546121ab9082611776565b600b556001600160a01b0382166000908152600e60205260409020546121d19082611776565b6001600160a01b0383166000818152600e602090815260408083209490945583518581529351929391927f659523c479d006050ebc0d0e48fea36d1b2c5d45b2f31402ac6f8671fc84cc049281900390910190a35050565b600081836122785760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611edc578181015183820152602001611ec4565b50600083858161228457fe5b0495945050505050565b6060610e598484600085856122a2856123b4565b6122f3576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106123325780518252601f199092019160209182019101612313565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612394576040519150601f19603f3d011682016040523d82523d6000602084013e612399565b606091505b50915091506123a98282866123ba565b979650505050505050565b3b151590565b606083156123c95750816117ce565b8251156123d95782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315611edc578181015183820152602001611ec456fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00476f7665726e61626c653a20666f7262696464656e00000000000000000000005665737465723a206275726e20616d6f756e7420657863656564732062616c616e63655665737465723a206275726e2066726f6d20746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775665737465723a206d6178207665737461626c6520616d6f756e742065786365656465645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "stateVariables": {
      "totalSupply": {
        "details": "Returns the amount of tokens in existence."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23515,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "gov",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 42139,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 42141,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 42144,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "decimals",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 42146,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "vestingDuration",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 42148,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "esToken",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 42150,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "pairToken",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 42152,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "claimableToken",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 42155,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "rewardTracker",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 42158,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "totalSupply",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 42160,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "pairSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 42162,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "hasMaxVestableAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 42166,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "balances",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 42171,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "pairAmounts",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 42176,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "cumulativeClaimAmounts",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 42181,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "claimedAmounts",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 42185,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "lastVestingTimes",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 42190,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "transferredAverageStakedAmounts",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 42195,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "transferredCumulativeRewards",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 42200,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "cumulativeRewardDeductions",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 42205,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "bonusRewards",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 42209,
        "contract": "contracts/staking/Vester.sol:Vester",
        "label": "isHandler",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}