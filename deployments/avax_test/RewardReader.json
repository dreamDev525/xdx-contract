{
  "address": "0x794799510461a6fe02f4022b5c07A6fe002Ba18b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_depositTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTrackers",
          "type": "address[]"
        }
      ],
      "name": "getDepositBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTrackers",
          "type": "address[]"
        }
      ],
      "name": "getStakingInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_vesters",
          "type": "address[]"
        }
      ],
      "name": "getVestingInfoV2",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd085d4500b4213ee8712375fe6170e3fe4a0e4031ffcead37bb92db4e1c87232",
  "receipt": {
    "to": null,
    "from": "0xf5CA36c9873d61Bc28C117BD470981Ef6647A685",
    "contractAddress": "0x794799510461a6fe02f4022b5c07A6fe002Ba18b",
    "transactionIndex": 11,
    "gasUsed": "929600",
    "logsBloom": "0x
    "blockHash": "0xd206c82ceaf40280469f2c7a9920f3ea77e3c165a4e544415cbd1d670691bc62",
    "transactionHash": "0xd085d4500b4213ee8712375fe6170e3fe4a0e4031ffcead37bb92db4e1c87232",
    "logs": [],
    "blockNumber": 17664815,
    "cumulativeGasUsed": "2480667",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a5c1ec6ed734a994a4a7c4ed9bed389b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_depositTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTrackers\",\"type\":\"address[]\"}],\"name\":\"getDepositBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTrackers\",\"type\":\"address[]\"}],\"name\":\"getStakingInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_vesters\",\"type\":\"address[]\"}],\"name\":\"getVestingInfoV2\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/peripherals/RewardReader.sol\":\"RewardReader\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa3ce253082421a9e79d2b884ae6f60507b0cc73ea356674072091454c44cc556\",\"license\":\"MIT\"},\"contracts/peripherals/RewardReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\nimport \\\"../staking/interfaces/IVester.sol\\\";\\nimport \\\"../staking/interfaces/IRewardTracker.sol\\\";\\n\\ncontract RewardReader {\\n    using SafeMath for uint256;\\n\\n    function getDepositBalances(address _account, address[] memory _depositTokens, address[] memory _rewardTrackers) public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](_rewardTrackers.length);\\n        for (uint256 i = 0; i < _rewardTrackers.length; i++) {\\n            IRewardTracker rewardTracker = IRewardTracker(_rewardTrackers[i]);\\n            amounts[i] = rewardTracker.depositBalances(_account, _depositTokens[i]);\\n        }\\n        return amounts;\\n    }\\n\\n    function getStakingInfo(address _account, address[] memory _rewardTrackers) public view returns (uint256[] memory) {\\n        uint256 propsLength = 5;\\n        uint256[] memory amounts = new uint256[](_rewardTrackers.length * propsLength);\\n        for (uint256 i = 0; i < _rewardTrackers.length; i++) {\\n            IRewardTracker rewardTracker = IRewardTracker(_rewardTrackers[i]);\\n            amounts[i * propsLength] = rewardTracker.claimable(_account);\\n            amounts[i * propsLength + 1] = rewardTracker.tokensPerInterval();\\n            amounts[i * propsLength + 2] = rewardTracker.averageStakedAmounts(_account);\\n            amounts[i * propsLength + 3] = rewardTracker.cumulativeRewards(_account);\\n            amounts[i * propsLength + 4] = IERC20(_rewardTrackers[i]).totalSupply();\\n        }\\n        return amounts;\\n    }\\n\\n    function getVestingInfoV2(address _account, address[] memory _vesters) public view returns (uint256[] memory) {\\n        uint256 propsLength = 12;\\n        uint256[] memory amounts = new uint256[](_vesters.length * propsLength);\\n        for (uint256 i = 0; i < _vesters.length; i++) {\\n            IVester vester = IVester(_vesters[i]);\\n            IRewardTracker rewardTracker = IRewardTracker(vester.rewardTracker());\\n            amounts[i * propsLength] = vester.pairAmounts(_account);\\n            amounts[i * propsLength + 1] = vester.getVestedAmount(_account);\\n            amounts[i * propsLength + 2] = IERC20(_vesters[i]).balanceOf(_account);\\n            amounts[i * propsLength + 3] = vester.claimedAmounts(_account);\\n            amounts[i * propsLength + 4] = vester.claimable(_account);\\n            amounts[i * propsLength + 5] = vester.getMaxVestableAmount(_account);\\n            amounts[i * propsLength + 6] = vester.getCombinedAverageStakedAmount(_account);\\n            amounts[i * propsLength + 7] = rewardTracker.cumulativeRewards(_account);\\n            amounts[i * propsLength + 8] = vester.transferredCumulativeRewards(_account);\\n            amounts[i * propsLength + 9] = vester.bonusRewards(_account);\\n            amounts[i * propsLength + 10] = rewardTracker.averageStakedAmounts(_account);\\n            amounts[i * propsLength + 11] = vester.transferredAverageStakedAmounts(_account);\\n        }\\n        return amounts;\\n    }\\n}\\n\",\"keccak256\":\"0x2e6ea91becb8787c8120f4b9ee2c9d9ecd022e9abd1a0511072b32f94ec5495f\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IRewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardTracker {\\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n    function stakedAmounts(address _account) external view returns (uint256);\\n    function updateRewards() external;\\n    function stake(address _depositToken, uint256 _amount) external;\\n    function stakeForAccount(address _fundingAccount, address _account, address _depositToken, uint256 _amount) external;\\n    function unstake(address _depositToken, uint256 _amount) external;\\n    function unstakeForAccount(address _account, address _depositToken, uint256 _amount, address _receiver) external;\\n    function tokensPerInterval() external view returns (uint256);\\n    function claim(address _receiver) external returns (uint256);\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n    function claimable(address _account) external view returns (uint256);\\n    function averageStakedAmounts(address _account) external view returns (uint256);\\n    function cumulativeRewards(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaaacb5c485b9aaf2a290489fe212471580e5a7ba8ac022fe6d7fdd1e864a5330\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IVester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVester {\\n    function rewardTracker() external view returns (address);\\n\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n    function claimable(address _account) external view returns (uint256);\\n    function cumulativeClaimAmounts(address _account) external view returns (uint256);\\n    function claimedAmounts(address _account) external view returns (uint256);\\n    function pairAmounts(address _account) external view returns (uint256);\\n    function getVestedAmount(address _account) external view returns (uint256);\\n    function transferredAverageStakedAmounts(address _account) external view returns (uint256);\\n    function transferredCumulativeRewards(address _account) external view returns (uint256);\\n    function cumulativeRewardDeductions(address _account) external view returns (uint256);\\n    function bonusRewards(address _account) external view returns (uint256);\\n\\n    function transferStakeValues(address _sender, address _receiver) external;\\n    function setTransferredAverageStakedAmounts(address _account, uint256 _amount) external;\\n    function setTransferredCumulativeRewards(address _account, uint256 _amount) external;\\n    function setCumulativeRewardDeductions(address _account, uint256 _amount) external;\\n    function setBonusRewards(address _account, uint256 _amount) external;\\n\\n    function getMaxVestableAmount(address _account) external view returns (uint256);\\n    function getCombinedAverageStakedAmount(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xae96cdbfc636a9af965a3805d09626e578845b3e04eb54960c277cda55bc1855\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610fdb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063575157e414610046578063937a0be8146101c9578063e1fc2a381461027a575b600080fd5b6101796004803603606081101561005c57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561008657600080fd5b82018360208201111561009857600080fd5b803590602001918460208302840111600160201b831117156100b957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561010857600080fd5b82018360208201111561011a57600080fd5b803590602001918460208302840111600160201b8311171561013b57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061032b945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101b557818101518382015260200161019d565b505050509050019250505060405180910390f35b610179600480360360408110156101df57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561020957600080fd5b82018360208201111561021b57600080fd5b803590602001918460208302840111600160201b8311171561023c57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061045e945050505050565b6101796004803603604081101561029057600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156102ba57600080fd5b8201836020820111156102cc57600080fd5b803590602001918460208302840111600160201b831117156102ed57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506107ba945050505050565b60608082516001600160401b038111801561034557600080fd5b5060405190808252806020026020018201604052801561036f578160200160208202803683370190505b50905060005b835181101561045557600084828151811061038c57fe5b60200260200101519050806001600160a01b031663f5d9d63e888885815181106103b257fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561040757600080fd5b505afa15801561041b573d6000803e3d6000fd5b505050506040513d602081101561043157600080fd5b5051835184908490811061044157fe5b602090810291909101015250600101610375565b50949350505050565b60606000600590506060818451026001600160401b038111801561048157600080fd5b506040519080825280602002602001820160405280156104ab578160200160208202803683370190505b50905060005b84518110156104555760008582815181106104c857fe5b60200260200101519050806001600160a01b031663402914f5886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561051f57600080fd5b505afa158015610533573d6000803e3d6000fd5b505050506040513d602081101561054957600080fd5b50518351849084870290811061055b57fe5b602002602001018181525050806001600160a01b031663a8d936276040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a057600080fd5b505afa1580156105b4573d6000803e3d6000fd5b505050506040513d60208110156105ca57600080fd5b5051835184906001858802019081106105df57fe5b602002602001018181525050806001600160a01b031663a3180217886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561063857600080fd5b505afa15801561064c573d6000803e3d6000fd5b505050506040513d602081101561066257600080fd5b50518351849060028588020190811061067757fe5b602002602001018181525050806001600160a01b0316633792def3886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156106d057600080fd5b505afa1580156106e4573d6000803e3d6000fd5b505050506040513d60208110156106fa57600080fd5b50518351849060038588020190811061070f57fe5b60200260200101818152505085828151811061072757fe5b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561076757600080fd5b505afa15801561077b573d6000803e3d6000fd5b505050506040513d602081101561079157600080fd5b5051835184906004858802019081106107a657fe5b6020908102919091010152506001016104b1565b60606000600c90506060818451026001600160401b03811180156107dd57600080fd5b50604051908082528060200260200182016040528015610807578160200160208202803683370190505b50905060005b845181101561045557600085828151811061082457fe5b602002602001015190506000816001600160a01b0316636bcb411a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561086957600080fd5b505afa15801561087d573d6000803e3d6000fd5b505050506040513d602081101561089357600080fd5b505160408051635d50e72960e01b81526001600160a01b038b81166004830152915192935090841691635d50e72991602480820192602092909190829003018186803b1580156108e257600080fd5b505afa1580156108f6573d6000803e3d6000fd5b505050506040513d602081101561090c57600080fd5b50518451859085880290811061091e57fe5b602002602001018181525050816001600160a01b031663d5a73fdd896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561097757600080fd5b505afa15801561098b573d6000803e3d6000fd5b505050506040513d60208110156109a157600080fd5b5051845185906001868902019081106109b657fe5b6020026020010181815250508683815181106109ce57fe5b60200260200101516001600160a01b03166370a08231896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610a2257600080fd5b505afa158015610a36573d6000803e3d6000fd5b505050506040513d6020811015610a4c57600080fd5b505184518590600286890201908110610a6157fe5b602002602001018181525050816001600160a01b03166371417b32896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610aba57600080fd5b505afa158015610ace573d6000803e3d6000fd5b505050506040513d6020811015610ae457600080fd5b505184518590600386890201908110610af957fe5b602002602001018181525050816001600160a01b031663402914f5896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610b5257600080fd5b505afa158015610b66573d6000803e3d6000fd5b505050506040513d6020811015610b7c57600080fd5b505184518590600486890201908110610b9157fe5b602002602001018181525050816001600160a01b03166308f26c76896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610bea57600080fd5b505afa158015610bfe573d6000803e3d6000fd5b505050506040513d6020811015610c1457600080fd5b505184518590600586890201908110610c2957fe5b602002602001018181525050816001600160a01b03166345f01ee6896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610c8257600080fd5b505afa158015610c96573d6000803e3d6000fd5b505050506040513d6020811015610cac57600080fd5b505184518590600686890201908110610cc157fe5b602002602001018181525050806001600160a01b0316633792def3896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610d1a57600080fd5b505afa158015610d2e573d6000803e3d6000fd5b505050506040513d6020811015610d4457600080fd5b505184518590600786890201908110610d5957fe5b602002602001018181525050816001600160a01b031663b71bce2a896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610db257600080fd5b505afa158015610dc6573d6000803e3d6000fd5b505050506040513d6020811015610ddc57600080fd5b505184518590600886890201908110610df157fe5b602002602001018181525050816001600160a01b031663a2545fa5896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e4a57600080fd5b505afa158015610e5e573d6000803e3d6000fd5b505050506040513d6020811015610e7457600080fd5b505184518590600986890201908110610e8957fe5b602002602001018181525050806001600160a01b031663a3180217896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610ee257600080fd5b505afa158015610ef6573d6000803e3d6000fd5b505050506040513d6020811015610f0c57600080fd5b505184518590600a86890201908110610f2157fe5b602002602001018181525050816001600160a01b0316637337035c896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610f7a57600080fd5b505afa158015610f8e573d6000803e3d6000fd5b505050506040513d6020811015610fa457600080fd5b505184518590600b86890201908110610fb957fe5b6020908102919091010152505060010161080d56fea164736f6c634300060c000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063575157e414610046578063937a0be8146101c9578063e1fc2a381461027a575b600080fd5b6101796004803603606081101561005c57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561008657600080fd5b82018360208201111561009857600080fd5b803590602001918460208302840111600160201b831117156100b957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561010857600080fd5b82018360208201111561011a57600080fd5b803590602001918460208302840111600160201b8311171561013b57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061032b945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101b557818101518382015260200161019d565b505050509050019250505060405180910390f35b610179600480360360408110156101df57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561020957600080fd5b82018360208201111561021b57600080fd5b803590602001918460208302840111600160201b8311171561023c57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061045e945050505050565b6101796004803603604081101561029057600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156102ba57600080fd5b8201836020820111156102cc57600080fd5b803590602001918460208302840111600160201b831117156102ed57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506107ba945050505050565b60608082516001600160401b038111801561034557600080fd5b5060405190808252806020026020018201604052801561036f578160200160208202803683370190505b50905060005b835181101561045557600084828151811061038c57fe5b60200260200101519050806001600160a01b031663f5d9d63e888885815181106103b257fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561040757600080fd5b505afa15801561041b573d6000803e3d6000fd5b505050506040513d602081101561043157600080fd5b5051835184908490811061044157fe5b602090810291909101015250600101610375565b50949350505050565b60606000600590506060818451026001600160401b038111801561048157600080fd5b506040519080825280602002602001820160405280156104ab578160200160208202803683370190505b50905060005b84518110156104555760008582815181106104c857fe5b60200260200101519050806001600160a01b031663402914f5886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561051f57600080fd5b505afa158015610533573d6000803e3d6000fd5b505050506040513d602081101561054957600080fd5b50518351849084870290811061055b57fe5b602002602001018181525050806001600160a01b031663a8d936276040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a057600080fd5b505afa1580156105b4573d6000803e3d6000fd5b505050506040513d60208110156105ca57600080fd5b5051835184906001858802019081106105df57fe5b602002602001018181525050806001600160a01b031663a3180217886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561063857600080fd5b505afa15801561064c573d6000803e3d6000fd5b505050506040513d602081101561066257600080fd5b50518351849060028588020190811061067757fe5b602002602001018181525050806001600160a01b0316633792def3886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156106d057600080fd5b505afa1580156106e4573d6000803e3d6000fd5b505050506040513d60208110156106fa57600080fd5b50518351849060038588020190811061070f57fe5b60200260200101818152505085828151811061072757fe5b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561076757600080fd5b505afa15801561077b573d6000803e3d6000fd5b505050506040513d602081101561079157600080fd5b5051835184906004858802019081106107a657fe5b6020908102919091010152506001016104b1565b60606000600c90506060818451026001600160401b03811180156107dd57600080fd5b50604051908082528060200260200182016040528015610807578160200160208202803683370190505b50905060005b845181101561045557600085828151811061082457fe5b602002602001015190506000816001600160a01b0316636bcb411a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561086957600080fd5b505afa15801561087d573d6000803e3d6000fd5b505050506040513d602081101561089357600080fd5b505160408051635d50e72960e01b81526001600160a01b038b81166004830152915192935090841691635d50e72991602480820192602092909190829003018186803b1580156108e257600080fd5b505afa1580156108f6573d6000803e3d6000fd5b505050506040513d602081101561090c57600080fd5b50518451859085880290811061091e57fe5b602002602001018181525050816001600160a01b031663d5a73fdd896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561097757600080fd5b505afa15801561098b573d6000803e3d6000fd5b505050506040513d60208110156109a157600080fd5b5051845185906001868902019081106109b657fe5b6020026020010181815250508683815181106109ce57fe5b60200260200101516001600160a01b03166370a08231896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610a2257600080fd5b505afa158015610a36573d6000803e3d6000fd5b505050506040513d6020811015610a4c57600080fd5b505184518590600286890201908110610a6157fe5b602002602001018181525050816001600160a01b03166371417b32896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610aba57600080fd5b505afa158015610ace573d6000803e3d6000fd5b505050506040513d6020811015610ae457600080fd5b505184518590600386890201908110610af957fe5b602002602001018181525050816001600160a01b031663402914f5896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610b5257600080fd5b505afa158015610b66573d6000803e3d6000fd5b505050506040513d6020811015610b7c57600080fd5b505184518590600486890201908110610b9157fe5b602002602001018181525050816001600160a01b03166308f26c76896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610bea57600080fd5b505afa158015610bfe573d6000803e3d6000fd5b505050506040513d6020811015610c1457600080fd5b505184518590600586890201908110610c2957fe5b602002602001018181525050816001600160a01b03166345f01ee6896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610c8257600080fd5b505afa158015610c96573d6000803e3d6000fd5b505050506040513d6020811015610cac57600080fd5b505184518590600686890201908110610cc157fe5b602002602001018181525050806001600160a01b0316633792def3896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610d1a57600080fd5b505afa158015610d2e573d6000803e3d6000fd5b505050506040513d6020811015610d4457600080fd5b505184518590600786890201908110610d5957fe5b602002602001018181525050816001600160a01b031663b71bce2a896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610db257600080fd5b505afa158015610dc6573d6000803e3d6000fd5b505050506040513d6020811015610ddc57600080fd5b505184518590600886890201908110610df157fe5b602002602001018181525050816001600160a01b031663a2545fa5896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e4a57600080fd5b505afa158015610e5e573d6000803e3d6000fd5b505050506040513d6020811015610e7457600080fd5b505184518590600986890201908110610e8957fe5b602002602001018181525050806001600160a01b031663a3180217896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610ee257600080fd5b505afa158015610ef6573d6000803e3d6000fd5b505050506040513d6020811015610f0c57600080fd5b505184518590600a86890201908110610f2157fe5b602002602001018181525050816001600160a01b0316637337035c896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610f7a57600080fd5b505afa158015610f8e573d6000803e3d6000fd5b505050506040513d6020811015610fa457600080fd5b505184518590600b86890201908110610fb957fe5b6020908102919091010152505060010161080d56fea164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}