{
  "address": "0xe00043B6C5DAE37aaf6Af1dbe531E57FEe5Da8A0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "averageStakedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimForAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimableReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cumulativeRewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cumulativeRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inPrivateClaimingMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inPrivateStakingMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inPrivateTransferMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_depositTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_distributor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isDepositToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHandler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "previousCumulatedRewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isDepositToken",
          "type": "bool"
        }
      ],
      "name": "setDepositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_handler",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_inPrivateClaimingMode",
          "type": "bool"
        }
      ],
      "name": "setInPrivateClaimingMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_inPrivateStakingMode",
          "type": "bool"
        }
      ],
      "name": "setInPrivateStakingMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_inPrivateTransferMode",
          "type": "bool"
        }
      ],
      "name": "setInPrivateTransferMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundingAccount",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeForAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensPerInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalDepositSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "unstakeForAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb51e15153cbf814f78f8838a22b1b3e0513cc2c86764fd504bd0537d97e4c94f",
  "receipt": {
    "to": null,
    "from": "0xf5CA36c9873d61Bc28C117BD470981Ef6647A685",
    "contractAddress": "0xe00043B6C5DAE37aaf6Af1dbe531E57FEe5Da8A0",
    "transactionIndex": 2,
    "gasUsed": "2447199",
    "logsBloom": "0x
    "blockHash": "0xd8194ff2be6208f8062abc8c7bddb759b54ed794064214b6d12bea9cb37c6d3e",
    "transactionHash": "0xb51e15153cbf814f78f8838a22b1b3e0513cc2c86764fd504bd0537d97e4c94f",
    "logs": [],
    "blockNumber": 17665038,
    "cumulativeGasUsed": "2979712",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Fee XLX",
    "fXLX"
  ],
  "numDeployments": 1,
  "solcInputHash": "a5c1ec6ed734a994a4a7c4ed9bed389b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"averageStakedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cumulativeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inPrivateClaimingMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inPrivateStakingMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inPrivateTransferMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_depositTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDepositToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"previousCumulatedRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isDepositToken\",\"type\":\"bool\"}],\"name\":\"setDepositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inPrivateClaimingMode\",\"type\":\"bool\"}],\"name\":\"setInPrivateClaimingMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inPrivateStakingMode\",\"type\":\"bool\"}],\"name\":\"setInPrivateStakingMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inPrivateTransferMode\",\"type\":\"bool\"}],\"name\":\"setInPrivateTransferMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundingAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDepositSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"unstakeForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"totalSupply\":{\"details\":\"Returns the amount of tokens in existence.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/RewardTracker.sol\":\"RewardTracker\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract Governable {\\n    address public gov;\\n\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\",\"keccak256\":\"0xe719b0de64ee00468f6a985c8ef08ebdd271d99d6616308cbba458f78ed8c532\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa3ce253082421a9e79d2b884ae6f60507b0cc73ea356674072091454c44cc556\",\"license\":\"MIT\"},\"contracts/libraries/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf80766b21ea67a73c81e0dea4543375243938c8b223e29c5d783be61ab3f424c\",\"license\":\"MIT\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1845481964ebacf35afe1a006fa574793b52e698eba0a8db6e3d30202bc45429\",\"license\":\"MIT\"},\"contracts/libraries/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xae7a1e407ed171ecd3a0d3976875d6c58eefdccf831ebce6314ec94892dffc03\",\"license\":\"MIT\"},\"contracts/staking/RewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IRewardDistributor.sol\\\";\\nimport \\\"./interfaces/IRewardTracker.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\n\\n\\ncontract RewardTracker is IERC20, ReentrancyGuard, IRewardTracker, Governable {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n  uint256 public constant PRECISION = 1e30;\\n\\n  uint8 public constant decimals = 18;\\n\\n  bool public isInitialized;\\n\\n  string public name;\\n  string public symbol;\\n\\n  address public distributor;\\n  mapping(address => bool) public isDepositToken;\\n  mapping(address => mapping(address => uint256)) public override depositBalances;\\n  mapping(address => uint256) public totalDepositSupply;\\n\\n  uint256 public override totalSupply;\\n  mapping(address => uint256) public balances;\\n  mapping(address => mapping(address => uint256)) public allowances;\\n\\n  uint256 public cumulativeRewardPerToken;\\n  mapping(address => uint256) public override stakedAmounts;\\n  mapping(address => uint256) public claimableReward;\\n  mapping(address => uint256) public previousCumulatedRewardPerToken;\\n  mapping(address => uint256) public override cumulativeRewards;\\n  mapping(address => uint256) public override averageStakedAmounts;\\n\\n  bool public inPrivateTransferMode;\\n  bool public inPrivateStakingMode;\\n  bool public inPrivateClaimingMode;\\n  mapping(address => bool) public isHandler;\\n\\n  event Claim(address receiver, uint256 amount);\\n\\n  constructor(string memory _name, string memory _symbol) public {\\n    name = _name;\\n    symbol = _symbol;\\n  }\\n\\n  function initialize(address[] memory _depositTokens, address _distributor) external onlyGov {\\n    require(!isInitialized, \\\"RewardTracker: already initialized\\\");\\n    isInitialized = true;\\n\\n    for (uint256 i = 0; i < _depositTokens.length; i++) {\\n      address depositToken = _depositTokens[i];\\n      isDepositToken[depositToken] = true;\\n    }\\n\\n    distributor = _distributor;\\n  }\\n\\n  function setDepositToken(address _depositToken, bool _isDepositToken) external onlyGov {\\n    isDepositToken[_depositToken] = _isDepositToken;\\n  }\\n\\n  function setInPrivateTransferMode(bool _inPrivateTransferMode) external onlyGov {\\n    inPrivateTransferMode = _inPrivateTransferMode;\\n  }\\n\\n  function setInPrivateStakingMode(bool _inPrivateStakingMode) external onlyGov {\\n    inPrivateStakingMode = _inPrivateStakingMode;\\n  }\\n\\n  function setInPrivateClaimingMode(bool _inPrivateClaimingMode) external onlyGov {\\n    inPrivateClaimingMode = _inPrivateClaimingMode;\\n  }\\n\\n  function setHandler(address _handler, bool _isActive) external onlyGov {\\n    isHandler[_handler] = _isActive;\\n  }\\n\\n  // to help users who accidentally send their tokens to this contract\\n  function withdrawToken(\\n    address _token,\\n    address _account,\\n    uint256 _amount\\n  ) external onlyGov {\\n    IERC20(_token).safeTransfer(_account, _amount);\\n  }\\n\\n  function balanceOf(address _account) external view override returns (uint256) {\\n    return balances[_account];\\n  }\\n\\n  function stake(address _depositToken, uint256 _amount) external override nonReentrant {\\n    if (inPrivateStakingMode) {\\n      revert(\\\"RewardTracker: action not enabled\\\");\\n    }\\n    _stake(msg.sender, msg.sender, _depositToken, _amount);\\n  }\\n\\n  function stakeForAccount(\\n    address _fundingAccount,\\n    address _account,\\n    address _depositToken,\\n    uint256 _amount\\n  ) external override nonReentrant {\\n    _validateHandler();\\n    _stake(_fundingAccount, _account, _depositToken, _amount);\\n  }\\n\\n  function unstake(address _depositToken, uint256 _amount) external override nonReentrant {\\n    if (inPrivateStakingMode) {\\n      revert(\\\"RewardTracker: action not enabled\\\");\\n    }\\n    _unstake(msg.sender, _depositToken, _amount, msg.sender);\\n  }\\n\\n  function unstakeForAccount(\\n    address _account,\\n    address _depositToken,\\n    uint256 _amount,\\n    address _receiver\\n  ) external override nonReentrant {\\n    _validateHandler();\\n    _unstake(_account, _depositToken, _amount, _receiver);\\n  }\\n\\n  function transfer(address _recipient, uint256 _amount) external override returns (bool) {\\n    _transfer(msg.sender, _recipient, _amount);\\n    return true;\\n  }\\n\\n  function allowance(address _owner, address _spender) external view override returns (uint256) {\\n    return allowances[_owner][_spender];\\n  }\\n\\n  function approve(address _spender, uint256 _amount) external override returns (bool) {\\n    _approve(msg.sender, _spender, _amount);\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address _sender,\\n    address _recipient,\\n    uint256 _amount\\n  ) external override returns (bool) {\\n    if (isHandler[msg.sender]) {\\n      _transfer(_sender, _recipient, _amount);\\n      return true;\\n    }\\n\\n    uint256 nextAllowance = allowances[_sender][msg.sender].sub(\\n      _amount,\\n      \\\"RewardTracker: transfer amount exceeds allowance\\\"\\n    );\\n    _approve(_sender, msg.sender, nextAllowance);\\n    _transfer(_sender, _recipient, _amount);\\n    return true;\\n  }\\n\\n  function tokensPerInterval() external view override returns (uint256) {\\n    return IRewardDistributor(distributor).tokensPerInterval();\\n  }\\n\\n  function updateRewards() external override nonReentrant {\\n    _updateRewards(address(0));\\n  }\\n\\n  function claim(address _receiver) external override nonReentrant returns (uint256) {\\n    if (inPrivateClaimingMode) {\\n      revert(\\\"RewardTracker: action not enabled\\\");\\n    }\\n    return _claim(msg.sender, _receiver);\\n  }\\n\\n  function claimForAccount(address _account, address _receiver)\\n    external\\n    override\\n    nonReentrant\\n    returns (uint256)\\n  {\\n    _validateHandler();\\n    return _claim(_account, _receiver);\\n  }\\n\\n  function claimable(address _account) public view override returns (uint256) {\\n    uint256 stakedAmount = stakedAmounts[_account];\\n\\n    if (stakedAmount == 0) {\\n      return claimableReward[_account];\\n    }\\n    uint256 supply = totalSupply;\\n    uint256 pendingRewards = IRewardDistributor(distributor).pendingRewards().mul(PRECISION);\\n    uint256 nextCumulativeRewardPerToken = cumulativeRewardPerToken.add(pendingRewards.div(supply));\\n\\n    return\\n      claimableReward[_account].add(\\n        stakedAmount\\n          .mul(nextCumulativeRewardPerToken.sub(previousCumulatedRewardPerToken[_account]))\\n          .div(PRECISION)\\n      );\\n  }\\n\\n  function rewardToken() public view returns (address) {\\n    return IRewardDistributor(distributor).rewardToken();\\n  }\\n\\n  function _claim(address _account, address _receiver) private returns (uint256) {\\n    _updateRewards(_account);\\n\\n    uint256 tokenAmount = claimableReward[_account];\\n    claimableReward[_account] = 0;\\n\\n    if (tokenAmount > 0) {\\n      IERC20(rewardToken()).safeTransfer(_receiver, tokenAmount);\\n      emit Claim(_account, tokenAmount);\\n    }\\n\\n    return tokenAmount;\\n  }\\n\\n  function _mint(address _account, uint256 _amount) internal {\\n    require(_account != address(0), \\\"RewardTracker: mint to the zero address\\\");\\n\\n    totalSupply = totalSupply.add(_amount);\\n    balances[_account] = balances[_account].add(_amount);\\n\\n    emit Transfer(address(0), _account, _amount);\\n  }\\n\\n  function _burn(address _account, uint256 _amount) internal {\\n    require(_account != address(0), \\\"RewardTracker: burn from the zero address\\\");\\n\\n    balances[_account] = balances[_account].sub(\\n      _amount,\\n      \\\"RewardTracker: burn amount exceeds balance\\\"\\n    );\\n    totalSupply = totalSupply.sub(_amount);\\n\\n    emit Transfer(_account, address(0), _amount);\\n  }\\n\\n  function _transfer(\\n    address _sender,\\n    address _recipient,\\n    uint256 _amount\\n  ) private {\\n    require(_sender != address(0), \\\"RewardTracker: transfer from the zero address\\\");\\n    require(_recipient != address(0), \\\"RewardTracker: transfer to the zero address\\\");\\n\\n    if (inPrivateTransferMode) {\\n      _validateHandler();\\n    }\\n\\n    balances[_sender] = balances[_sender].sub(\\n      _amount,\\n      \\\"RewardTracker: transfer amount exceeds balance\\\"\\n    );\\n    balances[_recipient] = balances[_recipient].add(_amount);\\n\\n    emit Transfer(_sender, _recipient, _amount);\\n  }\\n\\n  function _approve(\\n    address _owner,\\n    address _spender,\\n    uint256 _amount\\n  ) private {\\n    require(_owner != address(0), \\\"RewardTracker: approve from the zero address\\\");\\n    require(_spender != address(0), \\\"RewardTracker: approve to the zero address\\\");\\n\\n    allowances[_owner][_spender] = _amount;\\n\\n    emit Approval(_owner, _spender, _amount);\\n  }\\n\\n  function _validateHandler() private view {\\n    require(isHandler[msg.sender], \\\"RewardTracker: forbidden\\\");\\n  }\\n\\n  function _stake(\\n    address _fundingAccount,\\n    address _account,\\n    address _depositToken,\\n    uint256 _amount\\n  ) private {\\n    require(_amount > 0, \\\"RewardTracker: invalid _amount\\\");\\n    require(isDepositToken[_depositToken], \\\"RewardTracker: invalid _depositToken\\\");\\n\\n    IERC20(_depositToken).safeTransferFrom(_fundingAccount, address(this), _amount);\\n\\n    _updateRewards(_account);\\n\\n    stakedAmounts[_account] = stakedAmounts[_account].add(_amount);\\n    depositBalances[_account][_depositToken] = depositBalances[_account][_depositToken].add(\\n      _amount\\n    );\\n    totalDepositSupply[_depositToken] = totalDepositSupply[_depositToken].add(_amount);\\n\\n    _mint(_account, _amount);\\n  }\\n\\n  function _unstake(\\n    address _account,\\n    address _depositToken,\\n    uint256 _amount,\\n    address _receiver\\n  ) private {\\n    require(_amount > 0, \\\"RewardTracker: invalid _amount\\\");\\n    require(isDepositToken[_depositToken], \\\"RewardTracker: invalid _depositToken\\\");\\n\\n    _updateRewards(_account);\\n\\n    uint256 stakedAmount = stakedAmounts[_account];\\n    require(stakedAmounts[_account] >= _amount, \\\"RewardTracker: _amount exceeds stakedAmount\\\");\\n\\n    stakedAmounts[_account] = stakedAmount.sub(_amount);\\n\\n    uint256 depositBalance = depositBalances[_account][_depositToken];\\n    require(depositBalance >= _amount, \\\"RewardTracker: _amount exceeds depositBalance\\\");\\n    depositBalances[_account][_depositToken] = depositBalance.sub(_amount);\\n    totalDepositSupply[_depositToken] = totalDepositSupply[_depositToken].sub(_amount);\\n\\n    _burn(_account, _amount);\\n    IERC20(_depositToken).safeTransfer(_receiver, _amount);\\n  }\\n\\n  function _updateRewards(address _account) private {\\n    uint256 blockReward = IRewardDistributor(distributor).distribute();\\n\\n    uint256 supply = totalSupply;\\n    uint256 _cumulativeRewardPerToken = cumulativeRewardPerToken;\\n    if (supply > 0 && blockReward > 0) {\\n      _cumulativeRewardPerToken = _cumulativeRewardPerToken.add(\\n        blockReward.mul(PRECISION).div(supply)\\n      );\\n      cumulativeRewardPerToken = _cumulativeRewardPerToken;\\n    }\\n\\n    // cumulativeRewardPerToken can only increase\\n    // so if cumulativeRewardPerToken is zero, it means there are no rewards yet\\n    if (_cumulativeRewardPerToken == 0) {\\n      return;\\n    }\\n\\n    if (_account != address(0)) {\\n      uint256 stakedAmount = stakedAmounts[_account];\\n      uint256 accountReward = stakedAmount\\n        .mul(_cumulativeRewardPerToken.sub(previousCumulatedRewardPerToken[_account]))\\n        .div(PRECISION);\\n      uint256 _claimableReward = claimableReward[_account].add(accountReward);\\n\\n      claimableReward[_account] = _claimableReward;\\n      previousCumulatedRewardPerToken[_account] = _cumulativeRewardPerToken;\\n\\n      if (_claimableReward > 0 && stakedAmounts[_account] > 0) {\\n        uint256 nextCumulativeReward = cumulativeRewards[_account].add(accountReward);\\n\\n        averageStakedAmounts[_account] = averageStakedAmounts[_account]\\n          .mul(cumulativeRewards[_account])\\n          .div(nextCumulativeReward)\\n          .add(stakedAmount.mul(accountReward).div(nextCumulativeReward));\\n\\n        cumulativeRewards[_account] = nextCumulativeReward;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa0b67f9de7ba3d7ebe91c153e3c95379d7a9ff4617fda9a1b47458c1a30adfae\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IRewardDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardDistributor {\\n    function rewardToken() external view returns (address);\\n    function tokensPerInterval() external view returns (uint256);\\n    function pendingRewards() external view returns (uint256);\\n    function distribute() external returns (uint256);\\n}\\n\",\"keccak256\":\"0xf02a9e3f0cdece5a83f2e43a5a6eee22acc56ef70bef1274db74b30c64260256\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IRewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardTracker {\\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n    function stakedAmounts(address _account) external view returns (uint256);\\n    function updateRewards() external;\\n    function stake(address _depositToken, uint256 _amount) external;\\n    function stakeForAccount(address _fundingAccount, address _account, address _depositToken, uint256 _amount) external;\\n    function unstake(address _depositToken, uint256 _amount) external;\\n    function unstakeForAccount(address _account, address _depositToken, uint256 _amount, address _receiver) external;\\n    function tokensPerInterval() external view returns (uint256);\\n    function claim(address _receiver) external returns (uint256);\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n    function claimable(address _account) external view returns (uint256);\\n    function averageStakedAmounts(address _account) external view returns (uint256);\\n    function cumulativeRewards(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaaacb5c485b9aaf2a290489fe212471580e5a7ba8ac022fe6d7fdd1e864a5330\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102355760003560e01c806355b6ed5c1161013757806355b6ed5c1461065d5780635a47a1a71461068b57806370a08231146106aa578063790b5a6c146106d057806395d89b411461070c5780639cb7de4b14610714578063a318021714610742578063a8d9362714610768578063a9059cbb14610770578063aaf5eb681461079c578063adc9772e146107a4578063b89e45b3146107d0578063bfe10928146107f6578063c2a672e0146107fe578063c5fa27301461082a578063cfad57a214610832578063dd62ed3e14610858578063dfbaefb114610886578063e44b75581461088e578063e9503425146108bc578063f5d9d63e146108e2578063f5fc507614610910578063f76033d314610918578063f7c618c11461092057610235565b806301e336671461023a57806306fdde0314610272578063095ea7b3146102ef578063098bf59d1461032f57806310c1c1031461036b578063126082cf146103a357806312d43a51146103ab57806313e82e7a146103cf57806318160ddd146103fd5780631d30d5bc146104055780631e83409a1461042457806323b872dd1461044a57806327e235e314610480578063313ce567146104a65780633792def3146104c4578063392e53cd146104ea5780633cd7f700146104f25780633e158b0c14610511578063402914f51461051957806344a084111461053f578063462d0b2e1461056557806346ea87af14610611578063552ce1dc14610637575b600080fd5b6102706004803603606081101561025057600080fd5b506001600160a01b03813581169160208101359091169060400135610928565b005b61027a61098e565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102b457818101518382015260200161029c565b50505050905090810190601f1680156102e15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61031b6004803603604081101561030557600080fd5b506001600160a01b038135169060200135610a19565b604080519115158252519081900360200190f35b6102706004803603608081101561034557600080fd5b506001600160a01b03813581169160208101358216916040820135916060013516610a30565b6103916004803603602081101561038157600080fd5b50356001600160a01b0316610a9a565b60408051918252519081900360200190f35b610391610aac565b6103b3610ab2565b604080516001600160a01b039092168252519081900360200190f35b610391600480360360408110156103e557600080fd5b506001600160a01b0381358116916020013516610ac1565b610391610b2c565b6102706004803603602081101561041b57600080fd5b50351515610b32565b6103916004803603602081101561043a57600080fd5b50356001600160a01b0316610b99565b61031b6004803603606081101561046057600080fd5b506001600160a01b03813581169160208101359091169060400135610c43565b6103916004803603602081101561049657600080fd5b50356001600160a01b0316610cdd565b6104ae610cef565b6040805160ff9092168252519081900360200190f35b610391600480360360208110156104da57600080fd5b50356001600160a01b0316610cf4565b61031b610d06565b6102706004803603602081101561050857600080fd5b50351515610d16565b610270610d7f565b6103916004803603602081101561052f57600080fd5b50356001600160a01b0316610ddc565b6103916004803603602081101561055557600080fd5b50356001600160a01b0316610f3a565b6102706004803603604081101561057b57600080fd5b810190602081018135600160201b81111561059557600080fd5b8201836020820111156105a757600080fd5b803590602001918460208302840111600160201b831117156105c857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b03169150610f4c9050565b61031b6004803603602081101561062757600080fd5b50356001600160a01b031661106f565b6103916004803603602081101561064d57600080fd5b50356001600160a01b0316611084565b6103916004803603604081101561067357600080fd5b506001600160a01b0381358116916020013516611096565b610270600480360360208110156106a157600080fd5b503515156110b3565b610391600480360360208110156106c057600080fd5b50356001600160a01b0316611113565b610270600480360360808110156106e657600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013561112e565b61027a61118d565b6102706004803603604081101561072a57600080fd5b506001600160a01b03813516906020013515156111e8565b6103916004803603602081101561075857600080fd5b50356001600160a01b0316611260565b610391611272565b61031b6004803603604081101561078657600080fd5b506001600160a01b0381351690602001356112f3565b610391611300565b610270600480360360408110156107ba57600080fd5b506001600160a01b038135169060200135611310565b61031b600480360360208110156107e657600080fd5b50356001600160a01b03166113b7565b6103b36113cc565b6102706004803603604081101561081457600080fd5b506001600160a01b0381351690602001356113db565b61031b611479565b6102706004803603602081101561084857600080fd5b50356001600160a01b0316611487565b6103916004803603604081101561086e57600080fd5b506001600160a01b03813581169160200135166114f6565b61031b611521565b610270600480360360408110156108a457600080fd5b506001600160a01b038135169060200135151561152a565b610391600480360360208110156108d257600080fd5b50356001600160a01b03166115a2565b610391600480360360408110156108f857600080fd5b506001600160a01b03813581169160200135166115b4565b6103916115d1565b61031b6115d7565b6103b36115e6565b6001546001600160a01b03163314610975576040805162461bcd60e51b81526020600482015260156024820152600080516020612724833981519152604482015290519081900360640190fd5b6109896001600160a01b0384168383611636565b505050565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610a115780601f106109e657610100808354040283529160200191610a11565b820191906000526020600020905b8154815290600101906020018083116109f457829003601f168201915b505050505081565b6000610a26338484611688565b5060015b92915050565b60026000541415610a76576040805162461bcd60e51b815260206004820152601f6024820152600080516020612684833981519152604482015290519081900360640190fd5b6002600055610a83611774565b610a8f848484846117d5565b505060016000555050565b600c6020526000908152604090205481565b61271081565b6001546001600160a01b031681565b600060026000541415610b09576040805162461bcd60e51b815260206004820152601f6024820152600080516020612684833981519152604482015290519081900360640190fd5b6002600055610b16611774565b610b2083836119e3565b60016000559392505050565b60085481565b6001546001600160a01b03163314610b7f576040805162461bcd60e51b81526020600482015260156024820152600080516020612724833981519152604482015290519081900360640190fd5b601180549115156101000261ff0019909216919091179055565b600060026000541415610be1576040805162461bcd60e51b815260206004820152601f6024820152600080516020612684833981519152604482015290519081900360640190fd5b600260005560115462010000900460ff1615610c2e5760405162461bcd60e51b81526004018080602001828103825260218152602001806128f46021913960400191505060405180910390fd5b610c3833836119e3565b600160005592915050565b3360009081526012602052604081205460ff1615610c6e57610c66848484611a79565b506001610cd6565b6000610cb88360405180606001604052806030815260200161289a603091396001600160a01b0388166000908152600a602090815260408083203384529091529020549190611bcc565b9050610cc5853383611688565b610cd0858585611a79565b60019150505b9392505050565b60096020526000908152604090205481565b601281565b600f6020526000908152604090205481565b600154600160a01b900460ff1681565b6001546001600160a01b03163314610d63576040805162461bcd60e51b81526020600482015260156024820152600080516020612724833981519152604482015290519081900360640190fd5b60118054911515620100000262ff000019909216919091179055565b60026000541415610dc5576040805162461bcd60e51b815260206004820152601f6024820152600080516020612684833981519152604482015290519081900360640190fd5b60026000908155610dd590611c63565b6001600055565b6001600160a01b0381166000908152600c602052604081205480610e1a5750506001600160a01b0381166000908152600d6020526040902054610f35565b60085460048054604080516376f69fed60e11b81529051600093610ea79368327cb2734119d3b7a9601e1b936001600160a01b039091169263eded3fda92828101926020929190829003018186803b158015610e7557600080fd5b505afa158015610e89573d6000803e3d6000fd5b505050506040513d6020811015610e9f57600080fd5b505190611eb3565b90506000610ec1610eb88385611f0c565b600b5490611f4b565b6001600160a01b0387166000908152600e6020526040902054909150610f2e90610f0f9068327cb2734119d3b7a9601e1b90610f0990610f02908690611fa3565b8890611eb3565b90611f0c565b6001600160a01b0388166000908152600d602052604090205490611f4b565b9450505050505b919050565b600e6020526000908152604090205481565b6001546001600160a01b03163314610f99576040805162461bcd60e51b81526020600482015260156024820152600080516020612724833981519152604482015290519081900360640190fd5b600154600160a01b900460ff1615610fe25760405162461bcd60e51b81526004018080602001828103825260228152602001806128046022913960400191505060405180910390fd5b6001805460ff60a01b1916600160a01b17905560005b825181101561104b57600083828151811061100f57fe5b6020908102919091018101516001600160a01b03166000908152600590915260409020805460ff19166001908117909155919091019050610ff8565b50600480546001600160a01b0319166001600160a01b039290921691909117905550565b60126020526000908152604090205460ff1681565b60076020526000908152604090205481565b600a60209081526000928352604080842090915290825290205481565b6001546001600160a01b03163314611100576040805162461bcd60e51b81526020600482015260156024820152600080516020612724833981519152604482015290519081900360640190fd5b6011805460ff1916911515919091179055565b6001600160a01b031660009081526009602052604090205490565b60026000541415611174576040805162461bcd60e51b815260206004820152601f6024820152600080516020612684833981519152604482015290519081900360640190fd5b6002600055611181611774565b610a8f84848484611fe5565b6003805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a115780601f106109e657610100808354040283529160200191610a11565b6001546001600160a01b03163314611235576040805162461bcd60e51b81526020600482015260156024820152600080516020612724833981519152604482015290519081900360640190fd5b6001600160a01b03919091166000908152601260205260409020805460ff1916911515919091179055565b60106020526000908152604090205481565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663a8d936276040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c257600080fd5b505afa1580156112d6573d6000803e3d6000fd5b505050506040513d60208110156112ec57600080fd5b5051905090565b6000610a26338484611a79565b68327cb2734119d3b7a9601e1b81565b60026000541415611356576040805162461bcd60e51b815260206004820152601f6024820152600080516020612684833981519152604482015290519081900360640190fd5b6002600055601154610100900460ff16156113a25760405162461bcd60e51b81526004018080602001828103825260218152602001806128f46021913960400191505060405180910390fd5b6113ae33338484611fe5565b50506001600055565b60056020526000908152604090205460ff1681565b6004546001600160a01b031681565b60026000541415611421576040805162461bcd60e51b815260206004820152601f6024820152600080516020612684833981519152604482015290519081900360640190fd5b6002600055601154610100900460ff161561146d5760405162461bcd60e51b81526004018080602001828103825260218152602001806128f46021913960400191505060405180910390fd5b6113ae338383336117d5565b601154610100900460ff1681565b6001546001600160a01b031633146114d4576040805162461bcd60e51b81526020600482015260156024820152600080516020612724833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b039182166000908152600a6020908152604080832093909416825291909152205490565b60115460ff1681565b6001546001600160a01b03163314611577576040805162461bcd60e51b81526020600482015260156024820152600080516020612724833981519152604482015290519081900360640190fd5b6001600160a01b03919091166000908152600560205260409020805460ff1916911515919091179055565b600d6020526000908152604090205481565b600660209081526000928352604080842090915290825290205481565b600b5481565b60115462010000900460ff1681565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c257600080fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261098990849061216e565b6001600160a01b0383166116cd5760405162461bcd60e51b815260040180806020018281038252602c8152602001806126cf602c913960400191505060405180910390fd5b6001600160a01b0382166117125760405162461bcd60e51b815260040180806020018281038252602a8152602001806127b9602a913960400191505060405180910390fd5b6001600160a01b038084166000818152600a6020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b3360009081526012602052604090205460ff166117d3576040805162461bcd60e51b81526020600482015260186024820152772932bbb0b9322a3930b1b5b2b91d103337b93134b23232b760411b604482015290519081900360640190fd5b565b6000821161182a576040805162461bcd60e51b815260206004820152601e60248201527f526577617264547261636b65723a20696e76616c6964205f616d6f756e740000604482015290519081900360640190fd5b6001600160a01b03831660009081526005602052604090205460ff166118815760405162461bcd60e51b81526004018080602001828103825260248152602001806127956024913960400191505060405180910390fd5b61188a84611c63565b6001600160a01b0384166000908152600c6020526040902054828110156118e25760405162461bcd60e51b815260040180806020018281038252602b8152602001806126a4602b913960400191505060405180910390fd5b6118ec8184611fa3565b6001600160a01b038087166000908152600c60209081526040808320949094556006815283822092881682529190915220548381101561195d5760405162461bcd60e51b815260040180806020018281038252602d815260200180612915602d913960400191505060405180910390fd5b6119678185611fa3565b6001600160a01b038088166000908152600660209081526040808320938a1683529281528282209390935560079092529020546119a49085611fa3565b6001600160a01b0386166000908152600760205260409020556119c7868561221f565b6119db6001600160a01b0386168486611636565b505050505050565b60006119ee83611c63565b6001600160a01b0383166000908152600d6020526040812080549190558015610cd657611a2e8382611a1e6115e6565b6001600160a01b03169190611636565b604080516001600160a01b03861681526020810183905281517f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4929181900390910190a19392505050565b6001600160a01b038316611abe5760405162461bcd60e51b815260040180806020018281038252602d815260200180612826602d913960400191505060405180910390fd5b6001600160a01b038216611b035760405162461bcd60e51b815260040180806020018281038252602b815260200180612744602b913960400191505060405180910390fd5b60115460ff1615611b1657611b16611774565b611b53816040518060600160405280602e8152602001612942602e91396001600160a01b0386166000908152600960205260409020549190611bcc565b6001600160a01b038085166000908152600960205260408082209390935590841681522054611b829082611f4b565b6001600160a01b03808416600081815260096020908152604091829020949094558051858152905191939287169260008051602061287a83398151915292918290030190a3505050565b60008184841115611c5b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c20578181015183820152602001611c08565b50505050905090810190601f168015611c4d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663e4fc6b6d6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611cb557600080fd5b505af1158015611cc9573d6000803e3d6000fd5b505050506040513d6020811015611cdf57600080fd5b5051600854600b54919250908115801590611cfa5750600083115b15611d2b57611d23611d1c83610f098668327cb2734119d3b7a9601e1b611eb3565b8290611f4b565b600b81905590505b80611d3857505050611eb0565b6001600160a01b03841615611eac576001600160a01b0384166000908152600c6020908152604080832054600e909252822054909190611d969068327cb2734119d3b7a9601e1b90610f0990611d8f908790611fa3565b8590611eb3565b6001600160a01b0387166000908152600d602052604081205491925090611dbd9083611f4b565b6001600160a01b0388166000908152600d60209081526040808320849055600e909152902085905590508015801590611e0d57506001600160a01b0387166000908152600c602052604090205415155b15611ea8576001600160a01b0387166000908152600f6020526040812054611e359084611f4b565b9050611e82611e4882610f098787611eb3565b6001600160a01b038a166000908152600f6020908152604080832054601090925290912054611e7c918591610f0991611eb3565b90611f4b565b6001600160a01b038916600090815260106020908152604080832093909355600f905220555b5050505b5050505b50565b600082611ec257506000610a2a565b82820282848281611ecf57fe5b0414610cd65760405162461bcd60e51b81526004018080602001828103825260218152602001806127e36021913960400191505060405180910390fd5b6000610cd683836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b8152506122fd565b600082820183811015610cd6576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b6000610cd683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611bcc565b6000811161203a576040805162461bcd60e51b815260206004820152601e60248201527f526577617264547261636b65723a20696e76616c6964205f616d6f756e740000604482015290519081900360640190fd5b6001600160a01b03821660009081526005602052604090205460ff166120915760405162461bcd60e51b81526004018080602001828103825260248152602001806127956024913960400191505060405180910390fd5b6120a66001600160a01b038316853084612362565b6120af83611c63565b6001600160a01b0383166000908152600c60205260409020546120d29082611f4b565b6001600160a01b038085166000908152600c602090815260408083209490945560068152838220928616825291909152205461210e9082611f4b565b6001600160a01b038085166000908152600660209081526040808320938716835292815282822093909355600790925290205461214b9082611f4b565b6001600160a01b038316600090815260076020526040902055611eac83826123bc565b60606121c3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661247a9092919063ffffffff16565b805190915015610989578080602001905160208110156121e257600080fd5b50516109895760405162461bcd60e51b815260040180806020018281038252602a8152602001806128ca602a913960400191505060405180910390fd5b6001600160a01b0382166122645760405162461bcd60e51b81526004018080602001828103825260298152602001806126fb6029913960400191505060405180910390fd5b6122a1816040518060600160405280602a815260200161265a602a91396001600160a01b0385166000908152600960205260409020549190611bcc565b6001600160a01b0383166000908152600960205260409020556008546122c79082611fa3565b6008556040805182815290516000916001600160a01b0385169160008051602061287a8339815191529181900360200190a35050565b6000818361234c5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611c20578181015183820152602001611c08565b50600083858161235857fe5b0495945050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611eac90859061216e565b6001600160a01b0382166124015760405162461bcd60e51b81526004018080602001828103825260278152602001806128536027913960400191505060405180910390fd5b60085461240e9082611f4b565b6008556001600160a01b0382166000908152600960205260409020546124349082611f4b565b6001600160a01b038316600081815260096020908152604080832094909455835185815293519293919260008051602061287a8339815191529281900390910190a35050565b60606124898484600085612491565b949350505050565b6060824710156124d25760405162461bcd60e51b815260040180806020018281038252602681526020018061276f6026913960400191505060405180910390fd5b6124db856125ed565b61252c576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061256b5780518252601f19909201916020918201910161254c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146125cd576040519150601f19603f3d011682016040523d82523d6000602084013e6125d2565b606091505b50915091506125e28282866125f3565b979650505050505050565b3b151590565b60608315612602575081610cd6565b8251156126125782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315611c20578181015183820152602001611c0856fe526577617264547261636b65723a206275726e20616d6f756e7420657863656564732062616c616e63655265656e7472616e637947756172643a207265656e7472616e742063616c6c00526577617264547261636b65723a205f616d6f756e742065786365656473207374616b6564416d6f756e74526577617264547261636b65723a20617070726f76652066726f6d20746865207a65726f2061646472657373526577617264547261636b65723a206275726e2066726f6d20746865207a65726f2061646472657373476f7665726e61626c653a20666f7262696464656e0000000000000000000000526577617264547261636b65723a207472616e7366657220746f20746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c526577617264547261636b65723a20696e76616c6964205f6465706f736974546f6b656e526577617264547261636b65723a20617070726f766520746f20746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77526577617264547261636b65723a20616c726561647920696e697469616c697a6564526577617264547261636b65723a207472616e736665722066726f6d20746865207a65726f2061646472657373526577617264547261636b65723a206d696e7420746f20746865207a65726f2061646472657373ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef526577617264547261636b65723a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564526577617264547261636b65723a20616374696f6e206e6f7420656e61626c6564526577617264547261636b65723a205f616d6f756e742065786365656473206465706f73697442616c616e6365526577617264547261636b65723a207472616e7366657220616d6f756e7420657863656564732062616c616e6365a164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "stateVariables": {
      "totalSupply": {
        "details": "Returns the amount of tokens in existence."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23515,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "gov",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 40395,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "isInitialized",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 40397,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 40399,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 40401,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "distributor",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 40405,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "isDepositToken",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 40412,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "depositBalances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 40416,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "totalDepositSupply",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 40419,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "totalSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 40423,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "balances",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 40429,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "allowances",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 40431,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "cumulativeRewardPerToken",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 40436,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "stakedAmounts",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 40440,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "claimableReward",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 40444,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "previousCumulatedRewardPerToken",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 40449,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "cumulativeRewards",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 40454,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "averageStakedAmounts",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 40456,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "inPrivateTransferMode",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 40458,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "inPrivateStakingMode",
        "offset": 1,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 40460,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "inPrivateClaimingMode",
        "offset": 2,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 40464,
        "contract": "contracts/staking/RewardTracker.sol:RewardTracker",
        "label": "isHandler",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}