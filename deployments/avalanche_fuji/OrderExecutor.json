{
  "address": "0xC4148521912350A304EBADA15a1ab29245f8DA2d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_orderBook",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "executeDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "executeIncreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "executeSwapOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderBook",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3d90520fac83b27974dfd361f8e4b98a755fbd8fb80dd9f23a0b15fa286db137",
  "receipt": {
    "to": null,
    "from": "0xf5CA36c9873d61Bc28C117BD470981Ef6647A685",
    "contractAddress": "0xC4148521912350A304EBADA15a1ab29245f8DA2d",
    "transactionIndex": 1,
    "gasUsed": "598767",
    "logsBloom": "0x
    "blockHash": "0xfb45ebea2df018630d2aab01586f4be1e3e5921e3078f1272f4e22db03e4f597",
    "transactionHash": "0x3d90520fac83b27974dfd361f8e4b98a755fbd8fb80dd9f23a0b15fa286db137",
    "logs": [],
    "blockNumber": 16887927,
    "cumulativeGasUsed": "731974",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9679810001E7e33E8A4f49370BB72059E6D960EB",
    "0x39d3B79BacfA1f0E6D2ceE87Edb4d80d2A275440"
  ],
  "numDeployments": 1,
  "solcInputHash": "38f125bf9344c296031e870b443ff3d2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_orderBook\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"executeDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"executeIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"executeSwapOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/OrderExecutor.sol\":\"OrderExecutor\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/core/OrderExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IOrderBook.sol\\\";\\nimport \\\"../peripherals/interfaces/ITimelock.sol\\\";\\n\\ncontract OrderExecutor {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    address public vault;\\n    address public orderBook;\\n\\n    constructor(address _vault, address _orderBook) public {\\n        require(_vault != address(0) && _orderBook != address(0), \\\"OrderExecutor: invalid address\\\");\\n        vault = _vault;\\n        orderBook = _orderBook;\\n    }\\n\\n    function executeSwapOrder(address _account, uint256 _orderIndex, address payable _feeReceiver) external {\\n        IOrderBook(orderBook).executeSwapOrder(_account, _orderIndex, _feeReceiver);\\n    }\\n\\n    function executeIncreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) external {\\n        _validateIncreaseOrder(_address, _orderIndex);\\n        address timelock = IVault(vault).gov();\\n        ITimelock(timelock).setIsLeverageEnabled(vault, true);\\n        IOrderBook(orderBook).executeIncreaseOrder(_address, _orderIndex, _feeReceiver);\\n        ITimelock(timelock).setIsLeverageEnabled(vault, false);\\n    }\\n\\n    function executeDecreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) external {\\n        IOrderBook(orderBook).executeDecreaseOrder(_address, _orderIndex, _feeReceiver);\\n    }\\n\\n    function _validateIncreaseOrder(address _account, uint256 _orderIndex) internal view {\\n        (\\n            address _purchaseToken,\\n            uint256 _purchaseTokenAmount,\\n            address _collateralToken,\\n            address _indexToken,\\n            uint256 _sizeDelta,\\n            bool _isLong,\\n            , // triggerPrice\\n            , // triggerAboveThreshold\\n            // executionFee\\n        ) = IOrderBook(orderBook).getIncreaseOrder(_account, _orderIndex);\\n\\n        // shorts are okay\\n        if (!_isLong) { return; }\\n\\n        // if the position size is not increasing, this is a collateral deposit\\n        require(_sizeDelta > 0, \\\"OrderExecutor: long deposit\\\");\\n\\n        IVault _vault = IVault(vault);\\n        (uint256 size, uint256 collateral, , , , , , ) = _vault.getPosition(_account, _collateralToken, _indexToken, _isLong);\\n\\n        // if there is no existing position, do not charge a fee\\n        if (size == 0) { return; }\\n\\n        uint256 nextSize = size.add(_sizeDelta);\\n        uint256 collateralDelta = _vault.tokenToUsdMin(_purchaseToken, _purchaseTokenAmount);\\n        uint256 nextCollateral = collateral.add(collateralDelta);\\n\\n        uint256 prevLeverage = size.mul(BASIS_POINTS_DIVISOR).div(collateral);\\n        // add 100 to allow for a maximum of a 1% decrease since there might be some swap fees taken from the collateral\\n        uint256 nextLeverageWithBuffer = nextSize.mul(BASIS_POINTS_DIVISOR + 100).div(nextCollateral);\\n\\n        require(nextLeverageWithBuffer >= prevLeverage, \\\"OrderExecutor: long leverage decrease\\\");\\n    }\\n}\",\"keccak256\":\"0xd83cbda82c54160478211abda9be4f3d7cbaa8c406127503c447f66999f7ffb4\",\"license\":\"MIT\"},\"contracts/core/interfaces/IOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IOrderBook {\\n\\tfunction getSwapOrder(address _account, uint256 _orderIndex) external view returns (\\n        address path0, \\n        address path1,\\n        address path2,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    );\\n\\n    function getIncreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address purchaseToken, \\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function getDecreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function executeSwapOrder(address, uint256, address payable) external;\\n    function executeDecreaseOrder(address, uint256, address payable) external;\\n    function executeIncreaseOrder(address, uint256, address payable) external;\\n}\\n\",\"keccak256\":\"0xbb5aed341b0274d09569bc4ede3b5e868cc68d93ea667a2b11d53afd677a7c5d\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IVaultUtils.sol\\\";\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n    function usdg() external view returns (address);\\n    function gov() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetUsdgAmount(address _token) external view returns (uint256);\\n\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setUsdgAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _redemptionBps,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit(address _token) external;\\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function usdgAmounts(address _token) external view returns (uint256);\\n    function maxUsdgAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n}\\n\",\"keccak256\":\"0x906f87c2b5a0351b07836fbc0f19755302ba8ddf1aa5fcef0827fd743ee723b9\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdgAmount) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc8cad694c33f968559eb3feac2226fe26d81d457529b87ae8852390e1474d7be\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"},\"contracts/peripherals/interfaces/ITimelock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ITimelock {\\n    function setAdmin(address _admin) external;\\n    function enableLeverage(address _vault) external;\\n    function disableLeverage(address _vault) external;\\n    function setIsLeverageEnabled(address _vault, bool _isLeverageEnabled) external;\\n    function signalSetGov(address _target, address _gov) external;\\n}\\n\",\"keccak256\":\"0x5a7543c7b61c11b94a4d04137839a8ab392e2d1dd1ab717755a349366c2eaddd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516109e73803806109e78339818101604052604081101561003357600080fd5b5080516020909101516001600160a01b0382161580159061005c57506001600160a01b03811615155b6100ad576040805162461bcd60e51b815260206004820152601e60248201527f4f726465724578656375746f723a20696e76616c696420616464726573730000604482015290519081900360640190fd5b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556108ff806100e86000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806307c7edc31461006757806311d9444a1461009f578063126082cf146100d5578063776af5ba146100ef578063d38ab51914610113578063fbfa77cf14610149575b600080fd5b61009d6004803603606081101561007d57600080fd5b506001600160a01b03813581169160208101359160409091013516610151565b005b61009d600480360360608110156100b557600080fd5b506001600160a01b038135811691602081013591604090910135166101cb565b6100dd610228565b60408051918252519081900360200190f35b6100f761022e565b604080516001600160a01b039092168252519081900360200190f35b61009d6004803603606081101561012957600080fd5b506001600160a01b0381358116916020810135916040909101351661023d565b6100f7610415565b600154604080516307c7edc360e01b81526001600160a01b038681166004830152602482018690528481166044830152915191909216916307c7edc391606480830192600092919082900301818387803b1580156101ae57600080fd5b505af11580156101c2573d6000803e3d6000fd5b50505050505050565b600154604080516308eca22560e11b81526001600160a01b038681166004830152602482018690528481166044830152915191909216916311d9444a91606480830192600092919082900301818387803b1580156101ae57600080fd5b61271081565b6001546001600160a01b031681565b6102478383610424565b60008060009054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b15801561029657600080fd5b505afa1580156102aa573d6000803e3d6000fd5b505050506040513d60208110156102c057600080fd5b50516000805460408051630cd2b12360e41b81526001600160a01b0392831660048201526001602482015290519394509084169263cd2b12309260448084019391929182900301818387803b15801561031857600080fd5b505af115801561032c573d6000803e3d6000fd5b50506001546040805163d38ab51960e01b81526001600160a01b038981166004830152602482018990528781166044830152915191909216935063d38ab5199250606480830192600092919082900301818387803b15801561038d57600080fd5b505af11580156103a1573d6000803e3d6000fd5b50506000805460408051630cd2b12360e41b81526001600160a01b039283166004820152602481018490529051918616945063cd2b12309350604480820193929182900301818387803b1580156103f757600080fd5b505af115801561040b573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031681565b6001546040805163d3bab1d160e01b81526001600160a01b03858116600483015260248201859052915160009384938493849384938493169163d3bab1d191604480830192610120929190829003018186803b15801561048357600080fd5b505afa158015610497573d6000803e3d6000fd5b505050506040513d6101208110156104ae57600080fd5b508051602082015160408301516060840151608085015160a090950151939a50919850965094509092509050806104ea57505050505050610712565b6000821161053d576040805162461bcd60e51b815260206004820152601b60248201527a13dc99195c915e1958dd5d1bdc8e881b1bdb99c819195c1bdcda5d602a1b604482015290519081900360640190fd5b6000805460408051634a3f088d60e01b81526001600160a01b038c81166004830152888116602483015287811660448301528515156064830152915191909216929182918491634a3f088d91608480830192610100929190829003018186803b1580156105a957600080fd5b505afa1580156105bd573d6000803e3d6000fd5b505050506040513d6101008110156105d457600080fd5b5080516020909101519092509050816105f557505050505050505050610712565b60006106018387610716565b90506000846001600160a01b0316630a48d5a98c8c6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b15801561065a57600080fd5b505afa15801561066e573d6000803e3d6000fd5b505050506040513d602081101561068457600080fd5b5051905060006106948483610716565b905060006106ae856106a888612710610777565b906107d0565b905060006106c2836106a887612774610777565b9050818110156107035760405162461bcd60e51b81526004018080602001828103825260258152602001806108ce6025913960400191505060405180910390fd5b50505050505050505050505050505b5050565b60008282018381101561076e576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b90505b92915050565b60008261078657506000610771565b8282028284828161079357fe5b041461076e5760405162461bcd60e51b81526004018080602001828103825260218152602001806108ad6021913960400191505060405180910390fd5b600061076e83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250600081836108965760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561085b578181015183820152602001610843565b50505050905090810190601f1680156108885780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816108a257fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f726465724578656375746f723a206c6f6e67206c65766572616765206465637265617365a164736f6c634300060c000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806307c7edc31461006757806311d9444a1461009f578063126082cf146100d5578063776af5ba146100ef578063d38ab51914610113578063fbfa77cf14610149575b600080fd5b61009d6004803603606081101561007d57600080fd5b506001600160a01b03813581169160208101359160409091013516610151565b005b61009d600480360360608110156100b557600080fd5b506001600160a01b038135811691602081013591604090910135166101cb565b6100dd610228565b60408051918252519081900360200190f35b6100f761022e565b604080516001600160a01b039092168252519081900360200190f35b61009d6004803603606081101561012957600080fd5b506001600160a01b0381358116916020810135916040909101351661023d565b6100f7610415565b600154604080516307c7edc360e01b81526001600160a01b038681166004830152602482018690528481166044830152915191909216916307c7edc391606480830192600092919082900301818387803b1580156101ae57600080fd5b505af11580156101c2573d6000803e3d6000fd5b50505050505050565b600154604080516308eca22560e11b81526001600160a01b038681166004830152602482018690528481166044830152915191909216916311d9444a91606480830192600092919082900301818387803b1580156101ae57600080fd5b61271081565b6001546001600160a01b031681565b6102478383610424565b60008060009054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b15801561029657600080fd5b505afa1580156102aa573d6000803e3d6000fd5b505050506040513d60208110156102c057600080fd5b50516000805460408051630cd2b12360e41b81526001600160a01b0392831660048201526001602482015290519394509084169263cd2b12309260448084019391929182900301818387803b15801561031857600080fd5b505af115801561032c573d6000803e3d6000fd5b50506001546040805163d38ab51960e01b81526001600160a01b038981166004830152602482018990528781166044830152915191909216935063d38ab5199250606480830192600092919082900301818387803b15801561038d57600080fd5b505af11580156103a1573d6000803e3d6000fd5b50506000805460408051630cd2b12360e41b81526001600160a01b039283166004820152602481018490529051918616945063cd2b12309350604480820193929182900301818387803b1580156103f757600080fd5b505af115801561040b573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031681565b6001546040805163d3bab1d160e01b81526001600160a01b03858116600483015260248201859052915160009384938493849384938493169163d3bab1d191604480830192610120929190829003018186803b15801561048357600080fd5b505afa158015610497573d6000803e3d6000fd5b505050506040513d6101208110156104ae57600080fd5b508051602082015160408301516060840151608085015160a090950151939a50919850965094509092509050806104ea57505050505050610712565b6000821161053d576040805162461bcd60e51b815260206004820152601b60248201527a13dc99195c915e1958dd5d1bdc8e881b1bdb99c819195c1bdcda5d602a1b604482015290519081900360640190fd5b6000805460408051634a3f088d60e01b81526001600160a01b038c81166004830152888116602483015287811660448301528515156064830152915191909216929182918491634a3f088d91608480830192610100929190829003018186803b1580156105a957600080fd5b505afa1580156105bd573d6000803e3d6000fd5b505050506040513d6101008110156105d457600080fd5b5080516020909101519092509050816105f557505050505050505050610712565b60006106018387610716565b90506000846001600160a01b0316630a48d5a98c8c6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b15801561065a57600080fd5b505afa15801561066e573d6000803e3d6000fd5b505050506040513d602081101561068457600080fd5b5051905060006106948483610716565b905060006106ae856106a888612710610777565b906107d0565b905060006106c2836106a887612774610777565b9050818110156107035760405162461bcd60e51b81526004018080602001828103825260258152602001806108ce6025913960400191505060405180910390fd5b50505050505050505050505050505b5050565b60008282018381101561076e576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b90505b92915050565b60008261078657506000610771565b8282028284828161079357fe5b041461076e5760405162461bcd60e51b81526004018080602001828103825260218152602001806108ad6021913960400191505060405180910390fd5b600061076e83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250600081836108965760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561085b578181015183820152602001610843565b50505050905090810190601f1680156108885780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816108a257fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f726465724578656375746f723a206c6f6e67206c65766572616765206465637265617365a164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5260,
        "contract": "contracts/core/OrderExecutor.sol:OrderExecutor",
        "label": "vault",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5262,
        "contract": "contracts/core/OrderExecutor.sol:OrderExecutor",
        "label": "orderBook",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}